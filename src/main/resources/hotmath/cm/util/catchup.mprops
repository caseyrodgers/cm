#############
## General properties
#############

### uid used as demo user template
.key=DEMO_USER_ID

727



# 
#  Contains all static text entries used by Catchup Math
#


################
## CmStudentDao
################

.key=STUDENT_SUMMARY

SELECT h.uid, upper(h.user_name) as name, h.user_passcode as passcode, h.user_email as email, h.admin_id as admin_uid,
       h.is_show_work_required, h.is_tutoring_available,  h.active_segment, p.test_config_json, h.user_prog_id,
       p.test_def_id, p.create_date, concat(p.pass_percent,'%') as pass_percent, t.total_segments, 
       lpad(concat(format((m.answered_correct*100)/(m.answered_correct+m.answered_incorrect+m.not_answered),0),'%'),4,' ') as last_quiz, 
       trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
       date_format(l.login_time,'%Y-%m-%d') as last_use_date, 
       tu.usage_count, ifnull(g.id, 0) as group_id, ifnull(g.name, 'none') as group_name, gui_background_style  
FROM  HA_ADMIN a 
INNER JOIN HA_USER h 
   on a.aid = h.admin_id  
INNER JOIN CM_USER_PROGRAM p 
   on p.user_id = h.uid and p.id = h.user_prog_id 
LEFT JOIN HA_TEST_DEF d 
   on d.test_def_id = p.test_def_id 
LEFT JOIN (select user_id, max(run_id) as run_id from HA_TEST_RUN r JOIN HA_TEST t on r.test_id = t.test_id GROUP BY user_id) x ON x.user_id = h.uid 
LEFT JOIN HA_TEST_RUN m 
  on m.run_id =  x.run_id
LEFT JOIN (select user_id, max(login_time) as login_time from HA_USER_LOGIN GROUP BY user_id) l on l.user_id = h.uid 
LEFT JOIN HA_TEST t 
  on t.user_id = h.uid and t.test_id = m.test_id 
LEFT JOIN (select u.uid, count(*) as usage_count from HA_TEST_RUN_INMH_USE i, HA_TEST t, HA_TEST_RUN r, HA_USER u  
           where t.user_id = u.uid and r.test_id = t.test_id and i.run_id = r.run_id group by u.uid) tu
   on tu.uid = h.uid 
LEFT JOIN CM_GROUP g 
   on g.id = h.group_id

###
.key=STUDENT_ACTIVITY

select max(s.use_date) as use_date, date_format(min(s.view_time),'%h:%i %p') as start_time,
  date_format(max(s.view_time),'%h:%i %p') as stop_time, max(s.view_time) as view_time,
  max(s.run_date) as run_date,
  s.answered_correct, s.answered_incorrect, s.not_answered, s.program, s.prog_id, s.subj_id, s.test_config_json,
  s.test_id as test_id, max(s.test_segment) as test_segment, s.test_def_id, s.test_run_id,
  s.activity, s.is_quiz, count(*) as problems_viewed, max(s.session_number) as session_number,
  s.total_sessions
from (
 select date_format(l.create_time,'%Y-%m-%d') as use_date, date_format(l.create_time,'%h:%i %p') as start_time,
   date_format(r.run_time,'%h:%i %p') as stop_time, r.run_time as view_time,
   date_format(r.run_time,'%Y-%m-%d') as run_date,
   r.answered_correct, r.answered_incorrect, r.not_answered,
   concat(td.subj_id, ' ', td.prog_id) as program,  td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, l.test_segment, td.test_def_id as test_def_id,
   r.run_id as test_run_id, 0 as total_sessions,
   'Quiz-' as activity, 1 as is_quiz, l.test_segment as session_number
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.test_def_id = td.test_def_id
 where u.uid = ?

 union

 select date_format(iu.view_time,'%Y-%m-%d') as use_date, date_format(iu.view_time,'%h:%i %p') as start_time,
  date_format(iu.view_time,'%h:%i %p') as stop_time, iu.view_time as view_time,
  date_format(iu.view_time,'%Y-%m-%d') as run_date,
  0 as answered_correct, 0 as answered_incorrect, 0 as not_answered,
  concat(td.subj_id, ' ', td.prog_id) as program, td.prog_id, td.subj_id, p.test_config_json,
  l.test_id as test_id, iu.session_number as test_segment, td.test_def_id as test_def_id,
  r.run_id as test_run_id, r.total_sessions as total_sessions,
  'Review-' as activity, 0 as is_quiz, iu.session_number as session_number
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
 join v_HA_TEST_RUN_INMH_USE_REQ_PROBS iu on iu.run_id = r.run_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.test_def_id = td.test_def_id
 where u.uid = ?
) s
group by s.test_run_id, s.is_quiz, s.use_date
order by s.view_time asc, s.test_run_id asc, s.session_number asc

    
.key=TEST_RESULTS

select td.test_name, t.test_segment,im.file, rr.pid, rr.answer_status
from HA_TEST_DEF td, HA_TEST t, HA_TEST_RUN tr, HA_TEST_RUN_RESULTS rr, inmh_map im
where tr.run_id = ? 
and rr.run_id = tr.run_id 
and tr.test_id = t.test_id
and t.test_def_id = td.test_def_id and im.guid = rr.pid



.key=CHECK_DUPLICATE_PASSCODE

select 1 from HA_USER where user_passcode = ? and uid <> ? and admin_id = ?


.key=CHECK_DUPLICATE_NAME

select 1 from HA_USER where user_name = ? and uid <> ? and admin_id = ? and is_active = 1    




.key=UPDATE_STUDENT_SQL

update HA_USER
set    user_name = ?,
       user_passcode = ?,
       group_id = ?,
       test_def_id = (select test_def_id
                      from   HA_TEST_DEF
                      where  prog_id = ?
                             and subj_id = ?),
       user_prog_id = ?,
       is_tutoring_available = ?,
       is_show_work_required = ?,
       gui_background_style = ?
where  uid = ?


.key=WHITEBOARD_STUDENT_LIST

## whiteboard data returned to CM Admin for a given user
select   distinct a.pid,
                  a.run_id,
                  b.*
from     HA_TEST_RUN_WHITEBOARD a,
         (select   user_id,
                   pid,
                   Max(insert_time_mills) as insert_time_mills
          from     HA_TEST_RUN_WHITEBOARD b
          group by user_id, pid) b
where    a.user_id = ?
         and b.pid = a.pid
         and b.user_id = a.user_id
order by insert_time_mills desc




        
#############
##
## CmAdminDao
##
#############

.key=SUBJECT_CHAPTERS_SQL

select bt.title_number, trim(bt.title) as title, td.textcode
from HA_TEST_DEF td, BOOK_TOC bt
where td.prog_id = ? and td.subj_id = ?
and bt.textcode = td.textcode and bt.parent <> 0
order by bt.title_number   

    
.key=SELECT_SUBJECTS_SQL

select sd.*
from HA_SUBJ_DEF sd, HA_TEST_DEF td
where sd.id = td.subj_id and td.is_active = 1 
and td.prog_id = ? and sd.for_school = ?


.key=SELECT_GROUPS_SQL
# select Admin specific and default (admin_id=0) Groups

SELECT id, name, description, is_active
FROM  CM_GROUP g
INNER JOIN HA_ADMIN a
   ON g.admin_id = a.aid
WHERE a.aid = ?
  AND g.is_active = ?
UNION
SELECT g.id, g.name, g.description, g.is_active
FROM CM_GROUP g
WHERE g.admin_id = 0
  AND g.is_active = ?
ORDER by name asc


.key=ACCOUNT_INFO_SQL

select s.id,
       Ifnull(s.school_type,'NONE')                  as school_name,
       s.responsible_name,
       sc.date_expire                                as catchup_expire_date,
       sc.service_name,
       st.date_expire                                as tutoring_expire_date,
       h.user_name,
       t.student_count,
       Ifnull(cc.max_students,200)                   as max_students,
       l.login_time,
       Date_format(l.login_time,'%Y-%m-%d %h:%i %p') as login_date_time
from   SUBSCRIBERS s
       inner join HA_ADMIN h
         on h.subscriber_id = s.id
       left join SUBSCRIBERS_SERVICES st
         on st.subscriber_id = h.subscriber_id
            and st.service_name = 'tutoring'
       left join SUBSCRIBERS_SERVICES sc
         on sc.subscriber_id = h.subscriber_id
            and sc.service_name = 'catchup'
       left join SUBSCRIBERS_SERVICES_CONFIG_CATCHUP cc
         on cc.subscriber_svc_id = sc.ssid
       left join (select   admin_id,
                           is_active,
                           Count(* ) as student_count
                  from     HA_USER
                  where    is_active = 1
                           and is_auto_create_template = 0
                  group by admin_id) t
         on t.admin_id = h.aid
       left join (select   user_id,
                           Max(login_time) as login_time
                  from     HA_USER_LOGIN u
                  where    u.login_time < (select   Max(login_time) as login_time
                                           from     HA_USER_LOGIN
                                           where    user_type = 'ADMIN'
                                                    and user_id = ?
                                           group by user_id)
                           and u.user_id = ?
                  group by u.user_id) l
         on l.user_id = h.aid
where  h.aid = ?
           
           
           
           
           
           
.key=ACCOUNT_TYPE_LOOKUP

select s.type
from   SUBSCRIBERS s
  join  HA_ADMIN a
    on a.subscriber_id = s.id
where a.aid = ?





                
        
## 
## Class: CreateAutoRegistrationAccountCommand
##
## Return group names used as self-registration auto templates
##

.key=AUTO_CREATE_TEMPLATE_CHECK

select  g.name as group_name 
from  HA_USER u JOIN CM_GROUP g on u.group_id = g.id 
where is_auto_create_template = 1  
and   g.name = ?   



##
## Class: HaTestRun
##
##

.key=VALID_TEST_RUNS

select r.run_id, u.uid
 from   HA_TEST_RUN r JOIN HA_TEST t ON t.test_id = r.test_id 
JOIN HA_USER u on u.uid = t.user_id 
JOIN  HA_ADMIN a ON a.aid = u.admin_id
JOIN SUBSCRIBERS s ON s.id = a.subscriber_id
 
 
.key=TEST_RUN_LOOK_FOR_TESTS
##
##  Return run_ids for a given run
select run_id from HA_TEST_RUN where test_id = ? order by run_time
 
       
       
##
##       
## Class: HaTestDao
##
## load information about a given test
## NOTE: join to CM_USER_PROGRAM to pick
##       up program info used to create test
##       (is outer for backward compatibility)

.key=HA_TEST_LOAD

select t.*,
       c.id          as prog_id,
       u.admin_id    as admin_id,
       c.create_date as prog_create_date,
       c.test_def_id as prog_test_def_id,
       c.test_config_json,
       d.test_name   as prog_test_name,
       r.run_id
from   HA_TEST t
       join HA_USER u
         on u.uid = t.user_id
       left join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       left join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
       left join HA_TEST_RUN r
         on r.test_id = t.test_id
where t.test_id = ?

.key=HA_TEST_LOAD_FOR_PROGRAMS

select t.*,
       c.id          as prog_id,
       u.admin_id    as admin_id,
       c.create_date as prog_create_date,
       c.test_def_id as prog_test_def_id,
       c.test_config_json,
       d.test_name   as prog_test_name
from   HA_TEST t
       join HA_USER u
         on u.uid = t.user_id
       join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       left join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
where t.user_prog_id in (XXX)




##
## Class: HaTestDefDescription
## 
## sql used to load program info for a given test


.key=LOAD_PROGRAM_INFO_FOR_TEST

select c.id,
       c.user_id,
       c.pass_percent,
       c.test_def_id,
       c.test_config_json,       
       d.test_name,
       u.admin_id
from   CM_USER_PROGRAM c
       join HA_TEST t
         on c.id = t.user_prog_id
       join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
       join HA_USER u
         on u.uid = t.user_id
where  t.test_id = ?



       
##
## Class: HaUser
##
## sql used to lookup a given user

.key=HA_USER_LOOKUP_USER

select s.type,
       u.uid,
       u.user_name,
       u.active_run_id,
       u.active_test_id,
       u.active_segment,
       u.active_run_session,
       u.is_show_work_required,
       u.user_passcode,
       Ifnull(u.is_demo, 0) as is_demo,
       d.test_name as assigned_test_name,
       p.test_config_json,
       gui_background_style,
       p.pass_percent,
       a.aid
from   HA_USER u
       join HA_ADMIN a
         on u.admin_id = a.aid
       join SUBSCRIBERS s
         on a.subscriber_id = s.id
       left join CM_USER_PROGRAM p
         on (p.user_id = u.uid
             and p.id = u.user_prog_id)
        left join HA_TEST_DEF d
           on d.test_def_id = p.test_def_id
             
             
             
             
##
##  Class: HaTestRun 
##
##


.key=TEST_RUN_LOOKUP


select t.*,
       r.*,
       s.pid,
       s.answer_status,
       s.answer_index,
       s.rid,
       r.is_passing
from   HA_TEST_RUN r
       inner join HA_TEST t
         on r.test_id = t.test_id
       left join HA_TEST_RUN_RESULTS s
         on s.run_id = r.run_id
where  r.run_id = ?




##
## Class: HaTestRunDao
##
##

.key=TEST_RUN_LESSONS


select lesson_name, lesson_file,lesson_viewed,date_completed,pid
from   HA_TEST_RUN_LESSON_PID p
  join HA_TEST_RUN_LESSON l
    on p.lid = l.id
where l.run_id = ?
order by lesson_name, pid

##
## Class: CmReportCardDao
##

.key=REPORT_CARD

select u.uid, u.admin_id, td.test_name, if (0<>t.total_segments, concat(' Section ', 1), '') as initial,
   if(u.active_segment<>t.total_segments, concat(' Section ', u.active_segment), ' Completed') as status,
   up.create_date, up.pass_percent, ul.first_login, q.quiz_count, pq.passed_quiz_count,
   tr.correct, tr.incorrect,
   lpad(concat(format((tr.correct*100)/(tr.correct+tr.incorrect),0),'%'),4,' ') as avg_passing_score,
   q.run_id, pq.test_id
from HA_USER u
inner join CM_USER_PROGRAM up on up.user_id = u.uid and up.id = u.user_prog_id
inner join HA_TEST_DEF td on td.test_def_id = up.test_def_id
inner join HA_TEST t on t.test_def_id = td.test_def_id and t.user_id = u.uid
left outer join (select user_id, min(login_time) as first_login from HA_USER_LOGIN group by user_id) ul on ul.user_id = u.uid
left outer join (select count(*) as quiz_count, test_id, run_id from HA_TEST_RUN group by test_id) q on q.test_id = t.test_id
left outer join (select count(*) as passed_quiz_count, test_id, is_passing from HA_TEST_RUN group by test_id) pq on pq.test_id = t.test_id and pq.is_passing > 0
left outer join (select sum(answered_correct) as correct, sum(answered_incorrect+not_answered) as incorrect, test_id from HA_TEST_RUN where is_passing>0 group by test_id) tr on tr.test_id = t.test_id
where u.uid = ? 


.key=LOGIN_COUNT

select count(*) from HA_USER_LOGIN ul where ul.user_id = ? and login_time >= ?


.key=RESOURCE_USAGE_COUNT

select count(*), s.item_type
from (
  select iu.item_file, iu.item_type
  from HA_TEST_RUN_INMH_USE iu,
    (select tr.run_id from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
     where p.id in (XXX)
       and t.user_prog_id = p.id
       and tr.test_id = t.test_id) tt
  where iu.run_id = tt.run_id
    and not (iu.item_type = 'activity' and iu.item_file like '%game%')
  union
  select item_file, 'game'
  from HA_TEST_RUN_INMH_USE iu,
    (select tr.run_id from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
     where p.id in (XXX)
       and t.user_prog_id = p.id
       and tr.test_id = t.test_id) tt
  where iu.run_id = tt.run_id
    and (iu.item_type = 'activity' and iu.item_file like '%game%')
) s
group by s.item_type

.key=LESSONS_ASSIGNED

select distinct(lesson_name)
from HA_TEST_RUN_LESSON rl, HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and rl.run_id = tr.run_id
order by lesson_name asc








############################
############################
## Class: CmUserProgramDao
############################
############################

.key=ALL_USER_PROGRAM_SQL

select c.id, c.user_id, c.pass_percent, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date
from CM_USER_PROGRAM c
JOIN HA_USER u on c.user_id = u.uid
JOIN HA_TEST_DEF t on c.test_def_id = t.test_def_id
where c.user_id = ?





.key=CURRENT_USER_PROGRAM_SQL

select c.id, c.user_id, c.pass_percent, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date
from CM_USER_PROGRAM c
JOIN HA_USER u on c.id = u.user_prog_id
JOIN HA_TEST_DEF t on c.test_def_id = t.test_def_id and u.uid = ?


.key=LOAD_USER_PROGRAM_SQL
#
#Load a named User Program record
##

select c.id,
       c.user_id,
       c.pass_percent,
       u.admin_id,
       c.test_def_id,
       t.test_name,
       c.test_config_json,
       c.create_date
from   CM_USER_PROGRAM c
       join HA_USER u
         on c.id = u.user_prog_id
       join HA_TEST_DEF t
         on c.test_def_id = t.test_def_id
where c.id = ?


.key=PROGRAM_QUIZ_COUNT

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
) c


.key=PROGRAM_PASSED_QUIZ_COUNT

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
) c

.key=PROGRAM_AGGREGATE_QUIZ_RESULTS

select sum(c.answered_correct) as answered_correct, sum(c.answered_incorrect) as answered_incorrect, sum(c.not_answered) as not_answered
from (
  select tr.answered_correct, tr.answered_incorrect, tr.not_answered
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
) c



.key=UPDATE_PASS_PERCENT_SQL

update CM_USER_PROGRAM 
set pass_percent = ? 
where id = ?







#######################
#######################
### HaUserProgramInfoDao
#######################
#######################


.key=USER_PROGRAM_INFO_LOOKUP

select p.*
from   CM_USER_PROGRAM p
where  p.user_id = ?



###########################
###########################
#### UserProgramInfo
###########################
###########################

.key=USER_PROGRAM_INFO_ADMIN

select *
from   HA_USER
where  admin_id = ?
order by uid


.key=USER_PROGRAM_INFO_FOR_USER

select *
from CM_USER_PROGRAM p
where p.id = ?
order by create_date





##########################
##########################
#### GroupManagement
##########################
##########################

.key=GROUP_NAMES_AND_COUNTS



## return groups and their counts, including all default groups

select   g.admin_id,
         g.id,
         g.name,
         Count(u.uid) as student_count
from     HA_ADMIN a
         join CM_GROUP g
           on (g.admin_id = a.aid
                or g.admin_id = 0)
         left join HA_USER u
           on (u.group_id = g.id
               and u.admin_id = a.aid
               and u.is_active = 1
               and u.is_auto_create_template = 0)
where    a.aid = ?
         and (g.admin_id <> 0
               or (g.admin_id = 0
                   and uid is not null)
               or g.name = '__none')
group by g.id
union 
select   0          as admin_id,
         -1         as id,
         'All Students'      as name,
         Count(uid) as student_count
from     HA_USER u
where    u.admin_id = ?
         and is_active = 1
         and is_auto_create_template = 0
group by id
order by name


########################
### HaUserFactory
########################

.key=ADMIN_LOGIN

select a.*, ss.date_expire, ss.subscriber_id, s.type as account_type
from HA_ADMIN a
inner join SUBSCRIBERS s
   on s.id = a.subscriber_id
left outer join (
   select subscriber_id, max(date_expire) as date_expire from SUBSCRIBERS_SERVICES
   where service_name = 'catchup'
   group by subscriber_id
) ss
   on a.subscriber_id = ss.subscriber_id
where a.user_name = ? and a.passcode = ?

.key=USER_LOGIN_SCHOOL

select u.uid, u.user_name, s.type, ss.date_expire
from HA_USER u
INNER JOIN HA_ADMIN h on u.admin_id = h.aid
INNER JOIN SUBSCRIBERS s on s.id = h.subscriber_id
left outer join (
   select subscriber_id, max(date_expire) as date_expire from SUBSCRIBERS_SERVICES
   where service_name = 'catchup'
   group by subscriber_id
) ss
on h.subscriber_id = ss.subscriber_id
where s.password = ?
  and u.user_passcode = ? and u.is_active = 1

.key=USER_LOGIN_INDIV

select u.uid, u.user_name, s.type, ss.date_expire
from HA_USER u
INNER JOIN HA_ADMIN h on u.admin_id = h.aid
INNER JOIN SUBSCRIBERS s on s.id = h.subscriber_id
left outer join (
   select subscriber_id, max(date_expire) as date_expire from SUBSCRIBERS_SERVICES
   where service_name = 'catchup'
   group by subscriber_id
) ss
on h.subscriber_id = ss.subscriber_id
where s.student_email = ? and s.type = 'PS'
  and u.user_passcode = ? and u.is_active = 1
  
.key=USER_LOGIN_AUTOREG

select u.uid
from   HA_USER u
JOIN CM_GROUP g ON u.group_id = g.id
JOIN HA_ADMIN a ON u.admin_id = a.aid
JOIN SUBSCRIBERS s ON a.subscriber_id = s.id
where s.type = 'ST'
  and s.password = ?
  and g.name = ?
  and is_auto_create_template = 1









