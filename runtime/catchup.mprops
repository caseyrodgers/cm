#############
## General properties
#############

### uid used as demo user template
.key=DEMO_USER_ID

727



# 
#  Contains all static text entries used by Catchup Math
#


################
## CmStudentDao
################

.key=STUDENT_SUMMARY

SELECT h.uid, upper(h.user_name) as name, h.user_passcode as passcode, h.user_email as email, h.admin_id as admin_uid,
       h.user_prog_id, h.is_show_work_required, h.is_tutoring_available, h.active_segment, h.gui_background_style, h.is_demo,
       p.test_def_id, p.create_date, concat(p.pass_percent,'%') as pass_percent, p.test_config_json,
       ifnull(s.limit_games, 0) as limit_games, ifnull(s.show_work_required, 0) as show_work_required,
       ifnull(s.stop_at_program_end, 0) as stop_at_program_end, ifnull(s.tutoring_available, 0) as tutoring_available,
       trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
       ifnull(g.id, 0) as group_id, ifnull(g.name, 'none') as group_name, g.is_active, g.is_self_reg,
       cp.id as custom_program_id, cp.name as custom_program_name,
       if ((h.active_run_id > 0),
           lpad(concat(format(ux.last_quiz,0),'%'),4,' '),
           if((h.active_test_id > 0), 'Started', ' ') ) as last_quiz,
       date_format(ux.last_login,'%Y-%m-%d') as last_use_date, 
       ifnull(ux.quiz_pass_count, 0) as passing_count, ifnull(ux.quiz_not_pass_count, 0) as not_passing_count,
       ifnull(ux.current_lesson, 0) as current_lesson, ifnull(ux.lesson_count, 0) as lesson_count,
       ifnull(ux.lessons_completed, 0) as lessons_completed,
       ifnull(ut.tutoring_use, 0) as tutoring_use
FROM  HA_ADMIN a 
INNER JOIN HA_USER h 
   on a.aid = h.admin_id  
INNER JOIN CM_USER_PROGRAM p 
   on p.user_id = h.uid and p.id = h.user_prog_id
LEFT JOIN HA_USER_SETTINGS s
   on s.user_id = h.uid
LEFT JOIN HA_TEST_DEF d 
   on d.test_def_id = p.test_def_id 
LEFT JOIN CM_GROUP g 
   on g.id = h.group_id
LEFT JOIN HA_CUSTOM_PROGRAM cp 
   on cp.id = p.custom_program_id
LEFT JOIN HA_USER_EXTENDED ux on ux.user_id = h.uid
LEFT JOIN (SELECT uid, count(*) as tutoring_use 
           FROM HA_USER_TUTORING_SESSION ts
           GROUP by uid) ut on ut.uid = h.uid


.key=STUDENT_SUMMARY_BASE

SELECT h.uid, upper(h.user_name) as name, h.user_passcode as passcode, h.user_email as email, h.admin_id as admin_uid,
       h.user_prog_id, h.is_show_work_required, h.is_tutoring_available, h.active_segment, h.gui_background_style, h.is_demo,
       p.test_def_id, p.create_date, p.pass_percent, p.test_config_json,
       ifnull(s.limit_games, 0) as limit_games, ifnull(s.show_work_required, 0) as show_work_required,
       ifnull(s.stop_at_program_end, 0) as stop_at_program_end, ifnull(s.tutoring_available, 0) as tutoring_available,
       trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
       ifnull(g.id, 0) as group_id, ifnull(g.name, 'none') as group_name, g.is_active, g.is_self_reg,
       ifnull(ux.current_lesson, 0) as current_lesson, ifnull(ux.lesson_count, 0) as lesson_count,
       ifnull(ux.lessons_completed, 0) as lessons_completed,
       cp.id as custom_program_id, cp.name as custom_program_name
FROM  HA_ADMIN a 
INNER JOIN HA_USER h 
   on a.aid = h.admin_id  
INNER JOIN CM_USER_PROGRAM p 
   on p.user_id = h.uid and p.id = h.user_prog_id
LEFT JOIN HA_USER_SETTINGS s
   on s.user_id = h.uid
LEFT JOIN HA_TEST_DEF d 
   on d.test_def_id = p.test_def_id 
LEFT JOIN CM_GROUP g 
   on g.id = h.group_id
LEFT JOIN HA_CUSTOM_PROGRAM cp 
   on cp.id = p.custom_program_id
LEFT JOIN HA_USER_EXTENDED ux on ux.user_id = h.uid


.key=STUDENT_SUMMARY_EXTENDED

SELECT h.uid, h.admin_id as admin_uid, h.user_prog_id,
       if ((h.active_run_id > 0),
           lpad(concat(format(ux.last_quiz,0),'%'),4,' '),
           if((h.active_test_id > 0), 'Started', ' ') ) as last_quiz,
       date_format(ux.last_login,'%Y-%m-%d') as last_use_date, 
       ifnull(ux.quiz_pass_count, 0) as passing_count, ifnull(ux.quiz_not_pass_count, 0) as not_passing_count,
       ifnull(ut.tutoring_use, 0) as tutoring_use
FROM  HA_USER h
LEFT JOIN HA_USER_EXTENDED ux on ux.user_id = h.uid
LEFT JOIN (SELECT uid, count(*) as tutoring_use 
           FROM HA_USER_TUTORING_SESSION ts
           GROUP by uid) ut on ut.uid = h.uid
WHERE h.uid in (XXX) 
ORDER BY h.user_name

.key=INSERT_STUDENT_EXTENDED

INSERT into HA_USER_EXTENDED (user_id, quiz_pass_count, quiz_not_pass_count, last_quiz, last_login)
values(?,?,?,?,(select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=INSERT_STUDENT_EXTENDED_LOGIN

INSERT into HA_USER_EXTENDED (user_id, quiz_pass_count, quiz_not_pass_count, last_quiz, last_login)
values(?,null,null,null,(select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=INSERT_STUDENT_EXTENDED_LESSON_STATUS

INSERT into HA_USER_EXTENDED (user_id, current_lesson, lesson_count, lessons_completed, last_login)
values(?,0,?,0,(select max(login_time) from HA_USER_LOGIN where user_id = ?))


.key=INSERT_STUDENT_EXTENDED_LESSON_STATUS_PLUS

INSERT into HA_USER_EXTENDED (user_id, current_lesson, lesson_count, lessons_completed, last_login)
values(?,0,(select active_run_id from HA_USER where uid = ?), 0, (select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=INSERT_STUDENT_EXTENDED_LESSON_COMPLETED

INSERT into HA_USER_EXTENDED (user_id, lesson_count, lessons_completed, last_login)
values(?,(select active_run_id from HA_USER where uid = ?), 1, (select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=STUDENT_LAST_LOGIN

SELECT h.uid, h.admin_id as admin_uid,
       date_format(l.login_time,'%Y-%m-%d') as last_use_date
FROM  HA_USER h
LEFT JOIN (select user_id, max(login_time) as login_time from HA_USER_LOGIN GROUP BY user_id) l on l.user_id = h.uid
WHERE h.uid in (XXX)


.key=STUDENT_LAST_QUIZ

SELECT h.uid, h.admin_id as admin_uid,
       if ((h.active_run_id > 0),
           lpad(concat(format((m.answered_correct*100)/(m.answered_correct+m.answered_incorrect+m.not_answered),0),'%'),4,' '),
           if ((h.active_test_id > 0), 'Started', ' ') ) as last_quiz
FROM  HA_USER h
LEFT JOIN (select user_id, max(run_id) as run_id from HA_TEST_RUN r
           JOIN HA_TEST t on r.test_id = t.test_id GROUP BY user_id) x ON x.user_id = h.uid
LEFT JOIN HA_TEST_RUN m  on m.run_id =  x.run_id
LEFT JOIN HA_TEST t  on t.user_id = h.uid and t.test_id = m.test_id
WHERE h.uid in (XXX)


.key=STUDENT_PASSING_COUNT

SELECT h.uid, h.admin_id as admin_uid,
       ifnull(q.passing_count, 0) as passing_count, ifnull(q.not_passing_count, 0) as not_passing_count
FROM  HA_USER h
LEFT JOIN v_HA_TEST_RUN_PNP_TOTALS q  on q.user_id = h.uid
WHERE h.uid in (XXX)


.key=STUDENT_TUTORING_USE

SELECT h.uid, h.admin_id as admin_uid,
       ifnull(ut.tutoring_use, 0) as tutoring_use
FROM  HA_USER h
LEFT JOIN (select uid, count(*) as tutoring_use from HA_USER_TUTORING_SESSION ts group by uid) ut on ut.uid = h.uid
WHERE h.uid in (XXX)


.key=SETTINGS_SELECT_SQL

select limit_games,
       show_work_required,
       stop_at_program_end,
       tutoring_available
from   HA_USER_SETTINGS
where  user_id = ? 



###
.key=STUDENT_SEARCH_EXTENDED

select s.uid from (
  SELECT h.uid, h.admin_id as admin_uid, h.active_segment, p.test_config_json, h.user_prog_id, p.test_def_id, p.create_date, p.pass_percent,
         if ((h.active_run_id > 0),
             lpad(concat(format((m.answered_correct*100)/(m.answered_correct+m.answered_incorrect+m.not_answered),0),'%'),4,' '),
             if((h.active_test_id > 0), 'Started', ' ') ) as last_quiz,
         trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
         date_format(l.login_time,'%Y-%m-%d') as last_use_date,
         if ( (ifnull(q.passing_count, 0)!=0 or ifnull(q.not_passing_count, 0)!=0),
              concat(ifnull(q.passing_count, 0), ' passed out of ', (ifnull(q.not_passing_count, 0) + ifnull(q.passing_count, 0))), ' ') as quizzes,
         h.gui_background_style,
         ifnull(ut.tutoring_use, 0) as tutoring_use
  FROM  HA_USER h
  INNER JOIN CM_USER_PROGRAM p   on p.user_id = h.uid and p.id = h.user_prog_id 
  LEFT JOIN HA_TEST_DEF d   on d.test_def_id = p.test_def_id
  LEFT JOIN (select user_id, max(run_id) as run_id from HA_TEST_RUN r
             JOIN HA_TEST t on r.test_id = t.test_id GROUP BY user_id) x ON x.user_id = h.uid
  LEFT JOIN HA_TEST_RUN m  on m.run_id =  x.run_id
  LEFT JOIN (select user_id, max(login_time) as login_time from HA_USER_LOGIN GROUP BY user_id) l on l.user_id = h.uid
  LEFT JOIN v_HA_TEST_RUN_PNP_TOTALS q  on q.user_id = h.uid
  LEFT JOIN (select uid, count(*) as tutoring_use from HA_USER_TUTORING_SESSION ts group by uid) ut on ut.uid = h.uid
  WHERE h.uid in (XXX))s
where s.last_use_date  like '%YYY%'
   or s.tutoring_use   like '%YYY%'
   or lower(s.quizzes) like '%YYY%'
   or s.last_quiz      like '%YYY%'
  
###
.key=STUDENT_ACTIVITY

select max(s.use_date) as use_date, date_format(min(s.view_time),'%h:%i %p') as start_time,
  date_format(max(s.view_time),'%h:%i %p') as stop_time, max(s.view_time) as view_time,
  max(s.run_date) as run_date,
  s.answered_correct, s.answered_incorrect, s.not_answered, s.program, s.prog_id, s.subj_id, s.test_config_json,
  s.test_id as test_id, max(s.test_segment) as test_segment, s.test_def_id, s.test_run_id,
  s.activity, s.is_quiz, count(*) as problems_viewed, max(s.session_number) as session_number,
  s.total_sessions
from (

 select date_format(l.create_time,'%Y-%m-%d') as use_date, date_format(l.create_time,'%h:%i %p') as start_time,
   null as stop_time, l.create_time as view_time,
   date_format(l.create_time,'%Y-%m-%d') as run_date,
   0 as answered_correct, 0 as answered_incorrect, 0 as not_answered,
   concat(td.subj_id, ' ', td.prog_id) as program,  td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, l.test_segment, td.test_def_id as test_def_id,
   0 as test_run_id,
   0 as total_sessions,
   'Quiz-' as activity, 1 as is_quiz, l.test_segment as session_number
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and p.custom_program_id is null
 where u.uid = ?
  and u.active_test_id = l.test_id

 union
 
 select date_format(l.create_time,'%Y-%m-%d') as use_date, date_format(l.create_time,'%h:%i %p') as start_time,
   date_format(r.run_time,'%h:%i %p') as stop_time, r.run_time as view_time,
   date_format(r.run_time,'%Y-%m-%d') as run_date,
   r.answered_correct, r.answered_incorrect, r.not_answered,
   concat(td.subj_id, ' ', td.prog_id) as program, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, l.test_segment, td.test_def_id as test_def_id,
   r.run_id as test_run_id, 0 as total_sessions,
   'Quiz-' as activity, 1 as is_quiz, l.test_segment as session_number
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and p.custom_program_id is null
 where u.uid = ?
 
 union
 
select date_format(iu.view_time,'%Y-%m-%d') as use_date, date_format(iu.view_time,'%h:%i %p') as start_time,
  date_format(iu.view_time,'%h:%i %p') as stop_time, iu.view_time as view_time,
  date_format(iu.view_time,'%Y-%m-%d') as run_date,
  0 as answered_correct, 0 as answered_incorrect, 0 as not_answered,
  if (p.custom_program_id is null, concat(td.subj_id, ' ', td.prog_id), concat('CP: ', cp.name)) as program, td.prog_id, td.subj_id, p.test_config_json,
  l.test_id as test_id, iu.session_number as test_segment, td.test_def_id as test_def_id,
  r.run_id as test_run_id, r.total_sessions as total_sessions,
  if (p.custom_program_id is null, 'Review-', 'Review') as activity, 0 as is_quiz, iu.session_number as session_number
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
 join (
     select l.run_id,max(l.lesson_number) as session_number,max(lesson_viewed) as view_time
     from    HA_TEST_RUN_LESSON l
         JOIN HA_TEST_RUN_LESSON_PID p on p.lid = l.id
         JOIN HA_TEST_RUN r on r.run_id = l.run_id
         JOIN HA_TEST t on t.test_id = r.test_id
     where t.user_id = ?
     and l.lesson_viewed is not null
     group by l.run_id, l.lesson_file
 ) iu on iu.run_id = r.run_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id
 left join HA_CUSTOM_PROGRAM cp on cp.id = p.custom_program_id and p.custom_program_id is not null
 where u.uid = ?
 
) s
group by s.test_run_id, s.is_quiz, s.use_date
order by s.view_time asc, s.test_run_id asc, s.session_number asc


    
.key=TEST_RESULTS

select td.test_name, t.test_segment,im.file, rr.pid, rr.answer_status
from HA_TEST_DEF td, HA_TEST t, HA_TEST_RUN tr, HA_TEST_RUN_RESULTS rr, inmh_map im
where tr.run_id = ? 
and rr.run_id = tr.run_id 
and tr.test_id = t.test_id
and t.test_def_id = td.test_def_id and im.guid = rr.pid



.key=CHECK_DUPLICATE_PASSCODE

select 1 as dup from HA_USER u where u.user_passcode = ? and u.uid <> ? and u.admin_id = ?
union
select 1 as dup
from      CM_GROUP g
where     g.admin_id = ?
  and     g.name = ?
  and     g.id in (select group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
  

.key=CHECK_DUPLICATE_NAME

select 1 from HA_USER where user_name = ? and uid <> ? and admin_id = ? and is_active = 1    



.key=UPDATE_STUDENT_SQL

update HA_USER
set    user_name = ?,
       user_passcode = ?,
       group_id = ?,
       test_def_id = (select max(test_def_id) as test_def_id
                      from   HA_TEST_DEF
                      where  prog_id = ?
                             and subj_id = ?
                             and is_active = 1),
       user_prog_id = ?,
       gui_background_style = ?
where  uid = ?


.key=WHITEBOARD_STUDENT_LIST

## whiteboard data returned to CM Admin for a given user
select   distinct a.pid,
                  a.run_id,
                  b.*
from     HA_TEST_RUN_WHITEBOARD a,
         (select   user_id,
                   pid,
                   Max(insert_time_mills) as insert_time_mills
          from     HA_TEST_RUN_WHITEBOARD b
          where b.user_id = ?
          group by user_id, pid) b
where    a.user_id = ?
         and b.pid = a.pid
         and b.user_id = a.user_id
order by insert_time_mills desc




.key=ADD_STUDENT_SQL


insert into HA_USER (user_name, user_passcode, active_segment, group_id, test_def_id, admin_id, is_active, is_demo, gui_background_style, date_created)
values(?, ?, ?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active = 1), ?, 1, ?,?, now())




.key=INSERT_STUDENT_PROGRAM_SQL

insert CM_USER_PROGRAM (user_id, admin_id, test_def_id, pass_percent, create_date, test_config_json,custom_program_id)
values (?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active = 1), ?, ?,?,?)


.key=INSERT_STUDENT_PROGRAM_NULL_PASS_PERCENT_SQL
insert CM_USER_PROGRAM (user_id, admin_id, test_def_id, create_date,test_config_json,custom_program_id)
values (?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active = 1), ?, ?,?)


.key=GET_TEST_DEF_BY_PROG_SUBJECT
select max(test_def_id) as test_def_id 
from HA_TEST_DEF 
where prog_id = ? 
and subj_id = ? 
and is_active = 1



.key=VERIFY_IS_ACTIVE_PROGRAM

# verify that the test_id was created from the active
# program assigned to user.  This is to check if a 
# program has been assigned while user is currently
# using a program.


select count(*)
from HA_TEST t
  JOIN HA_USER u on u.user_prog_id = t.user_prog_id
  JOIN CM_USER_PROGRAM p  ON p.id = u.user_prog_id
where t.test_id = ?



.key=VERIFY_IS_ACTIVE_PROGRAM_FOR_STUDENT

# verify that the test_id was created from the active
# program assigned to user with uid.  This is to check if a 
# new program has been assigned while user is currently
# using a program.

select count(*)
from HA_TEST t
  JOIN HA_USER u on u.uid = ? and u.user_prog_id = t.user_prog_id
  JOIN CM_USER_PROGRAM p  ON p.id = u.user_prog_id
where t.test_id = ?



.key=STUDENT_CAN_BE_DELETED

## return a row for active students.  This 
## should include includes all self-reg template users.

select 'x' 
from HA_USER u
LEFT JOIN HA_TEST t on t.user_id = u.uid
where u.uid = $$UID$$
and (
             u.is_auto_create_template = 1
             OR
             t.test_id is not null
)             



.key=DEACTIVATE_STUDENT


update HA_USER 
set is_active = 0, user_passcode = ? 
where uid = ?
and is_auto_create_template = 0


        
#############
##
## CmAdminDao
##
#############

.key=ADD_GROUP_SQL

insert into CM_GROUP 
  (name, description, is_active, admin_id)
  values( ?, ?, ?, ?)


.key=SUBJECT_CHAPTERS_SQL

select bt.title_number, trim(bt.title) as title, td.textcode
from HA_TEST_DEF td, BOOK_TOC bt
where td.prog_id = ? and td.subj_id = ?
and bt.textcode = td.textcode and bt.parent <> 0
order by bt.title_number   

.key=REMOVE_AUTO_REG_SETUP_SQL

delete u
from HA_USER u
JOIN CM_GROUP g ON u.group_id = g.id
where u.admin_id = ?
  and g.name = ?
  and is_auto_create_template = 1


.key=SELECT_SUBJECTS_SQL

select sd.*
from HA_SUBJ_DEF sd, HA_TEST_DEF td
where sd.id = td.subj_id 
and td.is_active = 1 
and td.prog_id = ? 
and sd.for_school = ?
order by td.load_order


.key=SELECT_GROUPS_SQL
# select Admin specific and default (admin_id=0) Groups

SELECT     id, name, description, g.is_active, ifnull(is_auto_create_template, 0) as is_auto_create_template
FROM       CM_GROUP g
LEFT JOIN  HA_USER u
       ON  u.group_id = g.id
      AND  u.is_auto_create_template = 1
      AND  u.admin_id = ?
WHERE      g.admin_id = ?
  AND      g.is_active = ?
UNION
SELECT     g.id, g.name, g.description, g.is_active,0 as is_auto_create_template
FROM       CM_GROUP g
WHERE      g.admin_id = 0
  AND      g.is_active = ?
ORDER BY   name asc


.key=STUDENTS_IN_GROUP

SELECT     g.id as group_id, u.uid, u.user_name
FROM       HA_ADMIN h
JOIN       HA_USER u
  ON       u.admin_id = h.aid and u.is_active = 1 and u.is_auto_create_template = 0
JOIN       CM_GROUP g
  ON       g.id = u.group_id
WHERE      h.aid = ? and g.name = ?
ORDER BY   user_name

            
.key=STUDENTS_NOT_IN_GROUP

SELECT     g.id as group_id, u.uid, u.user_name, g.name as group_name
FROM       HA_ADMIN h
JOIN       HA_USER u
  ON       u.admin_id = h.aid and u.is_active = 1 and u.is_auto_create_template = 0
LEFT JOIN  CM_GROUP g
  ON       g.id = u.group_id
WHERE      h.aid = ? and (g.name <> ? or g.name is null)
ORDER BY   user_name


.key=ACCOUNT_INFO_SQL

select s.id,
       Ifnull(s.school_type,'NONE')                  as school_name,
       s.responsible_name,
       sc.date_expire                                as catchup_expire_date,
       sc.service_name,
       st.date_expire                                as tutoring_expire_date,
       h.user_name,
       h.create_date as account_create_date,       
       t.student_count,
       Ifnull(cc.max_students,1000)                   as max_students,
       l.login_time,
       Date_format(l.login_time,'%Y-%m-%d %h:%i %p') as login_date_time
from   SUBSCRIBERS s
       inner join HA_ADMIN h
         on h.subscriber_id = s.id
       left join SUBSCRIBERS_SERVICES st
         on st.subscriber_id = h.subscriber_id
            and st.service_name = 'tutoring'
       left join SUBSCRIBERS_SERVICES sc
         on sc.subscriber_id = h.subscriber_id
            and sc.service_name = 'catchup'
       left join SUBSCRIBERS_SERVICES_CONFIG_CATCHUP cc
         on cc.subscriber_svc_id = sc.ssid
       left join (select   admin_id,
                           is_active,
                           Count(* ) as student_count
                  from     HA_USER
                  where    admin_id = ?
                    and    is_active = 1
                    and    is_auto_create_template = 0
                  group by admin_id) t
         on t.admin_id = h.aid
       left join (select   user_id,
                           Max(login_time) as login_time
                  from     HA_USER_LOGIN u
                  where    u.login_time < (select   Max(login_time) as login_time
                                           from     HA_USER_LOGIN
                                           where    user_type = 'ADMIN'
                                             and    user_id = ?
                                           group by user_id)
                           and u.user_id = ?
                  group by u.user_id) l
         on l.user_id = h.aid
where  h.aid = ?
           
           
           
           
.key=ADMIN_PROGRAM_DEFINITIONS

## NOTE: Include the system template as well.
##
select   d.id,
         d.title,
         d.description,
         d.needs_subject,
         d.needs_chapter,
         d.needs_pass_percent,
         d.needs_state,
         null as custom_program_id,
         null as custom_program_name,
         d.load_order,
         0 as is_template
from     HA_PROG_DEF d
where    d.is_active = 1
         and exists (select 1
                     from   HA_TEST_DEF td
                     where  d.id = td.prog_id
                            and td.is_active = 1)
                            
union
                            
select      'Custom' as id,
            cp.name as title,
            'Custom Program' as description,
            0 as needs_subject,
            0 as needs_chapter,
            0 as needs_pass_percent,
            0 as needs_state,
            cp.id as custom_program_id,
            cp.name as custom_program_name,
            999 as load_order,
            is_template
from   HA_ADMIN a join HA_CUSTOM_PROGRAM cp on cp.admin_id = a.aid
where    a.aid = ? 
or is_template = 1
                            
order by load_order, id, title                      
           
           
           
.key=ACCOUNT_TYPE_LOOKUP

select s.type
from   SUBSCRIBERS s
  join  HA_ADMIN a
    on a.subscriber_id = s.id
where a.aid = ?





.key=TRENDING_DATA_SQL

## provide simple trending report based on admin_id
##

select lesson_name,count(*) as count_assigned
from   HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r on l.run_id = r.run_id
  JOIN HA_TEST t on   t.test_id = r.test_id
  JOIN HA_USER u on u.uid = t.user_id
  JOIN HA_ADMIN a on a.aid = u.admin_id
where a.aid = ?
group by lesson_name 
order by count_assigned desc
limit 5

                
.key=TRENDING_DATA_SQL_FROM_UIDS_FULL_HISTORY


select lesson_name,count(*) as count_assigned
from   HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r on l.run_id = r.run_id
  JOIN HA_TEST t on   t.test_id = r.test_id
  JOIN HA_USER u on u.uid = t.user_id
  JOIN HA_ADMIN a on a.aid = u.admin_id
where a.aid = ?
and   $$UID_LIST$$
group by lesson_name 
order by count_assigned desc
limit 5        


.key=TRENDING_DATA_SQL_FROM_UIDS_ACTIVE_ONLY

select lesson_name,count(*) as count_assigned
from   HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r on l.run_id = r.run_id
  JOIN HA_TEST t on   t.test_id = r.test_id
  JOIN CM_USER_PROGRAM p on p.id = t.user_prog_id
  JOIN HA_USER u on u.user_prog_id = p.id
  JOIN HA_ADMIN a on a.aid = u.admin_id
where a.aid = ?
and   $$UID_LIST$$
group by lesson_name 
order by count_assigned desc
limit 5        



.key=TRENDING_DATA_FOR_TEST_SEGMENTS_SQL_FROM_UIDS_FULL_HISTORY


SELECT test_segment, count(distinct u.uid) as count_users
FROM   HA_TEST_DEF d
  JOIN HA_TEST t
    ON t.test_def_id = d.test_def_id
  JOIN HA_USER u
     ON u.uid = t.user_id
   JOIN CM_USER_PROGRAM p
     ON p.id = t.user_prog_id
WHERE (p.test_def_id = ?)
and $$UID_LIST$$
group by test_segment
order by test_segment;



.key=TRENDING_DATA_FOR_TEST_SEGMENTS_SQL_FROM_UIDS_ACTIVE_ONLY


SELECT  test_segment, count(distinct u.uid) as count_users
FROM  HA_USER u
   JOIN CM_USER_PROGRAM p
     ON p.id = u.user_prog_id
     JOIN HA_TEST t
       ON t.user_prog_id = p.id
WHERE (p.test_def_id = ?)
and $$UID_LIST$$
group by test_segment
order by test_segment;




.key=TRENDING_DATA_FOR_PROGRAMS_SQL_FROM_UIDS_FULL_HISTORY

select distinct d.test_name, d.test_def_id
from    HA_TEST_DEF d
  JOIN HA_TEST t
    ON t.test_def_id = d.test_def_id
  JOIN HA_USER u 
    ON u.uid = t.user_id
where $$UID_LIST$$
and d.prog_id in ('Prof', 'Auto-Enroll','Grad Prep', 'Grad Prep Tx')
order by d.test_name


.key=TRENDING_DATA_FOR_PROGRAMS_SQL_FROM_UIDS_ACTIVE_ONLY

select   distinct d.test_name,
                  d.test_def_id
from     HA_TEST_DEF d
         join CM_USER_PROGRAM p
           on p.test_def_id = d.test_def_id
         join HA_USER u
           on u.user_prog_id = p.id
          join HA_TEST t 
            on t.user_prog_id = p.id
where $$UID_LIST$$
and d.prog_id in ('Prof', 'Auto-Enroll','Grad Prep', 'Grad Prep Tx')
order by d.test_name



.key=TRENDING_DATA_DETAIL_FOR_PROGRAM_SEGMENT_FROM_UIDS

SELECT distinct u.user_name,u.uid
FROM   HA_TEST_DEF d
  JOIN HA_TEST t
    ON t.test_def_id = d.test_def_id
  JOIN v_HA_USER_ACTIVE u
     ON u.uid = t.user_id
WHERE (d.test_def_id = ?)
and t.test_segment = ?
and $$UID_LIST$$



.key=TRENDING_DATA_DETAIL_FOR_LESSON_FROM_UIDS

select distinct  u.uid, u.user_name, count(*) as times_assigned
from  HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r
    ON r.run_id = l.run_id
   JOIN HA_TEST t
     ON t.test_id = r.test_id
   JOIN v_HA_USER_ACTIVE u
     ON u.uid = t.user_id
where $$UID_LIST$$
and     l.lesson_name = ?
group by uid
order by user_name



.key=ADMIN_EMAIL_UPDATE

update SUBSCRIBERS 
JOIN HA_ADMIN a ON id = a.subscriber_id 
set student_email = ? 
where a.aid = ?




## 
## Class: CreateAutoRegistrationAccountCommand
##
## Return group names used as self-registration auto templates
##

.key=AUTO_CREATE_TEMPLATE_CHECK

select  g.name as group_name 
from  HA_USER u JOIN CM_GROUP g on u.group_id = g.id 
where u.is_auto_create_template = 1 and u.admin_id = ? 
and   g.name = ?   


##
## Class: NONE
##

.key=VALID_TEST_RUNS

select r.run_id, u.uid
 from   HA_TEST_RUN r JOIN HA_TEST t ON t.test_id = r.test_id 
JOIN HA_USER u on u.uid = t.user_id 
JOIN  HA_ADMIN a ON a.aid = u.admin_id
JOIN SUBSCRIBERS s ON s.id = a.subscriber_id
 

 
       
       
##
##       
## Class: HaTestDao
##
## load information about a given test
## NOTE: join to CM_USER_PROGRAM to pick
##       up program info used to create test
##       (is outer for backward compatibility)

.key=HA_TEST_LOAD

select t.*,
       c.id          as prog_id,
       u.admin_id    as admin_id,
       c.create_date as prog_create_date,
       c.test_def_id as prog_test_def_id,
       c.test_config_json,
       d.test_name   as prog_test_name,
       r.run_id
from   HA_TEST t
       join HA_USER u
         on u.uid = t.user_id
       left join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       left join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
       left join HA_TEST_RUN r
         on r.test_id = t.test_id
where t.test_id = ?

.key=HA_TEST_LOAD_FOR_PROGRAMS

select t.*,
       c.id          as prog_id,
       u.admin_id    as admin_id,
       c.create_date as prog_create_date,
       c.test_def_id as prog_test_def_id,
       c.test_config_json,
       d.test_name   as prog_test_name
from   HA_TEST t
       join HA_USER u
         on u.uid = t.user_id
       join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       left join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
where t.user_prog_id in (XXX)


##
## Class: HaTestDefDao
##

.key=ALL_TEST_NAMES

SELECT test_name
FROM   HA_TEST_DEF
ORDER BY test_def_id


.key=TEST_IDS_FOR_CHAPTER_PROGRAM

SELECT s.problemindex
FROM   SOLUTIONS s
INNER  JOIN BOOK_TOC b on b.textcode = s.booktitle
WHERE  s.BOOKTITLE = ?
  AND  b.title = ?
  AND  b.level = 2
  AND  (s.chaptertitle = b.title_number AND s.SECTIONTITLE = ?)
  AND  problemnumber between ? and ?


.key=TEST_FOR_TEST_NAME

SELECT *
FROM   HA_TEST_DEF
WHERE  test_name = ? 


.key=TEST_FOR_TEST_DEF_ID

SELECT *
FROM   HA_TEST_DEF
WHERE  test_def_id = ?


.key=TEST_DEF_IDS_FOR_PROG_ID

select max(test_def_id) as test_def_id
FROM   HA_TEST_DEF
where  prog_id = ?
  and  is_active = 1
  and  subj_id is not null
group by subj_id
order by load_order


.key=TEST_IDS_FOR_PLACEMENT_SEGMENT

SELECT problemindex
FROM   SOLUTIONS
WHERE  booktitle = ?
  AND  chaptertitle = ?
  AND  sectiontitle = ?
ORDER BY problemnumber


.key=TEST_IDS_FOR_PROGRAM

SELECT problemindex
FROM   SOLUTIONS
WHERE  (SOLUTIONS.BOOKTITLE = ? and (SOLUTIONS.CHAPTERTITLE = ? AND SOLUTIONS.SECTIONTITLE = ?))
 and   problemnumber between ? and ?
 
#SELECT problemindex
#FROM   SOLUTIONS
#WHERE  booktitle = ? 
#  AND  chaptertitle = ?
#  AND  sectiontitle = ?
#  AND  problemnumber between ? and ?


.key=PROGRAM_CHAPTERS_FOR_TEST_DEF

SELECT title
FROM   BOOK_TOC t
WHERE  level = 2
  AND  textcode = ?
ORDER BY cast(title_number as unsigned) 

##
## Class: HaTestDefDescription
## 
## sql used to load program info for a given test


.key=LOAD_PROGRAM_INFO_FOR_TEST

select c.id,
       c.user_id,
       c.pass_percent,
       c.test_def_id,
       c.test_config_json,
       c.create_date,       
       d.test_name,
       u.admin_id
from   CM_USER_PROGRAM c
       join HA_TEST t
         on c.id = t.user_prog_id
       join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
       join HA_USER u
         on u.uid = t.user_id
where  t.test_id = ?



       
##
## Class: HaUser
##
## sql used to lookup a given user

.key=HA_USER_LOOKUP_USER

select s.type,
       u.uid,
       u.user_name,
       u.active_run_id,
       u.active_test_id,
       u.active_segment,
       u.active_run_session,
       u.is_show_work_required,
       u.user_passcode,
       Ifnull(u.is_demo, 0) as is_demo,
       d.test_name as assigned_test_name,
       p.test_config_json,
       gui_background_style,
       p.pass_percent,
       a.aid
from   HA_USER u
       join HA_ADMIN a
         on u.admin_id = a.aid
       join SUBSCRIBERS s
         on a.subscriber_id = s.id
       left join CM_USER_PROGRAM p
         on (p.user_id = u.uid
             and p.id = u.user_prog_id)
        left join HA_TEST_DEF d
           on d.test_def_id = p.test_def_id
             
##
## Class: HaTestRunDao
##
##

.key=TEST_RUN_LOOKUP

select t.*,
       r.*,
       s.pid,
       s.answer_status,
       s.answer_index,
       s.rid,
       r.is_passing
from   HA_TEST_RUN r
       inner join HA_TEST t
         on r.test_id = t.test_id
       left join HA_TEST_RUN_RESULTS s
         on s.run_id = r.run_id
where  r.run_id = ?


.key=TEST_RUN_LOOK_FOR_TESTS
##
##  Return run_ids for a given test
select run_id from HA_TEST_RUN where test_id = ? order by run_time


.key=TEST_RUN_LESSONS

select lesson_name, lesson_file,lesson_viewed,date_completed,pid
from   HA_TEST_RUN_LESSON_PID p
  join HA_TEST_RUN_LESSON l
    on p.lid = l.id
where l.run_id = ?
order by lesson_name, pid


.key=TEST_RUN_ASSIGNED_LESSON_COMPLETE_COUNT

select count(*) as cnt
from   HA_TEST_RUN_LESSON 
where  run_id = ?
and    date_completed is not null

.key=TEST_RUN_ASSIGNED_LESSON_STATUS

select r.total_sessions, s.sessions_completed
from HA_TEST_RUN r,
     (select count(*) as sessions_completed from HA_TEST_RUN_LESSON
      where run_id = ?
        and date_completed is not null) s
where r.run_id = ?;
 
.key=TEST_RUN_ASSIGNED_LESSONS_VIEWED_COUNT

select count(*) as cnt
from   HA_TEST_RUN_LESSON 
where  run_id = ?
and lesson_viewed <= ?

.key=TEST_RUN_LESSON_SET_DATE_COMPLETED

update HA_TEST_RUN_LESSON
SET    date_completed = now()
where  run_id = ?
  and  lesson_number = ?
  and  date_completed is null
  
.key=TEST_RUN_LESSON_SET_DATE_COMPLETED_ORIG

update HA_TEST_RUN_LESSON
SET    date_completed = now()
where  run_id = ?
  and  lesson_name = ?
  and  date_completed is null
  
.key=TEST_RUN_LESSON_SET_LESSON_VIEWED
  
update HA_TEST_RUN_LESSON
set    lesson_viewed = now()
where  run_id = ? 
  and  lesson_number = ?

.key=TEST_RUN_RESULT_INSERT

insert into HA_TEST_RUN_RESULTS
(run_id, pid, answer_status, answer_index)
values(?,?,?,?)


.key=TEST_RUN_SET_SESSION_NUMBER

update HA_TEST_RUN
set    run_session = ?
where  run_id = ?



.key=TEST_RUN_LOAD_PRESCRIPTION

select lesson_name,lesson_file,pid,config 
from HA_TEST_RUN_LESSON l JOIN HA_TEST_RUN_LESSON_PID p 
  on p.lid = l.id 
where l.run_id = ? order by lesson_number




##
## Class: CmReportCardDao
##

.key=REPORT_CARD

select u.uid, u.admin_id, td.test_name, if (0<>t.total_segments, concat(' Section ', 1), '') as initial,
   if(u.active_segment<>t.total_segments, concat(' Section ', u.active_segment), ' Completed') as status,
   up.create_date, up.pass_percent, ul.first_login, q.quiz_count, pq.passed_quiz_count,
   tr.correct, tr.incorrect,
   lpad(concat(format((tr.correct*100)/(tr.correct+tr.incorrect),0),'%'),4,' ') as avg_passing_score,
   q.run_id, pq.test_id
from HA_USER u
inner join CM_USER_PROGRAM up on up.user_id = u.uid and up.id = u.user_prog_id
inner join HA_TEST_DEF td on td.test_def_id = up.test_def_id
inner join HA_TEST t on t.test_def_id = td.test_def_id and t.user_id = u.uid
left outer join (select user_id, min(login_time) as first_login from HA_USER_LOGIN group by user_id) ul on ul.user_id = u.uid
left outer join (select count(*) as quiz_count, test_id, run_id from HA_TEST_RUN group by test_id) q on q.test_id = t.test_id
left outer join (select count(*) as passed_quiz_count, test_id, is_passing from HA_TEST_RUN group by test_id) pq on pq.test_id = t.test_id and pq.is_passing > 0
left outer join (select sum(answered_correct) as correct, sum(answered_incorrect+not_answered) as incorrect, test_id from HA_TEST_RUN where is_passing>0 group by test_id) tr on tr.test_id = t.test_id
where u.uid = ?


.key=LOGIN_COUNT

select count(*) from HA_USER_LOGIN ul where ul.user_id = ? and login_time >= ?


.key=RESOURCE_USAGE_COUNT

select item_count, s.item_type
from (
  select count(*) as item_count, iu.item_type
  from HA_TEST_RUN_INMH_USE iu,
    (select tr.run_id from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
     where p.id in (XXX)
       and t.user_prog_id = p.id
       and tr.test_id = t.test_id) tt
  where iu.run_id = tt.run_id
    and iu.item_type != 'activity_standard'
  group by item_type
  union
  select count(*) as item_count, 'game' as item_type
  from HA_TEST_RUN_INMH_USE iu,
    (select tr.run_id from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
     where p.id in (XXX)
       and t.user_prog_id = p.id
       and tr.test_id = t.test_id) tt
  where iu.run_id = tt.run_id
    and iu.item_type = 'activity_standard'
) s

.key=LESSONS_ASSIGNED

select distinct(lesson_name)
from HA_TEST_RUN_LESSON rl, HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and rl.run_id = tr.run_id
order by lesson_name asc








############################
############################
## Class: CmUserProgramDao
############################
############################

.key=ALL_USER_PROGRAM_SQL

SELECT c.id, c.user_id, c.pass_percent, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name
FROM      CM_USER_PROGRAM c
JOIN      HA_USER u             on c.user_id = u.uid
JOIN      HA_TEST_DEF t         on c.test_def_id = t.test_def_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id
WHERE c.user_id = ?

####
.key=CURRENT_USER_PROGRAM_SQL

SELECT c.id, c.user_id, c.pass_percent, c.date_completed, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name
FROM      CM_USER_PROGRAM c
JOIN      HA_USER u             on c.id = u.user_prog_id
JOIN      HA_TEST_DEF t         on c.test_def_id = t.test_def_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id 
WHERE u.uid = ?

####
.key=LOAD_USER_PROGRAM_SQL
#
#Load a named User Program record
##

SELECT c.id, c.user_id, c.pass_percent, c.date_completed, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name
FROM      CM_USER_PROGRAM c
JOIN      HA_USER u             on c.id = u.user_prog_id
JOIN      HA_TEST_DEF t         on c.test_def_id = t.test_def_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id
WHERE c.id = ?


#########
.key=USER_PROGRAM_SET_COMPLETE
#
# Set user program as complete
##

update CM_USER_PROGRAM
set    date_completed = ?
where  id = ?

 

####
.key=LOAD_USER_PROGRAM_FOR_TEST_SQL
#
#Load test's User Program record
##


SELECT c.id, c.user_id, c.pass_percent, c.date_completed, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name
FROM      CM_USER_PROGRAM c
LEFT JOIN HA_TEST ht on ht.user_prog_id = c.id
JOIN      HA_USER u             on c.id = u.user_prog_id
JOIN      HA_TEST_DEF t         on c.test_def_id = t.test_def_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id
WHERE ht.test_id = ?



.key=PROGRAM_QUIZ_COUNT

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and p.custom_program_id is null
) c


.key=PROGRAM_PASSED_QUIZ_COUNT

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
    and p.custom_program_id is null
) c

.key=PROGRAM_AGGREGATE_QUIZ_RESULTS

select sum(c.answered_correct) as answered_correct, sum(c.answered_incorrect) as answered_incorrect, sum(c.not_answered) as not_answered
from (
  select tr.answered_correct, tr.answered_incorrect, tr.not_answered
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
    and p.custom_program_id is null
) c



.key=UPDATE_PASS_PERCENT_SQL

update CM_USER_PROGRAM 
set pass_percent = ? 
where id = ?







#######################
#######################
### HaUserProgramInfoDao
#######################
#######################


.key=USER_PROGRAM_INFO_LOOKUP

select p.*
from   CM_USER_PROGRAM p
where  p.user_id = ?



###########################
###########################
#### UserProgramInfo
###########################
###########################

.key=USER_PROGRAM_INFO_ADMIN

select *
from   HA_USER
where  admin_id = ?
order by uid


.key=USER_PROGRAM_INFO_FOR_USER

select *
from CM_USER_PROGRAM p
where p.id = ?
order by create_date





##########################
##########################
#### GroupManagement
##########################
##########################

.key=GROUP_NAMES_AND_COUNTS

## return groups and their counts, including all default groups

select    g.admin_id,
          g.id,
          g.name,
          1 as is_self_reg, 
          count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = g.admin_id
 and      u.is_active = 1
 and      u.is_auto_create_template = 0
where     g.admin_id = ?
  and     g.id in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by g.id

union 

select    g.admin_id,
          g.id,
          g.name,
          0 as is_self_reg,
          Count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = g.admin_id
 and      u.is_active = 1
 and      u.is_auto_create_template = 0
where     g.admin_id = ?
  and     g.id not in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by  g.id

union 

select    g.admin_id,
          g.id,
          g.name,
          1 as is_self_reg,
          Count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = ?
 and      u.is_active = 1
 and      u.is_auto_create_template = 1
where     g.admin_id = 0
  and     g.id in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by  g.id

union 

select    g.admin_id,
          g.id,
          g.name,
          0 as is_self_reg,
          Count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = ?
 and      u.is_active = 1
 and      u.is_auto_create_template = 0
where     g.admin_id = 0
  and     g.id not in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by  g.id

union

select    0          as admin_id,
          -1         as id,
          'All Students'      as name,
          0          as is_self_reg,
          Count(uid) as student_count
from      HA_USER u
where     u.admin_id = ?
  and     u.is_active = 1
  and     u.is_auto_create_template = 0
group by  id

order by  name

########################
### HaUserFactory
########################

.key=ADMIN_LOGIN

select a.*,
       ss.date_expire,
       ss.subscriber_id,
       s.type as account_type,
       s.student_email
from   HA_ADMIN a
       inner join SUBSCRIBERS s
         on s.id = a.subscriber_id
       left outer join (select subscriber_id,
                               max(date_expire) as date_expire
                        from   SUBSCRIBERS_SERVICES
                        where  service_name = 'catchup'
                        group  by subscriber_id) ss
         on a.subscriber_id = ss.subscriber_id
where a.user_name = ? 
and replace(a.passcode,' ','') = replace(?,' ','')


.key=USER_LOGIN_SCHOOL

select u.uid,
       u.user_name,
       s.type,
       ss.date_expire,
       h.partner_key
from   HA_USER u
       inner join HA_ADMIN h
         on u.admin_id = h.aid
       inner join SUBSCRIBERS s
         on s.id = h.subscriber_id
       left outer join (select subscriber_id,
                               max(date_expire) as date_expire
                        from   SUBSCRIBERS_SERVICES
                        where  service_name = 'catchup'
                        group  by subscriber_id) ss
         on h.subscriber_id = ss.subscriber_id
where s.password = ?
and replace(u.user_passcode,' ','') = replace(?,' ','') 
and u.is_active = 1


.key=USER_LOGIN_INDIV

select u.uid,
       u.user_name,
       s.type,
       ss.date_expire,
       h.partner_key
from   HA_USER u
       inner join HA_ADMIN h
         on u.admin_id = h.aid
       inner join SUBSCRIBERS s
         on s.id = h.subscriber_id
       left outer join (select subscriber_id,
                               max(date_expire) as date_expire
                        from   SUBSCRIBERS_SERVICES
                        where  service_name = 'catchup'
                        group  by subscriber_id) ss
         on h.subscriber_id = ss.subscriber_id
where  s.student_email = ?
       and s.type = 'PS'
       and replace(u.user_passcode, ' ', '') = replace(?, ' ', '')
       and u.is_active = 1 


  
.key=USER_LOGIN_AUTOREG

select u.uid,a.partner_key
from   HA_USER u
JOIN CM_GROUP g ON u.group_id = g.id
JOIN HA_ADMIN a ON u.admin_id = a.aid
JOIN SUBSCRIBERS s ON a.subscriber_id = s.id
where s.type = 'ST'
  and s.password = ?
  and g.name = ?
  and is_auto_create_template = 1


.key=SCHOOL_ACCOUNT_SERVICES

select ss.service_name, if(date_expire < curdate(), 1, 0) is_expired
from   SUBSCRIBERS s
left outer join (
       select subscriber_id, service_name,
       max(date_expire) as date_expire
       from   SUBSCRIBERS_SERVICES
       where subscriber_id in (select id from SUBSCRIBERS where password = ?)
       group  by subscriber_id, service_name) ss
  on ss.subscriber_id = s.id
where s.password = ?


.key=INDIV_ACCOUNT_SERVICES
select ss.service_name, if(date_expire < curdate(), 1, 0) is_expired
from   SUBSCRIBERS s
left outer join (
       select subscriber_id, service_name,
       max(date_expire) as date_expire
       from   SUBSCRIBERS_SERVICES
       where subscriber_id in (select id from SUBSCRIBERS where student_email = ?)
       group  by subscriber_id, service_name) ss
  on ss.subscriber_id = s.id
where s.student_email =  ?


.key=ADMIN_ACCOUNT_EXISTS
select user_name from HA_ADMIN where user_name = ?;


# return the LWL school_id associated
# with this user's admin record

.key=LWL_STUDENT_SCHOOL_ID

select a.subscriber_id,
       t.school_id
from   HA_ADMIN a
       join HA_USER u
         on a.aid = u.admin_id
       join LWL_TUTORING t
         on t.subscriber_id = a.subscriber_id
where  u.uid = ?





## Return whiteboard data for selected pid.
## note we are checking for NOT null command data
##
.key=GET_WHITEBOARD_SQL

select * 
from HA_TEST_RUN_WHITEBOARD
where user_id = ? 
and pid = ?
and run_id = ?
and command_data is not null
order by insert_time_mills






########################
### Class CheckForCentralMessagesCommand 
########################
########################


.key=GET_USER_MESSAGES

select m.id, m.message_text, m.message_type
from  HA_MESSAGE m 
where m.id not in (
  select mid
  from   HA_USER_MESSAGE um
  where  um.uid = ?
  and    mid = m.id
)

.key=MARK_USER_MESSAGE_AS_RETRIEVED

insert into HA_USER_MESSAGE(uid,mid,date_seen)
values(?,?,now());


 

##################
### CmCustomProgramDao
#####################

## remove all custom progrma defintions, including any templates defined

.key=CUSTOM_PROGRAM_DEFINITIONS_ALL

select *
from v_HA_CUSTOM_PROGRAM_INFO
where admin_id = ? 
or (is_template = 1 and admin_id is null)



.key=CUSTOM_PROGRAM_DEFINITION_BYID

select *
from v_HA_CUSTOM_PROGRAM_INFO
where id = ?  


.key=CUSTOM_PROGRAM_DEFINITION_BYNAME

select *
from v_HA_CUSTOM_PROGRAM_INFO
where admin_id = ? and name = ?


.key=CUSTOM_PROGRAM_INFO_INUSE

select u.uid, u.user_name
from   HA_CUSTOM_PROGRAM cp
  JOIN CM_USER_PROGRAM up on up.custom_program_id = cp.id
  JOIN HA_USER u on u.uid = up.user_id
where u.admin_id = ?
and  cp.id = ?;


.key=CUSTOM_PROGRAM_INFO_ASSIGNED

select distinct u.uid, u.user_name
from HA_USER u
  JOIN CM_USER_PROGRAM up on up.id = u.user_prog_id
  JOIN HA_CUSTOM_PROGRAM cp on cp.id = up.custom_program_id
where u.admin_id = ?
and cp.id = ?


.key=CUSTOM_PROGRAM_LESSONS_FOR_TEST_ID

select cpl.*
from   HA_CUSTOM_PROGRAM_LESSON cpl, HA_TEST t, CM_USER_PROGRAM up
where  t.test_id = ?
  and  up.id = t.user_prog_id
  and  cpl.program_id = up.custom_program_id
order by cpl.lesson


#################
### CmProgramListingDao 
#######################


.key=GET_PROGRAM_LESSONS

select distinct lesson
from  HA_PROGRAM_LESSONS_static
where pid in ($$PIDLIST$$)
order by lesson;




########################
##### HIGHLIGHT INFORMATION 
########################

.key=GET_HIGHLIGHT_REPORT_GROUP_PROGRESS

select g.name as group_name,
       la.active_count,
       lc.login_count,
       lv.lessons_viewed,
       qp.quizzes_passed
from   v_HA_USER_ACTIVE u
       join CM_GROUP g
         on g.id = u.group_id
       join (
               /* 
                *  total login count
               */
               select u2.group_id,
                      count(*) as login_count
               from   HA_USER_LOGIN l
                      join HA_USER u2
                        on u2.uid = l.user_id
               where    u2.admin_id = $$AID$$
               and   l.login_time between '$$DATE_FROM$$' and '$$DATE_TO$$'     
               group  by u2.group_id
               
          ) lc on lc.group_id = u.group_id
          
         join (
               /* 
               *  count of active users in group 
               */
               select group_id, count(*) as active_count
               from   HA_USER u3
               where  exists (
                       /*
                       *  check if user has every logged in
                       */
                       select 'x'
                       from   HA_USER_LOGIN
                       where  user_id = u3.uid
                       and   login_time between '$$DATE_FROM$$' and '$$DATE_TO$$'                            
                )
                and    u3.admin_id = $$AID$$
                group by group_id
                
          ) la on la.group_id = u.group_id
          
          left join ( 
          
                  /* 
                  * get total count of lessons viewed
                  */
                select group_id, count(l.id) as lessons_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_LESSON l on l.run_id = r.run_id
              where u.admin_id = $$AID$$
              and  l.lesson_viewed between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id
              
          ) lv on lv.group_id = u.group_id
          
          
          left join (
          
              /** 
              * get number of quizzes passed for group 
              */
              select group_id, count(r.run_id) as quizzes_passed
              from HA_USER u
                  JOIN HA_TEST t on t.user_id = u.uid 
                  JOIN HA_TEST_RUN r on r.test_id = t.test_id
              where r.is_passing = 1
              and u.admin_id = $$AID$$
              and r.run_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id    
          ) qp on qp.group_id = u.group_id
          
where  u.admin_id = $$AID$$
group  by u.group_id

order by active_count desc




.key=GET_HIGHLIGHT_REPORT_GROUP_USAGE


select g.name as group_name,
       la.active_count,
       vv.videos_viewed,
       gv.games_viewed,
       av.activities_viewed,
       fc.flash_cards_viewed
       
from   v_HA_USER_ACTIVE u
       join CM_GROUP g
         on g.id = u.group_id
         join (
               /* 
               *  count of active users in group
               */
               select group_id, count(*) as active_count
               from   HA_USER u3
               where  exists (
                       /*
                       *  check if user has every logged in
                       */
                       select 'x'
                       from   HA_USER_LOGIN
                       where  user_id = u3.uid
                       and   login_time between '$$DATE_FROM$$' and '$$DATE_TO$$'                            
                )
                and    u3.admin_id = $$AID$$
                group by group_id
                
          ) la on la.group_id = u.group_id
          
          left join ( 
                  /* 
                  * get total count of videos viewed
                  */
                select group_id, count(i.use_id) as videos_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
              and  i.item_type = 'video'
              and  i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id
              
          ) vv on vv.group_id = u.group_id
          
          
          left join (
          
                  /* 
                  * get total count of games viewed
                  */
                select group_id, count(i.use_id) as games_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
              and  i.item_type = 'activity_standard'
              and  i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id 
              
          ) gv  on gv.group_id = u.group_id
          
          left join (
                  /* 
                  * get total count of activities viewed
                  */
                select group_id, count(i.use_id) as activities_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
              and  i.item_type = 'activity'
              and  i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id 
              
          ) av  on av.group_id = u.group_id
          
                              
          left join (
                  /* 
                  * get total count of flash cards viewed
                  */
                select group_id, count(i.use_id) as flash_cards_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
              and  i.item_type in ('flashcard', 'flashcard_es')
              and i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id 
              
          ) fc  on fc.group_id = u.group_id                              

where  u.admin_id = $$AID$$
group  by u.group_id

order by active_count desc 



.key=HIGHLIGHT_REPORT_GREATEST_EFFORT


select u.uid,
       u.user_name,
       count(*) as lessons_viewed
from   HA_USER u
       join HA_TEST t
         on t.user_id = u.uid
       join HA_TEST_RUN r
         on r.test_id = t.test_id
       join HA_TEST_RUN_LESSON l
         on l.run_id = r.run_id
where  u.uid in ( $$UID_LIST$$ )
       and l.lesson_viewed between ? and ?
group  by u.uid
order  by lessons_viewed desc,
          u.user_name 
          
          
          
.key=HIGHLIGHT_REPORT_LEAST_EFFORT

select u.uid,
       u.user_name,
       count(*) as lessons_viewed
from   v_HA_USER_ACTIVE u
       join HA_TEST t
         on t.user_id = u.uid
       join HA_TEST_RUN r
         on r.test_id = t.test_id
       join HA_TEST_RUN_LESSON l
         on l.run_id = r.run_id
where  u.uid in ( $$UID_LIST$$ )
       and l.lesson_viewed between ? and ?
group  by u.uid
order  by lessons_viewed,
          u.user_name 
          
          
          
       
.key=HIGHLIGHT_REPORT_MOST_GAMES_VIEWED   

select u.uid,
       u.user_name,
       qv.quizzes_taken,
       count(*) as games_viewed
from   v_HA_USER_ACTIVE u
       join (select user_id,
                    count(*) as quizzes_taken
             from   HA_TEST t
                    join HA_TEST_RUN r
                      on r.test_id = t.test_id
             where  r.run_time between ? and ?
             group  by user_id) qv
         on qv.user_id = u.uid
       join HA_TEST t
         on t.user_id = u.uid
       join HA_TEST_RUN r
         on r.test_id = t.test_id
       join HA_TEST_RUN_INMH_USE i
         on i.run_id = r.run_id
where  u.uid in ( $$UID_LIST$$ )
       and i.item_type = 'activity_standard'
       and i.view_time between ? and ?
group  by u.uid
order  by games_viewed desc,
          u.user_name           
          
          
          
          
.key=HIGHLIGHT_REPORT_QUIZZES_PASSED          
          
select u.uid,
       u.user_name,
       qv.quizzes_taken,
       count(*) as quizzes_passed
from   v_HA_USER_ACTIVE u
       join (select user_id,
                    count(*) as quizzes_taken
             from   HA_TEST t
                    join HA_TEST_RUN r
                      on r.test_id = t.test_id
             where  r.run_time between ? and ?
             group  by user_id) qv
         on qv.user_id = u.uid
       join HA_TEST t
         on t.user_id = u.uid
       join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       join HA_TEST_RUN r
         on r.test_id = t.test_id
where  u.uid in ( $$UID_LIST$$)
       and r.is_passing = 1
       and c.test_def_id not in ( 15, 36 )
       and r.run_time between ? and ?
group  by u.uid
order  by quizzes_passed desc,
          u.user_name 
          


.key=HIGHLIGHT_REPORT_AVG_QUIZ_SCORES         
          
select u.uid,
       u.user_name,
       qv.quizzes_taken,
       Floor(avg(( answered_correct / ( answered_correct + answered_incorrect +
                                        not_answered
                                            ) )
                       * 100)) as avg_quiz_score
from   v_HA_USER_ACTIVE u
       join (select user_id,
                    count(*) as quizzes_taken
             from   HA_TEST t
                    join HA_TEST_RUN r
                      on r.test_id = t.test_id
             where  r.run_time between ? and ?
             group  by user_id) qv
         on qv.user_id = u.uid
       join HA_TEST t
         on t.user_id = u.uid
       join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       join HA_TEST_RUN r
         on r.test_id = t.test_id
where  u.uid in ( $$UID_LIST$$ )
       and c.test_def_id not in ( 15, 36 )
       and r.run_time between ? and ?
group  by u.uid
order  by avg_quiz_score desc,
          u.user_name 
          
          
   
.key=HIGHLIGHT_REPORT_FAILED_CURRENT_QUIZ          

select u.uid,
       u.user_name,
       count(r.run_id) as failed_quizzes
from   v_HA_USER_ACTIVE u
       join HA_TEST t
         on t.user_id = u.uid
       join CM_USER_PROGRAM c1
         on c1.id = t.user_prog_id
       join (select user_id,
                    max(id)
             from   CM_USER_PROGRAM
             group  by user_id) c2
         on c2.user_id = u.uid
       join HA_TEST_RUN r
         on r.test_id = t.test_id
where  t.user_id in( $$UID_LIST$$ )
       and t.test_segment = u.active_segment
       and r.is_passing = 0
       and r.run_time between ? and ?
group  by u.uid
order  by failed_quizzes desc,
          user_name 
          

.key=HIGHLIGHT_REPORT_ZERO_LOGIN          
          
select u.uid,
       u.user_name
from   v_HA_USER_ACTIVE u
where  u.uid in( $$UID_LIST$$ )
       and not exists (select 'x'
                       from   HA_USER_LOGIN l
                       where  user_id = u.uid
                              and l.login_time between ? and ?)
order  by u.user_name 
          
          
          
          
#########################
### CmQuizzesDao 
#########################

.key=GET_LESSON_QUIZZES

select guid, d.test_name as program_name
from inmh_map m
   JOIN SOLUTIONS s on s.problemindex = m.guid
  JOIN HA_TEST_DEF d on d.textcode = s.booktitle
  JOIN BOOKINFO b on b.textcode = d.textcode
where m.file = ?
and b.grade_level <= ?
and d.is_active = 1
order by guid
          


.key=GET_CUSTOM_QUIZ_DEFS

select q.name as quiz_name, q.qid as quiz_id
from  HA_CUSTOM_QUIZ q
where admin_id = ?
order by name

          
.key=DELETE_CUSTOM_QUIZ_IDS

delete qi
from HA_CUSTOM_QUIZ_IDS qi JOIN HA_CUSTOM_QUIZ q on qi.qid = q.qid
where q.admin_id = ?
and   q.name = ?


.key=DELETE_CUSTOM_QUIZ

delete
from HA_CUSTOM_QUIZ
where admin_id = ?
and name = ?


.key=ADD_CUSTOM_QUIZ

insert into HA_CUSTOM_QUIZ(admin_id, name)
values(?, ?)

          
.key=ADD_CUSTOM_QUIZ_IDS

insert into HA_CUSTOM_QUIZ_IDS(qid, pid, load_order)
value(?,?,?)



.key=GET_CUSTOM_QUIZ_IDS

select q.name, qi.pid
from HA_CUSTOM_QUIZ q
  JOIN HA_CUSTOM_QUIZ_IDS qi on qi.qid = q.qid
where q.qid = ?  
order by qi.load_order;

          
         
.key=GET_CUSTOM_QUIZ_ID

select qid as custom_quiz_id
from HA_CUSTOM_QUIZ q
where admin_id = ?
and name = ?         


.key=GET_CUSTOM_PROGRAM_ITEMS


select l.*,q.name as custom_quiz_name
from HA_CUSTOM_PROGRAM_LESSON l
  LEFT JOIN HA_CUSTOM_QUIZ q on q.qid = l.custom_quiz
where program_id = ?
order by l.id






##########################
#####  CmLoginInfoDao    
##########################


.key=GET_LOGIN_INFO

select *
from HA_USER_LOGIN
where login_key = ?



.key=UPDATE_LOGIN_INFO

update HA_USER_LOGIN 
set is_consumed = 1 
where lid = ?



.key=INSERT_LOGIN_INFO

insert into HA_USER_LOGIN(user_id, login_key, user_type, login_time,login_name)
values(?,?,?,?,?)


###########################
## GetUserInfoCommand #####
###########################

###########################
.key=GET_COUNT_UNCOMPLETED_TEST_RUN_LESSONS_PROGRAM
#
# return the count of lessons not completed

select count(l.id) as lessons_to_view
from  HA_TEST_RUN r
  JOIN HA_TEST_RUN_LESSON l on l.run_id = r.run_id
where r.run_id = ?
and l.date_completed is null



 