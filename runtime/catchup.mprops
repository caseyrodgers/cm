#############
## General properties
#############

# 
#  Contains all static text entries used by Catchup Math
#

####
# the default minimum date in CM
# this date determines the earliest DateRange date that can be defined
# and used to window CM data  
####
.key=DEFAULT_MIN_DATE=2011-07-01

################
## CmStudentDao
################

.key=STUDENT_SUMMARY

SELECT h.uid, upper(h.user_name) as name, h.user_passcode as passcode, h.user_email as email, h.admin_id as admin_uid,
       h.is_show_work_required, h.is_tutoring_available, h.active_segment, h.gui_background_style, h.is_demo,h.active_test_id,
       p.test_def_id, p.create_date, concat(p.pass_percent,'%') as pass_percent, p.test_config_json,p.date_completed,
       ifnull(s.limit_games, 0) as limit_games, ifnull(s.show_work_required, 0) as show_work_required,
       ifnull(s.stop_at_program_end, 0) as stop_at_program_end, ifnull(s.tutoring_available, 0) as tutoring_available,
       ifnull(s.disable_calculator_always, 0) as disable_calculator_always, ifnull(s.disable_calculator_quizzes, 0) as disable_calculator_quizzes,
       ifnull(s.no_public_weblinks, 0) as no_public_weblinks,ifnull(s.disable_search, 0) as disable_search,
       trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
       ifnull(g.id, 0) as group_id, ifnull(g.name, 'none') as group_name, g.is_active, g.is_self_reg,
       cp.id as custom_program_id, cp.name as custom_program_name,q.qid as custom_quiz_id, q.name as custom_quiz_name,
       if (((h.active_run_id > 0) or (q.qid is not null and p.date_completed is not null)),
           lpad(concat(format(ux.last_quiz,0),'%'),4,' '),
           if((h.active_test_id > 0), 'Started', ' ') ) as last_quiz,
       date_format(ux.last_login,'%Y-%m-%d') as last_use_date, 
       ifnull(ux.quiz_pass_count, 0) as passing_count, ifnull(ux.quiz_not_pass_count, 0) as not_passing_count,
       ifnull(ux.current_lesson, 0) as current_lesson, ifnull(ux.lesson_count, 0) as lesson_count,
       ifnull(ux.lessons_completed, 0) as lessons_completed,
       ifnull(ut.tutoring_use, 0) as tutoring_use,
       h.user_prog_id, ifnull(pa.user_prog_id, h.user_prog_id) as main_user_prog_id,
      t.test_id, r.run_id,rl.cnt_lessons_completed
FROM  HA_ADMIN a 
INNER JOIN HA_USER h 
   on a.aid = h.admin_id
LEFT JOIN CM_PROGRAM_ASSIGN pa
   on pa.user_id = h.uid and pa.is_current_main_prog = 1
INNER JOIN CM_USER_PROGRAM p 
   on p.user_id = h.uid and p.id = (ifnull(pa.user_prog_id, h.user_prog_id))
LEFT JOIN HA_USER_SETTINGS s
   on s.user_id = h.uid
LEFT JOIN HA_TEST_DEF d 
   on d.test_def_id = p.test_def_id 
LEFT JOIN CM_GROUP g 
   on g.id = h.group_id
LEFT JOIN HA_CUSTOM_PROGRAM cp 
   on cp.id = p.custom_program_id
LEFT JOIN HA_CUSTOM_QUIZ q
   on q.qid = p.custom_quiz_id   
LEFT JOIN HA_USER_EXTENDED ux on ux.user_id = h.uid
LEFT JOIN (SELECT uid, count(*) as tutoring_use 
           FROM HA_USER_TUTORING_SESSION ts
           GROUP by uid) ut on ut.uid = h.uid
           
LEFT JOIN HA_TEST t
  on t.test_id = h.active_test_id        
LEFT JOIN HA_TEST_RUN r
  on r.run_id = h.active_run_id
LEFT JOIN (
    select r.run_id,count(*) as cnt_lessons_completed
     from HA_TEST_RUN_LESSON l
        JOIN HA_TEST_RUN r on r.run_id = l.run_id
        JOIN HA_TEST t on t.test_id = r.test_id
        JOIN HA_USER u on u.uid = t.user_id
     where u.admin_id = ?
     and date_completed is not null
     group by r.run_id
) rl on rl.run_id = r.run_id             


## The base query for reading student data, including
## any currently assigned program/custom program/custom quiz
##
.key=STUDENT_SUMMARY_BASE

SELECT h.uid, upper(h.user_name) as name, h.user_passcode as passcode, h.user_email as email, h.admin_id as admin_uid,
       h.user_prog_id, h.is_show_work_required, h.is_tutoring_available, h.active_segment,  h.gui_background_style, h.is_demo,h.active_test_id,
       p.test_def_id, p.create_date, p.pass_percent, p.test_config_json,p.date_completed,
       ifnull(s.limit_games, 0) as limit_games, ifnull(s.show_work_required, 0) as show_work_required,
       ifnull(s.stop_at_program_end, 0) as stop_at_program_end, ifnull(s.tutoring_available, 0) as tutoring_available,
       ifnull(s.disable_calculator_always, 0) as disable_calculator_always, ifnull(s.disable_calculator_quizzes, 0) as disable_calculator_quizzes,       
       ifnull(s.disable_search, 0) as disable_search,
       trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
       ifnull(g.id, 0) as group_id, ifnull(g.name, 'none') as group_name, g.is_active, g.is_self_reg,
       ifnull(ux.current_lesson, 0) as current_lesson, ifnull(ux.lesson_count, 0) as lesson_count,
       ifnull(ux.lessons_completed, 0) as lessons_completed,
       cp.id as custom_program_id, cp.name as custom_program_name,
       q.qid as custom_quiz_id, q.name as custom_quiz_name,
       rl.cnt_lessons_completed
FROM  HA_ADMIN a 
INNER JOIN HA_USER h 
   on a.aid = h.admin_id  
INNER JOIN CM_USER_PROGRAM p 
   on p.user_id = h.uid and p.id = h.user_prog_id
LEFT JOIN HA_USER_SETTINGS s
   on s.user_id = h.uid
LEFT JOIN HA_TEST_DEF d 
   on d.test_def_id = p.test_def_id 
LEFT JOIN CM_GROUP g 
   on g.id = h.group_id
LEFT JOIN HA_CUSTOM_PROGRAM cp 
   on cp.id = p.custom_program_id
LEFT JOIN HA_USER_EXTENDED ux 
   on ux.user_id = h.uid
LEFT JOIN HA_CUSTOM_QUIZ q
  on q.qid = p.custom_quiz_id
LEFT JOIN HA_TEST t
  on t.test_id = h.active_test_id        
LEFT JOIN HA_TEST_RUN r
  on r.run_id = h.active_run_id
LEFT JOIN (
    select r.run_id,count(*) as cnt_lessons_completed
     from HA_TEST_RUN_LESSON l
        JOIN HA_TEST_RUN r on r.run_id = l.run_id
        JOIN HA_TEST t on t.test_id = r.test_id
     where  t.user_id = ?
     and date_completed is not null
     group by r.run_id
    ) rl
  ON rl.run_id = r.run_id  

#####
.key=STUDENT_SUMMARY_BASE_FOR_DATE_RANGE

SELECT h.uid, upper(h.user_name) as name, h.user_passcode as passcode, h.user_email as email, h.admin_id as admin_uid,
       h.user_prog_id, h.is_show_work_required, h.is_tutoring_available, h.active_segment,  h.gui_background_style, h.is_demo,h.active_test_id,
       p.test_def_id, p.create_date, p.pass_percent, p.test_config_json,p.date_completed,
       ifnull(s.limit_games, 0) as limit_games, ifnull(s.show_work_required, 0) as show_work_required,
       ifnull(s.stop_at_program_end, 0) as stop_at_program_end, ifnull(s.tutoring_available, 0) as tutoring_available,
       ifnull(s.disable_calculator_always, 0) as disable_calculator_always, ifnull(s.disable_calculator_quizzes, 0) as disable_calculator_quizzes,       
       trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
       ifnull(g.id, 0) as group_id, ifnull(g.name, 'none') as group_name, g.is_active, g.is_self_reg,
       ifnull(ux.current_lesson, 0) as current_lesson, ifnull(ux.lesson_count, 0) as lesson_count,
       ifnull(ux.lessons_completed, 0) as lessons_completed,
       cp.id as custom_program_id, cp.name as custom_program_name,
       q.qid as custom_quiz_id, q.name as custom_quiz_name,
       rl.cnt_lessons_completed
FROM  HA_ADMIN a 
INNER JOIN HA_USER h 
   on a.aid = h.admin_id  
INNER JOIN CM_USER_PROGRAM p 
   on p.user_id = h.uid and p.id = h.user_prog_id
LEFT JOIN HA_USER_SETTINGS s
   on s.user_id = h.uid
LEFT JOIN HA_TEST_DEF d 
   on d.test_def_id = p.test_def_id 
LEFT JOIN CM_GROUP g 
   on g.id = h.group_id
LEFT JOIN HA_CUSTOM_PROGRAM cp 
   on cp.id = p.custom_program_id
JOIN HA_USER_EXTENDED ux
  ON ux.user_id = h.uid
 AND (ux.last_login BETWEEN ? AND ?
      OR
      h.date_created BETWEEN ? AND ?)
LEFT JOIN (SELECT uid, count(*) as tutoring_use 
           FROM HA_USER_TUTORING_SESSION ts
           GROUP BY uid) ut ON ut.uid = h.uid
LEFT JOIN HA_CUSTOM_QUIZ q
  ON q.qid = p.custom_quiz_id
LEFT JOIN HA_TEST t
  ON t.test_id = h.active_test_id
 AND t.create_time BETWEEN ? AND ?
LEFT JOIN HA_TEST_RUN r
  ON r.run_id = h.active_run_id
 AND r.run_time BETWEEN ? AND ?
LEFT JOIN (
    SELECT r.run_id,count(*) as cnt_lessons_completed
    FROM HA_TEST_RUN_LESSON l
    JOIN HA_TEST_RUN r on r.run_id = l.run_id
    JOIN HA_TEST t on t.test_id = r.test_id
    JOIN HA_USER u on u.uid = t.user_id
    WHERE u.admin_id = ?
      AND date_completed BETWEEN ? AND ?
    GROUP BY r.run_id
    ) rl
  ON rl.run_id = r.run_id             


####  
.key=STUDENT_SUMMARY_EXTENDED

SELECT h.uid, h.admin_id as admin_uid, h.user_prog_id,
       if ((h.active_run_id > 0),
           lpad(concat(format(ux.last_quiz,0),'%'),4,' '),
           if((h.active_test_id > 0), 'Started', ' ') ) as last_quiz,
       date_format(ux.last_login,'%Y-%m-%d') as last_use_date, 
       ifnull(ux.quiz_pass_count, 0) as passing_count, ifnull(ux.quiz_not_pass_count, 0) as not_passing_count,
       ifnull(ut.tutoring_use, 0) as tutoring_use
FROM  HA_USER h
LEFT JOIN HA_USER_EXTENDED ux on ux.user_id = h.uid
LEFT JOIN (SELECT uid, count(*) as tutoring_use 
           FROM HA_USER_TUTORING_SESSION ts
           GROUP by uid) ut on ut.uid = h.uid
WHERE h.uid in (XXX) 
ORDER BY h.user_name


.key=STUDENT_TEMPLATE_BASE

SELECT h.id, upper(h.name) as name, h.password as passcode, null as email, h.admin_id as admin_uid,
       h.user_prog_id, 0 as is_show_work_required, 0 as is_tutoring_available, 0 as active_segment,  null as gui_background_style, 0 as is_demo, 0 as active_test_id,
       p.test_def_id, p.create_date, p.pass_percent, p.test_config_json, p.date_completed,
       ifnull(h.limit_games, 0) as limit_games, ifnull(h.show_work_required, 0) as show_work_required,
       ifnull(h.stop_at_program_end, 0) as stop_at_program_end, 0 as tutoring_available,
       trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
       ifnull(g.id, 0) as group_id, ifnull(g.name, 'none') as group_name, g.is_active, g.is_self_reg,
       0 as current_lesson, 0 as lesson_count,
       0 as lessons_completed,
       cp.id as custom_program_id, cp.name as custom_program_name,
       q.qid as custom_quiz_id, q.name as custom_quiz_name
FROM  HA_ADMIN a 
INNER JOIN HA_USER_TEMPLATE h 
   on a.aid = h.admin_id  
INNER JOIN CM_USER_PROGRAM p 
   on p.user_id = h.id and p.id = h.user_prog_id
LEFT JOIN HA_TEST_DEF d 
   on d.test_def_id = p.test_def_id 
LEFT JOIN CM_GROUP g 
   on g.id = h.group_id
LEFT JOIN HA_CUSTOM_PROGRAM cp 
   on cp.id = p.custom_program_id
LEFT JOIN HA_CUSTOM_QUIZ q
  on q.qid = p.custom_quiz_id
where h.id = ?


.key=INSERT_STUDENT_EXTENDED

INSERT into HA_USER_EXTENDED (user_id, quiz_pass_count, quiz_not_pass_count, last_quiz, last_login)
values(?,?,?,?,(select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=INSERT_STUDENT_EXTENDED_LOGIN

INSERT into HA_USER_EXTENDED (user_id, quiz_pass_count, quiz_not_pass_count, last_quiz, last_login)
values(?,null,null,null,(select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=INSERT_STUDENT_EXTENDED_LESSON_STATUS

INSERT into HA_USER_EXTENDED (user_id, current_lesson, lesson_count, lessons_completed, last_login)
values(?,0,?,0,(select max(login_time) from HA_USER_LOGIN where user_id = ?))


.key=INSERT_STUDENT_EXTENDED_LESSON_STATUS_PLUS

INSERT into HA_USER_EXTENDED (user_id, current_lesson, lesson_count, lessons_completed, last_login)
values(?,0,(select active_run_id from HA_USER where uid = ?), 0, (select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=INSERT_STUDENT_EXTENDED_LESSON_COMPLETED

INSERT into HA_USER_EXTENDED (user_id, lesson_count, lessons_completed, last_login)
values(?,(select active_run_id from HA_USER where uid = ?), 1, (select max(login_time) from HA_USER_LOGIN where user_id = ?))

.key=STUDENT_LAST_LOGIN

SELECT h.uid, h.admin_id as admin_uid,
       date_format(l.login_time,'%Y-%m-%d') as last_use_date
FROM  HA_USER h
LEFT JOIN (select user_id, max(login_time) as login_time from HA_USER_LOGIN GROUP BY user_id) l on l.user_id = h.uid
WHERE h.uid in (XXX)


.key=STUDENT_LAST_QUIZ

SELECT h.uid, h.admin_id as admin_uid,
       if ((h.active_run_id > 0),
           lpad(concat(format((m.answered_correct*100)/(m.answered_correct+m.answered_incorrect+m.not_answered),0),'%'),4,' '),
           if ((h.active_test_id > 0), 'Started', ' ') ) as last_quiz
FROM  HA_USER h
LEFT JOIN (select user_id, max(run_id) as run_id from HA_TEST_RUN r
           JOIN HA_TEST t on r.test_id = t.test_id GROUP BY user_id) x ON x.user_id = h.uid
LEFT JOIN HA_TEST_RUN m  on m.run_id =  x.run_id
LEFT JOIN HA_TEST t  on t.user_id = h.uid and t.test_id = m.test_id
WHERE h.uid in (XXX)


.key=STUDENT_PASSING_COUNT

SELECT h.uid, h.admin_id as admin_uid,
       ifnull(q.passing_count, 0) as passing_count, ifnull(q.not_passing_count, 0) as not_passing_count
FROM  HA_USER h
LEFT JOIN v_HA_TEST_RUN_PNP_TOTALS q  on q.user_id = h.uid
WHERE h.uid in (XXX)


.key=STUDENT_TUTORING_USE

SELECT h.uid, h.admin_id as admin_uid,
       ifnull(ut.tutoring_use, 0) as tutoring_use
FROM  HA_USER h
LEFT JOIN (select uid, count(*) as tutoring_use from HA_USER_TUTORING_SESSION ts group by uid) ut on ut.uid = h.uid
WHERE h.uid in (XXX)


.key=SETTINGS_SELECT_SQL

select  *
from   HA_USER_SETTINGS
where  user_id = ? 



###
.key=STUDENT_SEARCH_EXTENDED

select s.uid from (
  SELECT h.uid, h.admin_id as admin_uid, h.active_segment, p.test_config_json, h.user_prog_id, p.test_def_id, p.create_date, p.pass_percent,
         if ((h.active_run_id > 0),
             lpad(concat(format((m.answered_correct*100)/(m.answered_correct+m.answered_incorrect+m.not_answered),0),'%'),4,' '),
             if((h.active_test_id > 0), 'Started', ' ') ) as last_quiz,
         trim(concat(ifnull(d.subj_id,''), ' ', d.prog_id)) as program, d.prog_id, d.subj_id,
         date_format(l.login_time,'%Y-%m-%d') as last_use_date,
         if ( (ifnull(q.passing_count, 0)!=0 or ifnull(q.not_passing_count, 0)!=0),
              concat(ifnull(q.passing_count, 0), ' passed out of ', (ifnull(q.not_passing_count, 0) + ifnull(q.passing_count, 0))), ' ') as quizzes,
         h.gui_background_style,
         ifnull(ut.tutoring_use, 0) as tutoring_use
  FROM  HA_USER h
  INNER JOIN CM_USER_PROGRAM p   on p.user_id = h.uid and p.id = h.user_prog_id 
  LEFT JOIN HA_TEST_DEF d   on d.test_def_id = p.test_def_id
  LEFT JOIN (select user_id, max(run_id) as run_id from HA_TEST_RUN r
             JOIN HA_TEST t on r.test_id = t.test_id GROUP BY user_id) x ON x.user_id = h.uid
  LEFT JOIN HA_TEST_RUN m  on m.run_id =  x.run_id
  LEFT JOIN (select user_id, max(login_time) as login_time from HA_USER_LOGIN GROUP BY user_id) l on l.user_id = h.uid
  LEFT JOIN v_HA_TEST_RUN_PNP_TOTALS q  on q.user_id = h.uid
  LEFT JOIN (select uid, count(*) as tutoring_use from HA_USER_TUTORING_SESSION ts group by uid) ut on ut.uid = h.uid
  WHERE h.uid in (XXX))s
where s.last_use_date  like '%YYY%'
   or s.tutoring_use   like '%YYY%'
   or lower(s.quizzes) like '%YYY%'
   or s.last_quiz      like '%YYY%'
  
###
# StudentActivityDao
###

.key=STUDENT_ACTIVITY

select load_order,is_custom_quiz, max(s.use_date) as use_date, date_format(min(s.view_time),'%h:%i %p') as start_time,
  date_format(max(s.view_time),'%h:%i %p') as stop_time, max(s.view_time) as view_time,
  max(s.run_date) as run_date,
  s.answered_correct, s.answered_incorrect, s.not_answered, s.program, s.is_archived, s.prog_id, s.subj_id, s.test_config_json,
  s.test_id as test_id, max(s.test_segment) as test_segment, s.test_def_id, s.segment_count, s.test_run_id,
  s.activity, s.is_quiz, s.is_passing, sum(is_complete) as problems_viewed, max(s.session_number) as session_number,
  s.total_sessions, s.time_on_task, ifnull(pp.name, 'Primary') as prog_type
from (

 select 1 as load_order,0 as is_custom_quiz, date_format(l.create_time,'%Y-%m-%d') as use_date, date_format(l.create_time,'%h:%i %p') as start_time,
   null as stop_time, l.create_time as view_time,
   date_format(l.create_time,'%Y-%m-%d') as run_date,
   0 as answered_correct, 0 as answered_incorrect, 0 as not_answered, 0 as is_passing,
   concat(td.subj_id, ' ', td.prog_id) as program,  0 as is_archived, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, l.test_segment, td.test_def_id as test_def_id, td.segment_count,
   0 as test_run_id,
   0 as total_sessions,
   'Quiz-' as activity, 1 as is_quiz, l.test_segment as session_number,
   0 as time_on_task,
   ifnull(pa.is_parallel_prog, 0) as is_parallel_prog, ifnull(pa.prog_inst_id, 0) as prog_inst_id,
   1 as is_complete
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and p.custom_program_id is null and p.custom_quiz_id is null
 left join CM_PROGRAM_ASSIGN pa on pa.user_prog_id = p.id
 where u.uid = ?
  and u.active_test_id = l.test_id

 UNION

 select 2 as load_order,0 as is_custom_quiz, date_format(r.run_time,'%Y-%m-%d') as use_date, date_format(l.create_time,'%h:%i %p') as start_time,
   date_format(r.run_time,'%h:%i %p') as stop_time, r.run_time as view_time,
   date_format(r.run_time,'%Y-%m-%d') as run_date,
   r.answered_correct, r.answered_incorrect, r.not_answered, r.is_passing,
   concat(td.subj_id, ' ', td.prog_id) as program, 0 as is_archived, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, l.test_segment, td.test_def_id as test_def_id, td.segment_count,
   r.run_id as test_run_id, 0 as total_sessions,
   'Quiz-' as activity, 1 as is_quiz, l.test_segment as session_number,
   hat.task_time as time_on_task,
   ifnull(pa.is_parallel_prog, 0) as is_parallel_prog, ifnull(pa.prog_inst_id, 0) as prog_inst_id,
   1 as is_complete
 from  HA_TEST l 
 join HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join HA_ACTIVITY_TIME hat on hat.type = 'QUIZ'
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and (p.custom_program_id is null && p.custom_quiz_id is null)
 left join CM_PROGRAM_ASSIGN pa on pa.user_prog_id = p.id
 where u.uid = ?

 UNION

 select 3 as load_order,0 as is_custom_quiz, date_format(iu.view_time,'%Y-%m-%d') as use_date, date_format(iu.view_time,'%h:%i %p') as start_time,
   date_format(iu.view_time,'%h:%i %p') as stop_time, iu.view_time,
   date_format(iu.run_time,'%Y-%m-%d') as run_date,
   0 as answered_correct, 0 as answered_incorrect, 0 as not_answered, 0 as is_passing,
   concat(td.subj_id, ' ', td.prog_id) as program,
   0 as is_archived, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, iu.session_number as test_segment, td.test_def_id as test_def_id, td.segment_count,
   r.run_id as test_run_id, r.total_sessions as total_sessions,
   'Review-' as activity, 0 as is_quiz, iu.session_number as session_number,
   0 as time_on_task,
   ifnull(pa.is_parallel_prog, 0) as is_parallel_prog, ifnull(pa.prog_inst_id, 0) as prog_inst_id,
   if(iu.run_time is null, 0, 1) as is_complete
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
 join (
     select l.run_id,max(l.lesson_number) as session_number, max(lesson_viewed) as view_time, max(date_completed) as run_time
     from    HA_TEST_RUN_LESSON l
         JOIN HA_TEST_RUN_LESSON_PID p on p.lid = l.id
         JOIN HA_TEST_RUN r on r.run_id = l.run_id
         JOIN HA_TEST t on t.test_id = r.test_id
     where t.user_id = ?
     and l.lesson_viewed is not null
     group by l.run_id, l.lesson_file
 ) iu on iu.run_id = r.run_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and p.custom_program_id is null
 join HA_ACTIVITY_TIME hat on hat.type = 'REVIEW'
 left join CM_PROGRAM_ASSIGN pa on pa.user_prog_id = p.id
 where u.uid = ?

 UNION

 select 4 as load_order,0 as is_custom_quiz, date_format(iu.view_time,'%Y-%m-%d') as use_date, date_format(iu.view_time,'%h:%i %p') as start_time,
   date_format(iu.view_time,'%h:%i %p') as stop_time, iu.view_time,
   date_format(iu.run_time,'%Y-%m-%d') as run_date,
   0 as answered_correct, 0 as answered_incorrect, 0 as not_answered, 0 as is_passing,
   concat('CP: ', if (cp.is_archived=0, cp.name, concat(cp.name, concat(' (', concat(date_format(cp.archive_date,'%Y-%m-%d'), ')'))))) as program,
   cp.is_archived as is_archived, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, iu.session_number as test_segment, td.test_def_id as test_def_id, td.segment_count,
   r.run_id as test_run_id, r.total_sessions as total_sessions,
   'Review' as activity, 0 as is_quiz, iu.session_number as session_number,
   0 as time_on_task,
   ifnull(pa.is_parallel_prog, 0) as is_parallel_prog, ifnull(pa.prog_inst_id, 0) as prog_inst_id,
   if(iu.run_time is null, 0, 1) as is_complete
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
 join (
     select l.run_id,max(l.lesson_number) as session_number,max(lesson_viewed) as view_time, max(date_completed) as run_time
     from    HA_TEST_RUN_LESSON l
         JOIN HA_TEST_RUN_LESSON_PID p on p.lid = l.id
         JOIN HA_TEST_RUN r on r.run_id = l.run_id
         JOIN HA_TEST t on t.test_id = r.test_id
     where t.user_id = ?
     and l.lesson_viewed is not null
     group by l.run_id, l.lesson_file
 ) iu on iu.run_id = r.run_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and p.custom_program_id is not null
 join HA_ACTIVITY_TIME hat on hat.type = 'REVIEW'
 left join HA_CUSTOM_PROGRAM cp on cp.id = p.custom_program_id and p.custom_program_id is not null
 left join CM_PROGRAM_ASSIGN pa on pa.user_prog_id = p.id
 where u.uid = ?

 UNION 

 select 5 as load_order, 1 as is_custom_quiz, date_format(r.run_time,'%Y-%m-%d') as use_date, date_format(l.create_time,'%h:%i %p') as start_time,
   date_format(r.run_time,'%h:%i %p') as stop_time,  l.create_time as view_time,
   date_format(r.run_time,'%Y-%m-%d') as run_date,
   r.answered_correct, r.answered_incorrect, r.not_answered, r.is_passing,
   if (p.custom_quiz_id is null,
       concat(td.subj_id, ' ', td.prog_id),
       concat('CQ: ', if (q.is_archived=0, q.name, concat(q.name, concat(' (', concat(date_format(q.archive_date,'%Y-%m-%d'), ')')))))) as program,
   q.is_archived as is_archived, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, iu.session_number as test_segment, td.test_def_id as test_def_id,
   (select count(*) from HA_CUSTOM_QUIZ_IDS where qid = p.custom_quiz_id) as segment_count,
   r.run_id as test_run_id, (select count(*) from HA_CUSTOM_QUIZ_IDS where qid = p.custom_quiz_id) as total_sessions,
   if (p.custom_quiz_id is null, 'Review-', 'Quiz') as activity, 1 as is_quiz, iu.session_number as session_number,
   if (p.custom_quiz_id is null, 0, hat.task_time) as time_on_task,
   ifnull(pa.is_parallel_prog, 0) as is_parallel_prog, ifnull(pa.prog_inst_id, 0) as prog_inst_id,
   if (iu.view_time is null, 0, 1) as is_complete
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_RUN r on r.test_id = l.test_id
     
 left join (
     select l.run_id,max(l.lesson_number) as session_number,max(l.date_completed) as view_time
     from    HA_TEST_RUN_LESSON l
         JOIN HA_TEST_RUN_LESSON_PID p on p.lid = l.id
         JOIN HA_TEST_RUN r on r.run_id = l.run_id
         JOIN HA_TEST t on t.test_id = r.test_id
     where t.user_id = ?
     and l.lesson_viewed is not null
     group by l.run_id, l.lesson_file
 ) iu on iu.run_id = r.run_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id
 join HA_ACTIVITY_TIME hat on hat.type = 'QUIZ'
 join HA_CUSTOM_QUIZ q on q.qid = p.custom_quiz_id
 left join CM_PROGRAM_ASSIGN pa on pa.user_prog_id = p.id
 where u.uid = ?

UNION

 select 6 as load_order, 1 as is_custom_quiz, date_format(l.create_time,'%Y-%m-%d') as use_date, date_format(l.create_time,'%h:%i %p') as start_time,
   null as stop_time, l.create_time as view_time,
   date_format(l.create_time,'%Y-%m-%d') as run_date,
   0 as answered_correct, 0 as answered_incorrect, 0 as not_answered, 0 as is_passing,
   if (p.custom_quiz_id is null,
       concat(td.subj_id, ' ', td.prog_id),
       concat('CQ: ', if (q.is_archived=0, q.name, concat(q.name, concat(' (', concat(date_format(q.archive_date,'%Y-%m-%d'), ')')))))) as program,
   q.is_archived as is_archived, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, 0 as test_segment, td.test_def_id as test_def_id,
   (select count(*) from HA_CUSTOM_QUIZ_IDS where qid = p.custom_quiz_id) as segment_count,
   r.test_id as test_run_id, (select count(*) from HA_TEST_CURRENT where test_id = l.test_id) as total_sessions,
   'Quiz' as activity, 1 as is_quiz, 0 as session_number,
   hat.task_time as time_on_task,
   ifnull(pa.is_parallel_prog, 0) as is_parallel_prog, ifnull(pa.prog_inst_id, 0) as prog_inst_id,
   1 as is_complete
 from  HA_TEST l INNER JOIN HA_USER u ON l.user_id = u.uid
 join HA_TEST_CURRENT r on r.test_id = l.test_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id
 join HA_ACTIVITY_TIME hat on hat.type = 'QUIZ'
 join HA_CUSTOM_QUIZ q on q.qid = p.custom_quiz_id
 left join CM_PROGRAM_ASSIGN pa on pa.user_prog_id = p.id
 left join HA_TEST_RUN tr on tr.test_id = l.test_id and tr.run_id is null
 where u.uid = ?


) s
left join CM_PARALLEL_PROGRAM pp on pp.prog_inst_id = s.prog_inst_id and s.is_parallel_prog = 1
where use_date is not null
group by s.test_run_id, s.is_quiz, s.use_date
order by s.view_time asc, s.test_id asc, s.test_run_id asc, load_order, s.session_number asc


######
.key=STUDENT_ACTIVITY_TIME_ON_TASK


select l.run_id,
       date_format(l.date_completed, '%Y-%m-%d') as use_date,
      'REVIEW' as activity_type, count(*) as activity_count
from HA_TEST_RUN_LESSON l
where l.run_id in ( $$RUNID_LIST$$ ) and l.date_completed is not null
group by l.run_id, date_format(l.date_completed, '%Y-%m-%d'), activity_type 

union

select  iu.run_id,
        date_format(iu.view_time, '%Y-%m-%d') as use_date,
        iu.item_type as activity_type, count(*) as activity_count
from HA_TEST_RUN_INMH_USE iu
where iu.run_id in ( $$RUNID_LIST$$ ) and upper(iu.item_type) != 'REVIEW'
group by iu.run_id, date_format(iu.view_time, '%Y-%m-%d'), activity_type

union

select tw.run_id as run_id,
       date_format(cast(from_unixtime(( cast(insert_time_mills as binary) / 1000)) as  datetime), '%Y-%m-%d') as use_date,
       'WHITEBOARD' as activity_type, 1 as activity_count
from HA_TEST_RUN_WHITEBOARD tw
  JOIN HA_TEST_RUN r on r.run_id = tw.run_id
  JOIN HA_TEST t on t.test_id = r.test_id
where  tw.user_id = t.user_id
and r.run_id in ( $$RUNID_LIST$$ )
group by run_id, date_format(cast(from_unixtime(( cast(insert_time_mills as binary) / 1000)) as  datetime), '%Y-%m-%d')

order by run_id, use_date, activity_type

#####
.key=STUDENTS_WITH_LOGIN_ACTIVITY_IN_DATE_RANGE

SELECT ux.user_id
FROM HA_USER_EXTENDED ux
WHERE ux.user_id in ( $$UID_LIST$$ )
  AND ux.last_login BETWEEN ? and ?

##
.key=STUDENTS_WITH_QUIZ_VIEW_ACTIVITY_IN_DATE_RANGE

SELECT DISTINCT t.user_id
FROM HA_TEST t
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.create_time BETWEEN ? and ?

##
.key=STUDENTS_WITH_QUIZ_TAKE_ACTIVITY_IN_DATE_RANGE

SELECT DISTINCT t.user_id
FROM HA_TEST t, HA_TEST_RUN r
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.test_id = r.test_id
  AND r.run_time BETWEEN ? and ?

##
.key=STUDENTS_WITH_RESOURCE_ACTIVITY_IN_DATE_RANGE

SELECT DISTINCT t.user_id
FROM HA_TEST t, HA_TEST_RUN r, HA_TEST_RUN_INMH_USE i
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.test_id = r.test_id
  AND r.run_id = i.run_id
  AND i.item_type != 'review'
  AND i.view_time BETWEEN ? and ?

##  
.key=STUDENTS_WITH_LESSON_ACTIVITY_IN_DATE_RANGE

SELECT DISTINCT t.user_id
FROM HA_TEST t, HA_TEST_RUN r, HA_TEST_RUN_LESSON l
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.test_id = r.test_id
  AND r.run_id = l.run_id
  AND l.lesson_viewed BETWEEN ? and ?
  
##  
.key=STUDENTS_WITH_ACTIVE_REGISTRATION_IN_DATE_RANGE
#
# can't handle students that were unregistered in date range
# because there is not a separate "unregistered" time stamp
# (updated by Casey to use between instead of less than ..
#  seemed like a bug..
#

SELECT DISTINCT u.uid as user_id
FROM HA_USER u
WHERE u.uid in ( $$UID_LIST$$ )
  AND u.is_active = 1
  AND ( u.date_created between ? and  ? )
  
  
####
.key=STUDENTS_WITH_ACTIVITY_IN_DATE_RANGE

SELECT ux.user_id
FROM HA_USER_EXTENDED ux
WHERE ux.user_id in ( $$UID_LIST$$ )
  AND ux.last_login BETWEEN ? and ?

UNION

SELECT DISTINCT t.user_id
FROM HA_TEST t
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.create_time BETWEEN ? and ?

UNION

SELECT DISTINCT t.user_id
FROM HA_TEST t, HA_TEST_RUN r
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.test_id = r.test_id
  AND r.run_time BETWEEN ? and ?
  
UNION

SELECT DISTINCT t.user_id
FROM HA_TEST t, HA_TEST_RUN r, HA_TEST_RUN_INMH_USE i
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.test_id = r.test_id
  AND r.run_id = i.run_id
  AND i.item_type != 'review'
  AND i.view_time BETWEEN ? and ?

UNION

SELECT DISTINCT t.user_id
FROM HA_TEST t, HA_TEST_RUN r, HA_TEST_RUN_LESSON l
WHERE t.user_id in ( $$UID_LIST$$ )
  AND t.test_id = r.test_id
  AND r.run_id = l.run_id
  AND l.lesson_viewed BETWEEN ? and ?

UNION

SELECT DISTINCT u.uid as user_id
FROM HA_USER u
WHERE u.uid in ( $$UID_LIST$$ )
  AND u.date_created BETWEEN ? and ?
  
#####

##################
## Reset student history (remove) from named test_id
##################
.key=RESET_STUDENT_ACTIVITY_TEST_RUN
########

delete r
from HA_TEST_RUN r
  join HA_TEST t on t.test_id = r.test_id
where t.user_id = ?
and run_id >= ?


##################
## Reset student history (remove) from named test_id
##################
.key=RESET_STUDENT_ACTIVITY_TEST
########

delete
from HA_TEST
where user_id = ?
and test_id >= ?






    
.key=TEST_RESULTS

select td.test_name, t.test_segment,im.file, rr.pid, rr.answer_status
from HA_TEST_DEF td, HA_TEST t, HA_TEST_RUN tr, HA_TEST_RUN_RESULTS rr, inmh_map im
where tr.run_id = ? 
and rr.run_id = tr.run_id 
and tr.test_id = t.test_id
and t.test_def_id = td.test_def_id and im.guid = rr.pid



.key=CHECK_DUPLICATE_PASSCODE

select 'student' as dup
from   HA_USER u
where  u.user_passcode = ?
  and  u.uid <> ?
  and  u.admin_id = ?
union
select 'auto-reg' as dup
from   CM_GROUP g
where  g.admin_id = ?
  and  g.name = ?
  and  g.id in (select group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
union
select 'parallel-program' as dup
from   CM_PARALLEL_PROGRAM p
where  p.admin_id = ?
  and  p.password = ?
union
select 'admin' as dup
from   HA_ADMIN a
where  a.aid = ?
  and  a.passcode = ?
  

.key=CHECK_DUPLICATE_NAME

select 1 from HA_USER where user_name = ? and uid <> ? and admin_id = ? and is_active = 1    



.key=UPDATE_STUDENT_SQL

update HA_USER
set    user_name = ?,
       user_passcode = ?,
       group_id = ?,
       test_def_id = (select max(test_def_id) as test_def_id
                      from   HA_TEST_DEF
                      where  prog_id = ?
                             and subj_id = ?
                             and is_active = 1),
       user_prog_id = ?,
       active_segment = ?,
       gui_background_style = ?
where  uid = ?


.key=WHITEBOARD_STUDENT_LIST

## whiteboard data returned to CM Admin for a given user
select   distinct a.pid,
                  a.run_id,
                  b.*
from     HA_TEST_RUN_WHITEBOARD a,
         (select   user_id,
                   pid,
                   Max(insert_time_mills) as insert_time_mills
          from     HA_TEST_RUN_WHITEBOARD b
          where b.user_id = ?
          group by user_id, pid) b
where    a.user_id = ?
         and b.pid = a.pid
         and b.user_id = a.user_id
		 and  a.pid <> 'quiz:quiz'
order by insert_time_mills desc




.key=ADD_STUDENT_SQL


insert into HA_USER (user_name, user_passcode, active_segment, group_id, test_def_id, admin_id, is_active, is_demo, is_self_pay, gui_background_style, user_email, date_created)
values(?, ?, ?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active = 1), ?, 1, ?, ?, ?, ?, now())




.key=INSERT_STUDENT_PROGRAM_SQL

insert CM_USER_PROGRAM (user_id, admin_id, test_def_id, pass_percent, create_date, test_config_json,custom_program_id)
values (?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active != 0), ?, ?, ?, ?)

.key=INSERT_STUDENT_PARALLEL_PROGRAM_DEF_SQL

insert CM_USER_PROGRAM (user_id, admin_id, test_def_id, pass_percent, create_date, test_config_json, custom_program_id, is_parallel_program_def)
values (?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active != 0), ?, ?, ?, ?, 1)


.key=INSERT_STUDENT_PROGRAM_NULL_PASS_PERCENT_SQL
insert CM_USER_PROGRAM (user_id, admin_id, test_def_id, create_date,test_config_json,custom_program_id)
values (?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active != 0), ?, ?, ?)


.key=INSERT_STUDENT_PARALLEL_PROGRAM_DEF_NULL_PASS_PERCENT_SQL
insert CM_USER_PROGRAM (user_id, admin_id, test_def_id, create_date,test_config_json,custom_program_id,is_parallel_program_def)
values (?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active != 0), ?, ?, ?, 1)


.key=INSERT_STUDENT_PROGRAM_CUSTOM_QUIZ

insert CM_USER_PROGRAM (user_id, admin_id, test_def_id, pass_percent, create_date, test_config_json,custom_quiz_id)
values (?, ?, (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active != 0), ?, ?, ?, ?)


.key=GET_PROGRAM_GRADE_LEVEL_BY_RUN_ID

select c.grade_level
from HA_TEST_RUN r
  JOIN HA_TEST t on t.test_id = r.test_id
  JOIN CM_USER_PROGRAM c on c.id = t.user_prog_id
where r.run_id = ?  


.key=GET_TEST_DEF_BY_PROG_SUBJECT
select max(test_def_id) as test_def_id 
from HA_TEST_DEF 
where prog_id = ? 
and subj_id = ? 
and is_active != 0



.key=VERIFY_IS_ACTIVE_PROGRAM

# verify that the test_id was created from the active
# program assigned to user.  This is to check if a 
# program has been assigned while user is currently
# using a program.


select count(*)
from HA_TEST t
  JOIN HA_USER u on u.user_prog_id = t.user_prog_id
  JOIN CM_USER_PROGRAM p  ON p.id = u.user_prog_id
where t.test_id = ?



.key=VERIFY_IS_ACTIVE_PROGRAM_FOR_STUDENT

# verify that the test_id was created from the active
# program assigned to user with uid.  This is to check if a 
# new program has been assigned while user is currently
# using a program.

select count(*)
from HA_TEST t
  JOIN HA_USER u on u.uid = ? and u.user_prog_id = t.user_prog_id
  JOIN CM_USER_PROGRAM p  ON p.id = u.user_prog_id
where t.test_id = ?



.key=STUDENT_CAN_BE_DELETED

## return a row for active students.  This 
## should include includes all self-reg template users.

select 'x' 
from HA_USER u
LEFT JOIN HA_TEST t on t.user_id = u.uid
where u.uid = $$UID$$
and (
             u.is_auto_create_template = 1
             OR
             t.test_id is not null
)             


.key=DEACTIVATE_STUDENT

update HA_USER 
set is_active = 0, user_passcode = ? 
where uid = ?
and is_auto_create_template = 0


.key=LOAD_ACTIVE_INFO

select u.active_run_id, u.active_test_id, u.active_segment, 
       u.active_segment_slot, u.active_run_session, 
       t.test_def_id, t.test_name, 
       t.segment_count as program_segment_count
from HA_USER u
LEFT JOIN CM_USER_PROGRAM p on p.id = u.user_prog_id  
LEFT JOIN HA_TEST_DEF t on t.test_def_id = p.test_def_id
where u.uid = ?


.key=SAVE_ACTIVE_INFO

update HA_USER 
set active_run_id = ?, active_test_id = ?, active_segment = ?, active_segment_slot = ?, active_run_session = ? 
where uid = ?


.key=SAVE_ACTIVE_INFO_AND_USER_PROG_ID

update HA_USER 
set active_run_id = ?, active_test_id = ?, active_segment = ?, active_segment_slot = ?,
    active_run_session = ?, user_prog_id = ?
where uid = ?


.key=SAVE_USER_PROG_ID

update HA_USER 
set user_prog_id = ? 
where uid = ?

        
#############
##
## CmAdminDao
##
#############

.key=ADD_GROUP_SQL

insert into CM_GROUP 
  (name, description, is_active, is_self_reg, is_system_self_reg, admin_id)
  values( ?, ?, ?, ?, ?, ?)


.key=SUBJECT_CHAPTERS_SQL

select bt.title_number, trim(bt.title) as title, td.textcode
from HA_TEST_DEF td, BOOK_TOC bt
where td.prog_id = ? and td.subj_id = ?
and bt.textcode = td.textcode and bt.parent <> 0
order by bt.title_number   

.key=REMOVE_AUTO_REG_SETUP_SQL

delete u
from HA_USER u
JOIN CM_GROUP g ON u.group_id = g.id
where u.admin_id = ?
  and g.name = ?
  and is_auto_create_template = 1


.key=SELECT_SUBJECTS_SQL

select sd.*
from HA_SUBJ_DEF sd, HA_TEST_DEF td
where sd.id = td.subj_id 
and td.is_active in (1, 2) 
and td.prog_id = ? 
and sd.for_school = ?
order by td.load_order


.key=SELECT_GROUPS_SQL
# select Admin specific and default (admin_id=0) Groups

SELECT     id, name, description, g.is_active, g.is_system_self_reg, ifnull(is_auto_create_template, 0) as is_auto_create_template
FROM       CM_GROUP g
LEFT JOIN  HA_USER u
       ON  u.group_id = g.id
      AND  u.is_auto_create_template = 1
      AND  u.admin_id = ?
WHERE      g.admin_id = ?
  AND      g.is_active = ?
UNION
SELECT     g.id, g.name, g.description, g.is_active, g.is_system_self_reg, 0 as is_auto_create_template
FROM       CM_GROUP g
WHERE      g.admin_id = 0
  AND      g.is_active = ?
ORDER BY   name asc


.key=SELECT_GROUP_BY_ID

SELECT     g.id, g.name, g.description, g.is_active, g.is_system_self_reg, ifnull(is_auto_create_template, 0) as is_auto_create_template
FROM       CM_GROUP g
LEFT JOIN  HA_USER u
       ON  u.group_id = g.id
      AND  u.is_auto_create_template = 1
      AND  u.admin_id = ?
WHERE      g.id = ?

.key=STUDENTS_IN_GROUP

SELECT     g.id as group_id, u.uid, u.user_name
FROM       HA_ADMIN h
JOIN       HA_USER u
  ON       u.admin_id = h.aid and u.is_active = 1 and u.is_auto_create_template = 0
JOIN       CM_GROUP g
  ON       g.id = u.group_id
WHERE      h.aid = ? and g.name = ?
ORDER BY   user_name

            
.key=COUNT_STUDENTS_IN_GROUP

SELECT count(*) as the_count
FROM   HA_USER u
WHERE u.admin_id = ?
  AND u.group_id = ?
  AND u.is_active = 1
  AND u.is_auto_create_template = 0 

.key=STUDENTS_NOT_IN_GROUP

SELECT     g.id as group_id, u.uid, u.user_name, g.name as group_name
FROM       HA_ADMIN h
JOIN       HA_USER u
  ON       u.admin_id = h.aid and u.is_active = 1 and u.is_auto_create_template = 0
LEFT JOIN  CM_GROUP g
  ON       g.id = u.group_id
WHERE      h.aid = ? and (g.name <> ? or g.name is null)
ORDER BY   user_name


.key=ACCOUNT_INFO_SQL


select s.id,
       Ifnull(s.school_type, 'NONE')                  as school_name,
       s.responsible_name,
       s.is_college,
       s.password,
       sc.date_expire                                 as catchup_expire_date,
       sc.service_name,
       st.date_expire                                 as tutoring_expire_date,
       h.user_name,
       h.create_date                                  as account_create_date,
       t.student_count,
       t2.student_count_free,
       ifnull(t3.student_count_community,0)           as student_count_community,
       Ifnull(cc.max_students, 1000)                  as max_students,
       l.login_time,
       Date_format(l.login_time, '%Y-%m-%d %h:%i %p') as login_date_time,
       h.is_free,
       ifnull(ifnull(sr.email, sr2.email), 'admin@hotmath.com') as account_rep_email
       
from   SUBSCRIBERS s
       inner join HA_ADMIN h
               on h.subscriber_id = s.id
       left join SUBSCRIBERS_SERVICES st
              on st.subscriber_id = h.subscriber_id
                 and st.service_name = 'tutoring'
       left join SUBSCRIBERS_SERVICES sc
              on sc.subscriber_id = h.subscriber_id
                 and sc.service_name = 'catchup'
       left join SUBSCRIBERS_SERVICES_CONFIG_CATCHUP cc
              on cc.subscriber_svc_id = sc.ssid
       left join (select admin_id,
                         is_active,
                         Count(*) as student_count
                  from   HA_USER
                  where  admin_id = ?
                         and is_active = 1
                         and is_auto_create_template = 0
                  group  by admin_id) t
              on t.admin_id = h.aid
       left join (select u.admin_id,
                         u.is_active,
                         Count(*) as student_count_free
                  from   HA_USER u
                         join CM_USER_PROGRAM cp
                           on cp.id = u.user_prog_id
                         join HA_TEST_DEF d
                           on d.test_def_id = cp.test_def_id
                         left join HA_CUSTOM_PROGRAM cust
                                on cust.id = cp.custom_program_id
                  where  u.admin_id = ?
                         and u.is_active = 1
                         and is_auto_create_template = 0
                         and ( d.test_name = 'Essentials'
                                or ( d.test_name = 'Custom'
                                     and cust.name = 'Essentials Topics' ) )
                  group  by admin_id) t2
              on t2.admin_id = h.aid
       left join (select u.admin_id,
                         u.is_active,
                         count(*) as student_count_community
                  from   HA_USER u
                         join CM_GROUP g
                           on g.id = u.group_id
                  where  u.admin_id = ?
                         and u.is_active = 1
                         and is_auto_create_template = 0
                         and g.name = 'Community'
                  group  by admin_id) t3
              on t3.admin_id = h.aid
       left join (select user_id,
                         Max(login_time) as login_time
                  from   HA_USER_LOGIN u
                  where  u.login_time < (select Max(login_time) as login_time
                                         from   HA_USER_LOGIN
                                         where  user_type = 'ADMIN'
                                                and user_id = ?
                                         group  by user_id)
                         and u.user_id = ?
                  group  by u.user_id) l
              on l.user_id = h.aid
       left join SALES_ZONE_REP sr
         on sr.rep_id = s.sales_zone 
       left join SALES_ZONE_REP sr2
         on sr2.rep_id = 'tina'

where  h.aid = ? 
           
           
.key=ADMIN_PROGRAM_DEFINITIONS

## NOTE: Include the system template as well.
##
select   d.id,
         d.title,
         d.description,
         d.needs_subject,
         d.needs_chapter,
         d.needs_pass_percent,
         d.needs_state,
         null as custom_program_id,
         null as custom_program_name,
         0 as custom_quiz_id,
         null as custom_quiz_name,         
         d.load_order,
         0 as segment_count,
         0 as is_template, 0 as load_order2,
         0 as is_archived, null as archive_date
from     HA_PROG_DEF d
where    d.is_active = 1
and      d.id in (select prog_id
                  from   HA_TEST_DEF
                  where  is_active = 1)
  and    d.load_order < 100
                            
UNION
                            
select   'Custom Quiz' as id,
         q.name as title,
         'Custom Quiz (no prescribed lessons)' as description,
         0 as needs_subject,
         0 as needs_chapter,
         0 as needs_pass_percent,
         0 as needs_state,
         0 as custom_program_id,
         null as custom_program_name,
         q.qid as custom_quiz_id,
         q.name as custom_quiz_name,
         999 as load_order,
         0 as segment_count,
         0 as is_template, 0 as load_order2,
         q.is_archived, Date_format(q.archive_date,'%Y-%m-%d') as archive_date
from     HA_ADMIN a join HA_CUSTOM_QUIZ q on q.admin_id = a.aid
where    a.aid = ?

UNION
                                                        
select   'Custom' as id,
         cp.name as title,
         if (is_template<1,'Custom Program (no quizzes)','Custom Program (no quizzes, built-in)') as description,
         0 as needs_subject,
         0 as needs_chapter,
         0 as needs_pass_percent,
         0 as needs_state,
         cp.id as custom_program_id,
         cp.name as custom_program_name,
         0 as custom_quiz_id,
         null as custom_quiz_name,
         999 as load_order,
         0 as segment_count,
         is_template, cp.load_order load_order2,
         cp.is_archived, Date_format(cp.archive_date,'%Y-%m-%d') as archive_date
from     HA_ADMIN a join HA_CUSTOM_PROGRAM cp on cp.admin_id = a.aid
where    a.aid = ? 
   or    is_template = 1
                            
order by load_order, is_template desc, load_order2, load_order, id, title
           
           
           
           
           
.key=ACCOUNT_TYPE_LOOKUP

select s.type
from   SUBSCRIBERS s
  join  HA_ADMIN a
    on a.subscriber_id = s.id
where a.aid = ?


.key=ADMIN_BY_AID_SQL

select *
from HA_ADMIN
where aid = ?


.key=ADMIN_BY_SUBSCRIBER_ID_SQL

select *
from HA_ADMIN
where subscriber_id = ?


.key=TRENDING_DATA_SQL

## provide simple trending report based on admin_id
##

select lesson_name,count(*) as count_assigned
from   HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r on l.run_id = r.run_id
  JOIN HA_TEST t on   t.test_id = r.test_id
  JOIN HA_USER u on u.uid = t.user_id
  JOIN HA_ADMIN a on a.aid = u.admin_id
where a.aid = ?
group by lesson_name 
order by count_assigned desc
limit 5

                
.key=TRENDING_DATA_SQL_FROM_UIDS_FULL_HISTORY


select lesson_name,count(*) as count_assigned
from   HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r on l.run_id = r.run_id
  JOIN HA_TEST t on   t.test_id = r.test_id
  JOIN HA_USER u on u.uid = t.user_id
  JOIN HA_ADMIN a on a.aid = u.admin_id
where a.aid = ?
and   $$UID_LIST$$
group by lesson_name 
order by count_assigned desc
limit 5        


# trending data for student's active program
#
.key=TRENDING_DATA_SQL_FROM_UIDS_ACTIVE_ONLY

select lesson_name,count(*) as count_assigned
from   HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r on l.run_id = r.run_id
  JOIN HA_TEST t on   t.test_id = r.test_id
  JOIN CM_USER_PROGRAM p on p.id = t.user_prog_id
  JOIN HA_USER u on u.user_prog_id = p.id
  JOIN HA_ADMIN a on a.aid = u.admin_id
where a.aid = ?
and   $$UID_LIST$$
group by lesson_name 
order by count_assigned desc
limit 5        



.key=TRENDING_DATA_FOR_TEST_SEGMENTS_SQL_FROM_UIDS_FULL_HISTORY


SELECT test_segment, count(distinct u.uid) as count_users
FROM   HA_TEST_DEF d
  JOIN HA_TEST t
    ON t.test_def_id = d.test_def_id
  JOIN HA_USER u
     ON u.uid = t.user_id
   JOIN CM_USER_PROGRAM p
     ON p.id = t.user_prog_id
WHERE (p.test_def_id = ?)
and $$UID_LIST$$
group by test_segment
order by test_segment;


.key=TRENDING_DATA_FOR_TEST_SEGMENTS_SQL_FROM_UIDS_ACTIVE_ONLY


SELECT  test_segment, count(distinct u.uid) as count_users
FROM  HA_USER u
   JOIN CM_USER_PROGRAM p
     ON p.id = u.user_prog_id
     JOIN HA_TEST t
       ON t.user_prog_id = p.id
WHERE (p.test_def_id = ?)
and $$UID_LIST$$
group by test_segment
order by test_segment;




.key=TRENDING_DATA_FOR_PROGRAMS_SQL_FROM_UIDS_FULL_HISTORY

select distinct d.test_name, d.test_def_id
from    HA_TEST_DEF d
  JOIN HA_TEST t
    ON t.test_def_id = d.test_def_id
  JOIN HA_USER u 
    ON u.uid = t.user_id
where $$UID_LIST$$
and d.prog_id in ('Prof', 'Auto-Enroll','Grad Prep', 'Grad Prep Tx')
order by d.test_name


.key=TRENDING_DATA_FOR_PROGRAMS_SQL_FROM_UIDS_ACTIVE_ONLY

select   distinct d.test_name,
                  d.test_def_id
from     HA_TEST_DEF d
         join CM_USER_PROGRAM p
           on p.test_def_id = d.test_def_id
         join HA_USER u
           on u.user_prog_id = p.id
          join HA_TEST t 
            on t.user_prog_id = p.id
where $$UID_LIST$$
and d.prog_id in ('Prof', 'Auto-Enroll','Grad Prep', 'Grad Prep Tx')
order by d.test_name



.key=TRENDING_DATA_DETAIL_FOR_PROGRAM_SEGMENT_FROM_UIDS

SELECT distinct u.user_name,u.uid
FROM   HA_TEST_DEF d
  JOIN HA_TEST t
    ON t.test_def_id = d.test_def_id
  JOIN HA_USER u
     ON u.uid = t.user_id
WHERE (d.test_def_id = ?)
and t.test_segment = ?
and $$UID_LIST$$



.key=TRENDING_DATA_DETAIL_FOR_LESSON_FROM_UIDS

select distinct  u.uid, u.user_name, count(*) as times_assigned
from  HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r
    ON r.run_id = l.run_id
   JOIN HA_TEST t
     ON t.test_id = r.test_id
   JOIN HA_USER u
     ON u.uid = t.user_id
where $$UID_LIST$$
and     l.lesson_name = ?
group by uid
order by user_name


# trending data detail for student's active program
#
.key=TRENDING_DATA_DETAIL_FOR_LESSON_FROM_UIDS_ACTIVE_ONLY

select distinct  u.uid, u.user_name, count(*) as times_assigned
from  HA_TEST_RUN_LESSON l
  JOIN HA_TEST_RUN r
    ON r.run_id = l.run_id
   JOIN HA_TEST t
     ON t.test_id = r.test_id
   JOIN CM_USER_PROGRAM p
     ON p.id = t.user_prog_id
  JOIN HA_USER u
     ON u.user_prog_id = p.id
    AND u.uid = t.user_id
where $$UID_LIST$$
and     l.lesson_name = ?
group by uid
order by user_name



.key=ADMIN_EMAIL_UPDATE

update SUBSCRIBERS 
JOIN HA_ADMIN a ON id = a.subscriber_id 
set student_email = ? 
where a.aid = ?




## 
## Class: CreateAutoRegistrationAccountCommand
##
## Return group names used as self-registration auto templates
## and individual user (student) passwords
##

.key=AUTO_CREATE_PASSWORD_CHECK

select  g.name as password 
from  HA_USER u JOIN CM_GROUP g on u.group_id = g.id 
where u.is_auto_create_template = 1
  and u.admin_id = ? 
  and g.name like ?
UNION
select u.user_passcode as password
from HA_USER u
where u.admin_id = ?
  and u.user_passcode like ?

.key=AUTO_CREATE_TEMPLATE_CHECK

select  g.name as group_name 
from  HA_USER u JOIN CM_GROUP g on u.group_id = g.id 
where u.is_auto_create_template = 1 and u.admin_id = ? 
and   g.name = ?  

##
## Class: NONE
##

.key=VALID_TEST_RUNS

select r.run_id, u.uid
 from   HA_TEST_RUN r JOIN HA_TEST t ON t.test_id = r.test_id 
JOIN HA_USER u on u.uid = t.user_id 
JOIN  HA_ADMIN a ON a.aid = u.admin_id
JOIN SUBSCRIBERS s ON s.id = a.subscriber_id
 

 
       
       
##
##       
## Class: HaTestDao
##
## load information about a given test
## NOTE: join to CM_USER_PROGRAM to pick
##       up program info used to create test
##       (is outer for backward compatibility)

.key=HA_TEST_LOAD

select t.*,
       c.id          as prog_id,
       u.admin_id    as admin_id,
       c.create_date as prog_create_date,
       c.test_def_id as prog_test_def_id,
       c.test_config_json,
       d.test_name   as prog_test_name,
       r.run_id
from   HA_TEST t
       join HA_USER u
         on u.uid = t.user_id
       left join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       left join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
       left join HA_TEST_RUN r
         on r.test_id = t.test_id
where t.test_id = ?

.key=HA_TEST_LOAD_FOR_PROGRAMS

select t.*,
       c.id          as prog_id,
       u.admin_id    as admin_id,
       c.create_date as prog_create_date,
       c.test_def_id as prog_test_def_id,
       c.test_config_json,
       d.test_name   as prog_test_name
from   HA_TEST t
       join HA_USER u
         on u.uid = t.user_id
       join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       left join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
where t.user_prog_id in (XXX)


##
## Class: HaTestDefDao
##

.key=ALL_TEST_NAMES

SELECT test_name
FROM   HA_TEST_DEF
ORDER BY test_def_id


.key=TEST_FOR_TEST_NAME

SELECT td.*, s.name as subject_name
FROM   HA_TEST_DEF td
  LEFT JOIN SUBJECT s
  ON   s.subj_id = td.subj_id
WHERE  test_name = ?
and is_active = 1 


.key=TEST_FOR_TEST_DEF_ID

SELECT td.*, s.name as subject_name
FROM   HA_TEST_DEF td
LEFT JOIN   SUBJECT s
  ON   s.subj_id = td.subj_id
WHERE  test_def_id = ?


.key=TEST_DEF_IDS_FOR_PROG_ID

select max(test_def_id) as test_def_id
FROM   HA_TEST_DEF
where  prog_id = ?
  and  is_active = 1
  and  subj_id is not null
group by subj_id
order by load_order


.key=TEST_IDS_FOR_PLACEMENT_SEGMENT

SELECT s.problemindex
FROM   SOLUTIONS s
WHERE  s.booktitle = ?
  AND  s.chaptertitle = ?
  AND  s.sectiontitle = ?
  AND s.active = 1
ORDER BY cast(s.problemnumber as unsigned)



.key=TEST_IDS_FOR_PROGRAM
## NOTE: we do the replace to deal with a
## bug in solution editor that removes spaces
## when saving section,chapter...

SELECT problemindex
FROM   SOLUTIONS
WHERE  (SOLUTIONS.BOOKTITLE = ? and 
     (
       replace(SOLUTIONS.CHAPTERTITLE,' ','') = replace(?,' ','') AND SOLUTIONS.SECTIONTITLE = ?))
  AND  problemnumber between ? and ?
  AND  active = 1
ORDER BY cast(problemnumber as unsigned)  
 
#SELECT problemindex
#FROM   SOLUTIONS
#WHERE  booktitle = ? 
#  AND  chaptertitle = ?
#  AND  sectiontitle = ?
#  AND  problemnumber between ? and ?


.key=TEST_IDS_FOR_CHAPTER_PROGRAM

SELECT s.problemindex
FROM   SOLUTIONS s
INNER  JOIN BOOK_TOC b on b.textcode = s.booktitle
WHERE  s.BOOKTITLE = ?
  AND  b.title = ?
  AND  b.level = 2
  AND  (s.chaptertitle = b.title_number AND s.SECTIONTITLE = ?)
  AND  s.problemnumber between ? and ?
  AND  s.active = 1
ORDER BY cast(s.problemnumber as unsigned)

.key=PROGRAM_CHAPTERS_FOR_TEST_DEF

SELECT title
FROM   BOOK_TOC t
WHERE  level = 2
  AND  textcode = ?
ORDER BY cast(title_number as unsigned)


.key=TEST_DEF_IDS_FOR_PROGRAM
SELECT td.test_def_id
FROM   HA_TEST_DEF td
WHERE  td.prog_id = ?
  AND  td.is_active > 0
ORDER BY td.load_order

.key=CREATE_NEW_TEST

insert into HA_TEST(user_id,user_prog_id,test_def_id,create_time,test_segment,test_segment_slot, total_segments,test_question_count,grade_level)
values(?,?,?,?,?,?,?,?,?)
 

##
## Class: HaTestDefDescription
## 
## sql used to load program info for a given test


.key=LOAD_PROGRAM_INFO_FOR_TEST

select c.id,
       c.user_id,
       c.pass_percent,
       c.test_def_id,
       c.test_config_json,
       c.create_date,       
       d.test_name,
       u.admin_id
from   CM_USER_PROGRAM c
       join HA_TEST t
         on c.id = t.user_prog_id
       join HA_TEST_DEF d
         on d.test_def_id = c.test_def_id
       join HA_USER u
         on u.uid = t.user_id
where  t.test_id = ?



       
##
## Class: HaUser
##
## sql used to lookup a given user

.key=HA_USER_LOOKUP_USER

select s.type,
       u.uid,
       u.user_name,
       u.active_run_id,
       u.active_test_id,
       u.active_segment,
       u.active_run_session,
       u.is_show_work_required,
       u.user_passcode,
       Ifnull(u.is_demo, 0) as is_demo,
       d.test_name as assigned_test_name,
       p.test_config_json,
       gui_background_style,
       p.pass_percent,
       a.aid,
       u.group_id
from   HA_USER u
       join HA_ADMIN a
         on u.admin_id = a.aid
       join SUBSCRIBERS s
         on a.subscriber_id = s.id
       left join CM_USER_PROGRAM p
         on (p.user_id = u.uid
             and p.id = u.user_prog_id)
        left join HA_TEST_DEF d
           on d.test_def_id = p.test_def_id
$$WHERE_CLAUSE$$           
             
##
## Class: HaTestRunDao
##
##

.key=TEST_RUN_LOOKUP

select t.*,
       r.*,
       s.pid,
       s.answer_status,
       s.answer_index,
       s.rid,
       r.is_passing
from   HA_TEST_RUN r
       inner join HA_TEST t
         on r.test_id = t.test_id
       left join HA_TEST_RUN_RESULTS s
         on s.run_id = r.run_id
       left join HA_TEST_IDS ids
          on (ids.test_id = t.test_id and ids.pid = s.pid)
where  r.run_id = ?
order by ids.tid


.key=TEST_RUN_LOOK_FOR_TESTS
##
##  Return run_ids for a given test
select run_id from HA_TEST_RUN where test_id = ? order by run_time


.key=TEST_RUN_LESSONS

select lesson_name, lesson_file,lesson_viewed,date_completed,pid
from   HA_TEST_RUN_LESSON_PID p
  join HA_TEST_RUN_LESSON l
    on p.lid = l.id
where l.run_id = ?
order by lesson_name, pid


.key=TEST_RUN_ASSIGNED_LESSON_COMPLETE_COUNT

select count(*) as cnt
from   HA_TEST_RUN_LESSON 
where  run_id = ?
and    date_completed is not null

.key=TEST_RUN_ASSIGNED_LESSON_STATUS

select r.total_sessions, s.sessions_completed
from HA_TEST_RUN r,
     (select count(*) as sessions_completed from HA_TEST_RUN_LESSON
      where run_id = ?
        and date_completed is not null) s
where r.run_id = ?;
 
.key=TEST_RUN_ASSIGNED_LESSONS_VIEWED_COUNT

select count(*) as cnt
from   HA_TEST_RUN_LESSON 
where  run_id = ?
and lesson_viewed <= ?

.key=TEST_RUN_LESSON_SET_DATE_COMPLETED

update HA_TEST_RUN_LESSON
SET    date_completed = now()
where  run_id = ?
  and  lesson_number = ?
  and  date_completed is null
  
.key=TEST_RUN_LESSON_SET_DATE_COMPLETED_ORIG

update HA_TEST_RUN_LESSON
SET    date_completed = now()
where  run_id = ?
  and  lesson_name = ?
  and  date_completed is null
  
.key=TEST_RUN_LESSON_SET_LESSON_VIEWED
  
update HA_TEST_RUN_LESSON
set    lesson_viewed = now()
where  run_id = ? 
  and  lesson_number = ?

.key=TEST_RUN_RESULT_INSERT

insert into HA_TEST_RUN_RESULTS
(run_id, pid, answer_status, answer_index)
values(?,?,?,?)


.key=TEST_RUN_SET_SESSION_NUMBER

update HA_TEST_RUN
set    run_session = ?
where  run_id = ?



.key=TEST_RUN_LOAD_PRESCRIPTION

select lesson_name,lesson_file,pid,config 
from HA_TEST_RUN_LESSON l JOIN HA_TEST_RUN_LESSON_PID p 
  on p.lid = l.id 
where l.run_id = ? order by lesson_number


##
.key=TEST_RUN_LESSON_STATUS

SELECT x.run_id, x.id, x.lesson_name, x.date_completed, x.item_count,
if(x.date_completed is null,y.use_count, x.item_count) use_count
FROM
  (SELECT l.run_id, l.id, l.lesson_name, l.date_completed, count(p.id) as item_count
   FROM HA_TEST_RUN_LESSON l
   JOIN HA_TEST_RUN_LESSON_PID p ON p.lid = l.id
   WHERE l.run_id = ?
   GROUP BY l.id) x,

  (SELECT l.run_id, l.id, l.lesson_name, l.date_completed, count(u.use_id) as use_count
   FROM HA_TEST_RUN_LESSON l
   JOIN HA_TEST_RUN_LESSON_PID p ON p.lid = l.id
   LEFT OUTER JOIN HA_TEST_RUN_INMH_USE u ON u.run_id = l.run_id AND u.item_file = p.pid
   WHERE l.run_id = ?
   GROUP BY l.id) y

WHERE x.id = y.id

##
## Class: CmReportCardDao
##

.key=REPORT_CARD

select u.uid, u.admin_id, td.test_name, if (0<>t.total_segments, concat(' Section ', 1), '') as initial,
   if(u.active_segment<>t.total_segments, concat(' Section ', u.active_segment), ' Completed') as status,
   up.create_date, up.pass_percent, ul.first_login, q.quiz_count, pq.passed_quiz_count,
   tr.correct, tr.incorrect,
   lpad(concat(format((tr.correct*100)/(tr.correct+tr.incorrect),0),'%'),4,' ') as avg_passing_score,
   q.run_id, pq.test_id
from HA_USER u
inner join CM_USER_PROGRAM up on up.user_id = u.uid and up.id = u.user_prog_id
inner join HA_TEST_DEF td on td.test_def_id = up.test_def_id
inner join HA_TEST t on t.test_def_id = td.test_def_id and t.user_id = u.uid
left outer join (select user_id, min(login_time) as first_login from HA_USER_LOGIN group by user_id) ul on ul.user_id = u.uid
left outer join (select count(*) as quiz_count, test_id, run_id from HA_TEST_RUN group by test_id) q on q.test_id = t.test_id
left outer join (select count(*) as passed_quiz_count, test_id, is_passing from HA_TEST_RUN group by test_id) pq on pq.test_id = t.test_id and pq.is_passing > 0
left outer join (select sum(answered_correct) as correct, sum(answered_incorrect+not_answered) as incorrect, test_id from HA_TEST_RUN where is_passing>0 group by test_id) tr on tr.test_id = t.test_id
where u.uid = ?


.key=LOGIN_COUNT

## only the count of distinct days this user logged in
##
select count(*)
from (
    select date(login_time), count(*)
    from HA_USER_LOGIN ul 
    where ul.user_id = ?
    and login_time >= ?
    and login_time <= ?
    and is_real_login = 1
    group by date(login_time)
) t


.key=RESOURCE_USAGE_COUNT

select item_count, s.item_type
from (
  select count(*) as item_count, 'review' as item_type
  from HA_TEST_RUN_LESSON iu,
    (select tr.run_id from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
     where p.id in (XXX)
       and t.user_prog_id = p.id
       and tr.test_id = t.test_id) tt
  where iu.run_id = tt.run_id
    and iu.date_completed is not null
    and iu.date_completed >= ?
    and iu.date_completed <= ?
  union
  select count(*) as item_count, iu.item_type
  from HA_TEST_RUN_INMH_USE iu,
    (select tr.run_id from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
     where p.id in (XXX)
       and t.user_prog_id = p.id
       and tr.test_id = t.test_id) tt
  where iu.run_id = tt.run_id
    and iu.item_type != 'activity_standard'
    and iu.item_type != 'review'
    and iu.view_time >= ?
    and iu.view_time <= ?
  group by item_type
  union
  select count(*) as item_count, 'game' as item_type
  from HA_TEST_RUN_INMH_USE iu,
    (select tr.run_id from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
     where p.id in (XXX)
       and t.user_prog_id = p.id
       and tr.test_id = t.test_id) tt
  where iu.run_id = tt.run_id
    and iu.item_type = 'activity_standard'
    and iu.view_time >= ?
    and iu.view_time <= ?
) s


####
.key=LESSONS_ASSIGNED

select distinct(lesson_name)
from HA_TEST_RUN_LESSON rl, HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and rl.run_id = tr.run_id
order by lesson_name asc


####
.key=LESSONS_COMPLETED

select distinct(lesson_name)
from HA_TEST_RUN_LESSON rl, HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and rl.run_id = tr.run_id
    and rl.date_completed is not null
order by lesson_name asc


####
.key=LESSONS_COMPLETED_IN_DATE_RANGE

select distinct(lesson_name)
from HA_TEST_RUN_LESSON rl, HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and rl.run_id = tr.run_id
    and rl.date_completed is not null
    and rl.date_completed >= ?
    and rl.date_completed <= ?
order by lesson_name asc



############################
############################
## Class: CmUserProgramDao
############################
############################

.key=ALL_USER_PROGRAM_SQL

SELECT c.id, c.user_id, c.pass_percent, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name,c.date_completed, q.qid as custom_quiz_id, q.name as custom_quiz_name
FROM      CM_USER_PROGRAM c
JOIN      HA_USER u             on c.user_id = u.uid
JOIN      HA_TEST_DEF t         on c.test_def_id = t.test_def_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id
LEFT JOIN HA_CUSTOM_QUIZ q on q.qid = c.custom_quiz_id
WHERE c.user_id = ?

####
.key=CURRENT_USER_PROGRAM_SQL

SELECT c.id, c.user_id, c.pass_percent, c.date_completed, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name, q.qid as custom_quiz_id, q.name as custom_quiz_name

FROM      CM_USER_PROGRAM c
JOIN      HA_USER u             on c.id = u.user_prog_id
JOIN      HA_TEST_DEF t         on c.test_def_id = t.test_def_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id
LEFT JOIN HA_CUSTOM_QUIZ q on q.qid = c.custom_quiz_id
WHERE u.uid = ?

####
.key=LOAD_USER_PROGRAM_SQL
#
#Load a named User Program record
##

SELECT c.id, c.user_id, c.pass_percent, c.date_completed, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name, q.qid as custom_quiz_id, q.name as custom_quiz_name
FROM      CM_USER_PROGRAM c
JOIN      HA_USER u             on c.user_id = u.uid
JOIN      HA_TEST_DEF t         on c.test_def_id = t.test_def_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id
LEFT JOIN HA_CUSTOM_QUIZ q on q.qid = c.custom_quiz_id
WHERE c.id = ?


#########
.key=USER_PROGRAM_SET_COMPLETE
#
# Set user program as complete
##

update CM_USER_PROGRAM
set    date_completed = ?
where  id = ?

 

####
.key=LOAD_USER_PROGRAM_FOR_TEST_SQL
#
#Load test's User Program record
##


SELECT c.id, c.user_id, c.pass_percent, c.date_completed, u.admin_id, c.test_def_id, t.test_name, c.test_config_json, c.create_date,
       cp.id as custom_program_id, cp.name as custom_program_name, q.qid as custom_quiz_id, q.name as custom_quiz_name
FROM      CM_USER_PROGRAM c
LEFT JOIN HA_TEST ht on ht.user_prog_id = c.id
JOIN      HA_TEST_DEF t on c.test_def_id = t.test_def_id
LEFT JOIN HA_USER u  on c.id = u.user_prog_id
LEFT JOIN HA_CUSTOM_PROGRAM cp  on c.custom_program_id = cp.id
LEFT JOIN HA_CUSTOM_QUIZ q on q.qid = c.custom_quiz_id
WHERE ht.test_id = ?


####
.key=PROGRAM_QUIZ_COUNT

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p, HA_TEST_DEF td
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and p.custom_program_id is null
    and td.test_def_id = t.test_def_id
    and td.test_def_id not in (15,57)
) c


####
.key=PROGRAM_QUIZ_COUNT_IN_DATE_RANGE

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p, HA_TEST_DEF td
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.run_time >= ?
    and tr.run_time <= ?
    and p.custom_program_id is null
    and td.test_def_id = t.test_def_id
    and td.test_def_id not in (15,57)
) c


####
.key=PROGRAM_PASSED_QUIZ_COUNT

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p, HA_TEST_DEF td
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
    and p.custom_program_id is null
    and td.test_def_id = t.test_def_id
    and td.test_def_id not in (15,57)
) c

####
.key=PROGRAM_PASSED_QUIZ_COUNT_IN_DATE_RANGE

select count(*)
from (
  select tr.run_id
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p, HA_TEST_DEF td
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
    and tr.run_time >= ?
    and tr.run_time <= ?
    and p.custom_program_id is null
    and td.test_def_id = t.test_def_id
    and td.test_def_id not in (15,57)
) c

####
.key=PROGRAM_AGGREGATE_QUIZ_RESULTS

select sum(c.answered_correct) as answered_correct, sum(c.answered_incorrect) as answered_incorrect, sum(c.not_answered) as not_answered
from (
  select tr.answered_correct, tr.answered_incorrect, tr.not_answered
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p, HA_TEST_DEF td
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
    and p.custom_program_id is null
    and td.test_def_id = t.test_def_id
    and td.test_def_id not in (15,57)
) c


####
.key=PROGRAM_AGGREGATE_QUIZ_RESULTS_IN_DATE_RANGE

select sum(c.answered_correct) as answered_correct, sum(c.answered_incorrect) as answered_incorrect, sum(c.not_answered) as not_answered
from (
  select tr.answered_correct, tr.answered_incorrect, tr.not_answered
  from HA_TEST_RUN tr, HA_TEST t, CM_USER_PROGRAM p, HA_TEST_DEF td
  where p.id in (XXX)
    and t.user_prog_id = p.id
    and tr.test_id = t.test_id
    and tr.is_passing > 0
    and tr.run_time >= ?
    and tr.run_time <= ?
    and p.custom_program_id is null
    and td.test_def_id = t.test_def_id
    and td.test_def_id not in (15,57)
) c

####
.key=GET_PROG_IDS_FOR_RUN_IDS

SELECT  DISTINCT t.user_prog_id
FROM    HA_TEST_RUN tr, HA_TEST t
WHERE   tr.run_id IN (XXX)
  AND   t.test_id = tr.test_id

####
.key=UPDATE_PASS_PERCENT_SQL

update CM_USER_PROGRAM 
set pass_percent = ? 
where id = ?




.key=GET_CUSTOM_PROGRAM_GRADE_LEVEL

select grade_level
from   HA_CUSTOM_PROGRAM
where  id = ? 



#######################
#######################
### HaUserProgramInfoDao
#######################
#######################


.key=USER_PROGRAM_INFO_LOOKUP

select p.*
from   CM_USER_PROGRAM p
where  p.user_id = ?



###########################
###########################
#### UserProgramInfo
###########################
###########################

.key=USER_PROGRAM_INFO_ADMIN

select *
from   HA_USER
where  admin_id = ?
order by uid


.key=USER_PROGRAM_INFO_FOR_USER

select *
from CM_USER_PROGRAM p
where p.id = ?
order by create_date





##########################
##########################
#### GroupManagement
##########################
##########################

.key=GROUP_NAMES_AND_COUNTS

## return groups and their counts, including all default groups

select    g.admin_id,
          g.id,
          g.name,
          g.is_system_self_reg,
          1 as is_self_reg, 
          count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = g.admin_id
 and      u.is_active = 1
 and      u.is_auto_create_template = 0
where     g.admin_id = ?
  and     g.id in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by g.id

union 

select    g.admin_id,
          g.id,
          g.name,
          0 as is_self_reg,
          g.is_system_self_reg,
          Count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = g.admin_id
 and      u.is_active = 1
 and      u.is_auto_create_template = 0
where     g.admin_id = ?
  and     g.id not in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by  g.id

union 

select    g.admin_id,
          g.id,
          g.name,
          1 as is_self_reg,
          1 as is_system_self_reg,
          Count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = ?
 and      u.is_active = 1
 and      u.is_auto_create_template = 1
where     g.admin_id = 0
  and     g.id in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by  g.id

union 

select    g.admin_id,
          g.id,
          g.name,
          0 as is_self_reg,
          0 as is_system_self_reg,
          Count(u.uid) as student_count
from      CM_GROUP g
left join HA_USER u
  on      u.group_id = g.id
 and      u.admin_id = ?
 and      u.is_active = 1
 and      u.is_auto_create_template = 0
where     g.admin_id = 0
  and     g.id not in (select distinct group_id from HA_USER where admin_id = ? and is_auto_create_template = 1)
group by  g.id

union

select    0          as admin_id,
          -1         as id,
          'All Students'      as name,
          0          as is_self_reg,
          0          as is_system_self_reg,
          Count(uid) as student_count
from      HA_USER u
where     u.admin_id = ?
  and     u.is_active = 1
  and     u.is_auto_create_template = 0
group by  id

order by  name

########################
### HaUserFactory
########################

.key=ADMIN_LOGIN

select a.*,
       s.id as subscriber_id,
       s.type as account_type,
       s.student_email
from   HA_ADMIN a
       inner join SUBSCRIBERS s
         on s.id = a.subscriber_id
where a.user_name = ? 
and replace(a.passcode,' ','') = replace(?,' ','')


.key=USER_LOGIN_SCHOOL

select u.uid,
       u.user_name,
       u.admin_id,
       s.type,
       h.partner_key
from   HA_USER u
       inner join HA_ADMIN h
         on u.admin_id = h.aid
       inner join SUBSCRIBERS s
         on s.id = h.subscriber_id
where s.password = ?
and replace(u.user_passcode,' ','') = replace(?,' ','') 
and u.is_active = 1


.key=GET_EXPIRE_DATE

select max(date_expire) as date_expire 
from SUBSCRIBERS_SERVICES ss
   JOIN HA_ADMIN h on ( h.subscriber_id = ss.subscriber_id and service_name = 'catchup')
where   h.aid = ?


.key=USER_LOGIN_INDIV

select u.uid,
       u.user_name,
       s.type,
       ss.date_expire,
       h.partner_key
from   HA_USER u
       inner join HA_ADMIN h
         on u.admin_id = h.aid
       inner join SUBSCRIBERS s
         on s.id = h.subscriber_id
       left outer join (select subscriber_id,
                               max(date_expire) as date_expire
                        from   SUBSCRIBERS_SERVICES
                        where  service_name = 'catchup'
                        group  by subscriber_id) ss
         on h.subscriber_id = ss.subscriber_id
where  s.student_email = ?
       and s.type = 'PS'
       and replace(u.user_passcode, ' ', '') = replace(?, ' ', '')
       and u.is_active = 1 

  
.key=USER_LOGIN_PARALLEL_PROGRAM

select pp.id, pp.name
from CM_PARALLEL_PROGRAM pp
JOIN HA_ADMIN a ON pp.admin_id = a.aid
JOIN SUBSCRIBERS s ON a.subscriber_id = s.id
where s.type = 'ST'
  and s.password = ?
  and pp.password = ?
    
  
.key=USER_LOGIN_AUTOREG

select u.uid, a.partner_key
from   HA_USER u
JOIN CM_GROUP g ON u.group_id = g.id
JOIN HA_ADMIN a ON u.admin_id = a.aid
JOIN SUBSCRIBERS s ON a.subscriber_id = s.id
where s.type = 'ST'
  and s.password = ?
  and g.name = ?
  and is_auto_create_template = 1
  and u.is_self_pay = 0


.key=USER_LOGIN_AUTOREG_SELFPAY

select u.uid, a.partner_key
from   HA_USER u
JOIN CM_GROUP g ON u.group_id = g.id
JOIN HA_ADMIN a ON u.admin_id = a.aid
JOIN SUBSCRIBERS s ON a.subscriber_id = s.id
where s.type = 'ST'
  and s.password = ?
  and g.name = ?
  and is_auto_create_template = 1
  and u.is_self_pay = 1


.key=SCHOOL_ACCOUNT_SERVICES

select ss.service_name, if(date_expire < curdate(), 1, 0) is_expired
from   SUBSCRIBERS s
left outer join (
       select subscriber_id, service_name,
       max(date_expire) as date_expire
       from   SUBSCRIBERS_SERVICES
       where subscriber_id in (select id from SUBSCRIBERS where password = ?)
       group  by subscriber_id, service_name) ss
  on ss.subscriber_id = s.id
where s.password = ?


.key=INDIV_ACCOUNT_SERVICES
select ss.service_name, if(date_expire < curdate(), 1, 0) is_expired
from   SUBSCRIBERS s
left outer join (
       select subscriber_id, service_name,
       max(date_expire) as date_expire
       from   SUBSCRIBERS_SERVICES
       where subscriber_id in (select id from SUBSCRIBERS where student_email = ?)
       group  by subscriber_id, service_name) ss
  on ss.subscriber_id = s.id
where s.student_email =  ?


.key=ADMIN_ACCOUNT_EXISTS
select user_name from HA_ADMIN where user_name = ?;


# return the LWL school_id associated
# with this user's admin record

.key=LWL_STUDENT_SCHOOL_ID

select a.subscriber_id,
       t.school_id
from   HA_ADMIN a
       join HA_USER u
         on a.aid = u.admin_id
       join LWL_TUTORING t
         on t.subscriber_id = a.subscriber_id
where  u.uid = ?





## Return whiteboard data for selected pid.
## note we are checking for NOT null command data
##
.key=GET_WHITEBOARD_SQL

select * 
from HA_TEST_RUN_WHITEBOARD
where user_id = ? 
and pid = ?
and run_id = ?
and command_data is not null
order by insert_time_mills






########################
### Class CheckForCentralMessagesCommand 
########################
########################


.key=GET_USER_MESSAGES

select m.id, m.message_text, m.message_type
from  HA_MESSAGE m 
where m.id not in (
  select mid
  from   HA_USER_MESSAGE um
  where  um.uid = ?
  and    mid = m.id
)

.key=MARK_USER_MESSAGE_AS_RETRIEVED

insert into HA_USER_MESSAGE(uid,mid,date_seen)
values(?,?,now());


 

##################
### CmCustomProgramDao
#####################

## remove all custom progrma defintions, including any templates defined

.key=CUSTOM_PROGRAM_DEFINITIONS_ALL

select if (archive_date is null,
           name,
           concat(name, concat(' (', concat(Date_format(archive_date,'%Y-%m-%d'), ')')))) as name,
       id, admin_id, is_template, is_archived, prog_id, assigned_count, inuse_count, load_order,
       Date_format(archive_date,'%Y-%m-%d') as archive_date
from v_HA_CUSTOM_PROGRAM_INFO 
where admin_id = ? 
or (is_template = 1 and admin_id is null)
order by is_template desc, load_order, name


.key=CUSTOM_PROGRAM_BUILTIN_DEFINITIONS

SELECT *
FROM   HA_CUSTOM_PROGRAM
WHERE  admin_id = 13 
  AND  is_template = 1
  AND  is_archived = 0
ORDER BY load_order;

.key=CUSTOM_PROGRAM_BUILTIN_LESSONS_BY_NAME

SELECT l.*
FROM   HA_CUSTOM_PROGRAM p
JOIN   HA_CUSTOM_PROGRAM_LESSON l
  ON   p.id = l.program_id
WHERE  p.admin_id = 13 
  AND  p.is_template = 1
  AND  p.is_archived = 0
  and  p.name = ?
ORDER BY l.order_by;

.key=CUSTOM_PROGRAM_BUILTIN_LESSONS_BY_ID

SELECT l.*
FROM   HA_CUSTOM_PROGRAM_LESSON l
WHERE  l.program_id = ?
ORDER BY l.order_by;


.key=CUSTOM_PROGRAM_DEFINITION_BYID

select if (archive_date is null,
           name,
           concat(name, concat(' (', concat(Date_format(archive_date,'%Y-%m-%d'), ')')))) as name,
       id, admin_id, is_template, is_archived, prog_id, assigned_count, inuse_count, load_order,
       Date_format(archive_date,'%Y-%m-%d') as archive_date
from v_HA_CUSTOM_PROGRAM_INFO
where id = ?  


.key=CUSTOM_PROGRAM_DEFINITION_BYNAME

select *
from v_HA_CUSTOM_PROGRAM_INFO
where admin_id = ? and name = ?


.key=CUSTOM_PROGRAM_INFO_INUSE

SELECT distinct u.uid, u.user_name
FROM   HA_CUSTOM_PROGRAM cp
  JOIN CM_USER_PROGRAM up on up.custom_program_id = cp.id
  JOIN HA_USER u on u.uid = up.user_id
WHERE  u.admin_id = ?
  AND  u.is_active = 1
  AND  cp.id = ?
ORDER BY u.user_name


.key=CUSTOM_QUIZ_INFO_INUSE

SELECT distinct u.uid, u.user_name
FROM   HA_CUSTOM_QUIZ q
 JOIN  CM_USER_PROGRAM up on up.custom_quiz_id = q.qid
 JOIN  HA_USER u on u.uid = up.user_id
WHERE  u.admin_id = ?
  AND  u.is_active = 1
  AND  q.qid = ?
ORDER BY u.user_name

.key=CUSTOM_QUIZ_USAGE_COUNT

SELECT count(distinct up.user_id) as count
FROM   CM_USER_PROGRAM up
JOIN   HA_USER u on u.uid = up.user_id AND u.is_active = 1
WHERE  up.custom_quiz_id = ?


.key=CUSTOM_PROGRAM_INFO_ASSIGNED

SELECT distinct u.uid, u.user_name
FROM   HA_USER u
 JOIN  CM_USER_PROGRAM up on up.id = u.user_prog_id
 JOIN  HA_CUSTOM_PROGRAM cp on cp.id = up.custom_program_id
WHERE  u.admin_id = ?
  AND  u.is_active = 1 
  AND  cp.id = ?
ORDER BY u.user_name

.key=CUSTOM_PROGRAM_USAGE_COUNT

SELECT count(distinct up.user_id) as count
FROM   CM_USER_PROGRAM up
JOIN   HA_USER u on u.uid = up.user_id AND u.is_active = 1
where  up.custom_program_id = ?


.key=CUSTOM_PROGRAM_LESSONS_FOR_TEST_ID

select cpl.*
from   HA_CUSTOM_PROGRAM_LESSON cpl, HA_TEST t, CM_USER_PROGRAM up
where  t.test_id = ?
  and  up.id = t.user_prog_id
  and  cpl.program_id = up.custom_program_id
order by cpl.lesson


.key=ARCHIVE_CUSTOM_PROGRAM_BYID

UPDATE HA_CUSTOM_PROGRAM cp
SET    cp.is_archived=1, cp.archive_date=now()
WHERE  cp.id=?


#################
### CmProgramListingDao 
#######################

.key=GET_PROGRAMS

SELECT id, title, load_order*10 as new_order
  FROM HA_PROG_DEF
 WHERE id in ('Prof','Chap','Grad Prep')
UNION
SELECT 'Custom' as id, 'Built-in Custom Programs' as title, 25 as new_order
  FROM HA_PROG_DEF
WHERE id = 'prof'
order by new_order asc

.key=GET_PROGRAM_LESSONS

SELECT DISTINCT lesson, file
FROM  HA_PROGRAM_LESSONS_static l
  LEFT JOIN HA_LESSON_RANK r on r.lesson_file = l.file
WHERE pid in ($$PIDLIST$$)  
ORDER BY rank, lesson


########################
##### HIGHLIGHT INFORMATION 
########################

.key=GET_HIGHLIGHT_REPORT_GROUP_PROGRESS

select g.id as group_id,
       g.name as group_name,
       la.active_count,
       lc.login_count,
       lv.lessons_viewed,
       qp.quizzes_passed
from   v_HA_USER_ACTIVE u
       join CM_GROUP g
         on g.id = u.group_id
       join (
               /* 
                *  total login count
               */
               select u2.group_id,
                      count(*) as login_count
               from   HA_USER_LOGIN l
                      join HA_USER u2
                        on u2.uid = l.user_id
               where   u2.admin_id = $$AID$$
                 and   l.login_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
                 and   u2.is_auto_create_template = 0
                 and   u2.is_active != 0
               group  by u2.group_id
               
          ) lc on lc.group_id = u.group_id
          
         join (
               /* 
               *  count of active users in group 
               */
               select group_id, count(*) as active_count
               from   HA_USER u3
               where  exists (
                       /*
                       *  check if user has every logged in
                       */
                       select 'x'
                       from   HA_USER_LOGIN
                       where  user_id = u3.uid
                       and   login_time between '$$DATE_FROM$$' and '$$DATE_TO$$'                            
                )
                and   u3.admin_id = $$AID$$
                and   u3 .is_auto_create_template = 0
                and   u3.is_active != 0
                group by group_id
                
          ) la on la.group_id = u.group_id
          
          left join ( 
          
                  /* 
                  * get total count of lessons viewed
                  */
                select group_id, count(l.id) as lessons_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_LESSON l on l.run_id = r.run_id
              where u.admin_id = $$AID$$
                and u.is_auto_create_template = 0
                and u.is_active != 0
                and l.lesson_viewed between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id
              
          ) lv on lv.group_id = u.group_id
          
          
          left join (
          
              /** 
              * get number of quizzes passed for group 
              */
              select group_id, count(r.run_id) as quizzes_passed
              from HA_USER u
                  JOIN HA_TEST t on t.user_id = u.uid 
                  JOIN HA_TEST_RUN r on r.test_id = t.test_id
              where r.is_passing = 1
              and u.admin_id = $$AID$$
              and u.is_auto_create_template = 0
              and r.run_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id    
          ) qp on qp.group_id = u.group_id
          
where  u.admin_id = $$AID$$
group  by u.group_id

order by active_count desc




.key=GET_HIGHLIGHT_REPORT_GROUP_USAGE


select g.id as group_id,
       g.name as group_name,
       la.active_count,
       vv.videos_viewed,
       gv.games_viewed,
       av.activities_viewed,
       fc.flash_cards_viewed
       
from   v_HA_USER_ACTIVE u
       join CM_GROUP g
         on g.id = u.group_id
         join (
               /* 
               *  count of active users in group
               */
               select group_id, count(*) as active_count
               from   HA_USER u3
               where  exists (
                       /*
                       *  check if user has ever logged in
                       */
                       select 'x'
                       from   HA_USER_LOGIN
                       where  user_id = u3.uid
                       and   login_time between '$$DATE_FROM$$' and '$$DATE_TO$$'                            
                )
                and    u3.admin_id = $$AID$$
                and    u3.is_auto_create_template = 0
                and    u3.is_active != 0
                group by group_id
                
          ) la on la.group_id = u.group_id
          
          left join ( 
                  /* 
                  * get total count of videos viewed
                  */
                select group_id, count(i.use_id) as videos_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
                and u.is_auto_create_template = 0
                and u.is_active != 0
                and i.item_type = 'video'
                and i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id
              
          ) vv on vv.group_id = u.group_id
          
          
          left join (
          
                  /* 
                  * get total count of games viewed
                  */
                select group_id, count(i.use_id) as games_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
                and u.is_auto_create_template = 0
                and u.is_active != 0
                and i.item_type = 'activity_standard'
                and i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id 
              
          ) gv  on gv.group_id = u.group_id
          
          left join (
                  /* 
                  * get total count of activities viewed
                  */
                select group_id, count(i.use_id) as activities_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
                and u.is_auto_create_template = 0
                and u.is_active != 0
                and i.item_type = 'activity'
                and i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id 
              
          ) av  on av.group_id = u.group_id
          
                              
          left join (
                  /* 
                  * get total count of flash cards viewed
                  */
                select group_id, count(i.use_id) as flash_cards_viewed
                from    HA_USER u
                   JOIN HA_TEST t on t.user_id = u.uid
                   JOIN HA_TEST_RUN r on r.test_id = t.test_id
                   JOIN HA_TEST_RUN_INMH_USE i on i.run_id = r.run_id
              where u.admin_id = $$AID$$
                and u.is_auto_create_template = 0
                and u.is_active != 0
                and i.item_type in ('flashcard', 'flashcard_es')
                and i.view_time between '$$DATE_FROM$$' and '$$DATE_TO$$'
              group by group_id 
              
          ) fc  on fc.group_id = u.group_id                              

where  u.admin_id = $$AID$$
group  by u.group_id

order by active_count desc 

.key=HIGHLIGHT_REPORT_GREATEST_EFFORT


select u.uid,
       u.user_name,
       count(*) as lessons_viewed
from   HA_USER u
       join HA_TEST t
         on t.user_id = u.uid
       join HA_TEST_RUN r
         on r.test_id = t.test_id
       join HA_TEST_RUN_LESSON l
         on l.run_id = r.run_id
where  u.uid in ( $$UID_LIST$$ )
       and u.is_auto_create_template = 0
       and l.lesson_viewed between ? and ?
group  by u.uid
order  by lessons_viewed desc,
          u.user_name 
          
          
          
.key=HIGHLIGHT_REPORT_LEAST_EFFORT

select u.uid,
       u.user_name,
       count(*) as lessons_viewed
from   v_HA_USER_ACTIVE u
       join HA_TEST t
         on t.user_id = u.uid
       join HA_TEST_RUN r
         on r.test_id = t.test_id
       join HA_TEST_RUN_LESSON l
         on l.run_id = r.run_id
where  u.uid in ( $$UID_LIST$$ )
       and u.is_auto_create_template = 0
       and l.lesson_viewed between ? and ?
group  by u.uid
order  by lessons_viewed,
          u.user_name 
          
          
          
       
.key=HIGHLIGHT_REPORT_MOST_GAMES_VIEWED   

select u.uid,
       u.user_name,
       qv.quizzes_taken,
       count(*) as games_viewed
from   v_HA_USER_ACTIVE u
       join (select user_id,
                    count(*) as quizzes_taken
             from   HA_TEST t
                    join HA_TEST_RUN r
                      on r.test_id = t.test_id
             where  r.run_time between ? and ?
             and t.user_id in ($$UID_LIST$$)
             group  by user_id) qv
         on qv.user_id = u.uid
       join HA_TEST t
         on t.user_id = u.uid
       join HA_TEST_RUN r
         on r.test_id = t.test_id
       join HA_TEST_RUN_INMH_USE i
         on i.run_id = r.run_id
where  u.uid in ( $$UID_LIST$$ )
       and u.is_auto_create_template = 0
       and i.item_type = 'activity_standard'
       and i.view_time between ? and ?
group  by u.uid
order  by games_viewed desc,
          u.user_name           
          
          
          
          
.key=HIGHLIGHT_REPORT_QUIZZES_PASSED          
          
select u.uid,
       u.user_name,
       qv.quizzes_taken,
       count(*) as quizzes_passed
from   v_HA_USER_ACTIVE u
       join (select user_id,
                    count(*) as quizzes_taken
             from   HA_TEST t
                    join HA_TEST_RUN r
                      on r.test_id = t.test_id
             where  r.run_time between ? and ?
             and t.user_id in ( $$UID_LIST$$ )
             group  by user_id) qv
         on qv.user_id = u.uid
       join HA_TEST t
         on t.user_id = u.uid
       join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       join HA_TEST_RUN r
         on r.test_id = t.test_id
where  u.uid in ( $$UID_LIST$$)
       and u.is_auto_create_template = 0
       and r.is_passing = 1
       and c.test_def_id not in ( 15, 36, 57 )
       and r.run_time between ? and ?
group  by u.uid
order  by quizzes_passed desc,
          u.user_name 
          


.key=HIGHLIGHT_REPORT_AVG_QUIZ_SCORES         
          
select u.uid,
       u.user_name,
       qv.quizzes_taken,
       Floor(avg(( answered_correct / ( answered_correct + answered_incorrect +
                                        not_answered
                                            ) )
                       * 100)) as avg_quiz_score
from   v_HA_USER_ACTIVE u
       join (select user_id,
                    count(*) as quizzes_taken
             from   HA_TEST t
                    join HA_TEST_RUN r
                      on r.test_id = t.test_id
             where  r.run_time between ? and ?
               and  t.user_id in ($$UID_LIST$$)
               and  t.test_def_id not in (15, 57)
             group  by user_id) qv
         on qv.user_id = u.uid
       join HA_TEST t
         on t.user_id = u.uid
       join CM_USER_PROGRAM c
         on c.id = t.user_prog_id
       join HA_TEST_RUN r
         on r.test_id = t.test_id
where  u.uid in ( $$UID_LIST$$ )
       and u.is_auto_create_template = 0
       and c.test_def_id not in ( 15, 36, 57 )
       and r.run_time between ? and ?
group  by u.uid
order  by avg_quiz_score desc,
          u.user_name 
          
          
   
.key=HIGHLIGHT_REPORT_FAILED_CURRENT_QUIZ

SELECT u.uid,
       u.user_name,
       count(r.run_id) as failed_quizzes
FROM   v_HA_USER_ACTIVE u
JOIN   HA_TEST t
 ON    t.user_id = u.uid
 AND   t.user_prog_id = u.user_prog_id
 AND   t.test_segment = u.active_segment
 AND   t.test_def_id not in (15, 57)
JOIN   HA_TEST_RUN r
 ON    r.test_id = t.test_id
 AND   r.is_passing = 0
 AND   r.run_time between ? and ?
WHERE  u.uid IN ( $$UID_LIST$$ )
  AND  u.is_auto_create_template = 0
GROUP BY u.uid
ORDER BY failed_quizzes desc,
         user_name 


.key=HIGHLIGHT_REPORT_ZERO_LOGIN          
          
select u.uid,
       u.user_name
from   v_HA_USER_ACTIVE u
where  u.uid in( $$UID_LIST$$ )
  and  u.is_auto_create_template = 0
       and not exists (select 'x'
                       from   HA_USER_LOGIN l
                       where  user_id = u.uid
                              and l.login_time between ? and ?)
order  by u.user_name 
          
#####
.key=HIGHLIGHT_REPORT_ACTIVE_TIME

SELECT u.user_name, u.uid, ifnull(sum(t.active_minutes), 0) as active_minutes
FROM  HA_USER u
LEFT JOIN CM_USER_BUSY t
  ON u.uid = t.uid AND date(t.busy_time) between ? and ?
WHERE u.uid IN ( $$UID_LIST$$  )
GROUP BY u.uid
ORDER BY u.user_name asc


.key=HIGHLIGHT_REPORT_TIME_ON_TASK

select u.user_name, t.user_id, 'REVIEW' as activity_type, count(*) as activity_count
from HA_TEST t, HA_TEST_RUN tr, HA_TEST_RUN_LESSON rl, HA_USER u
where t.user_id in ( $$UID_LIST$$ )
  and t.test_id = tr.test_id
  and rl.run_id = tr.run_id
  and rl.date_completed between ? and ?
  and t.user_id = u.uid
  and u.is_auto_create_template = 0
group by t.user_id, activity_type

union

select u.user_name, t.user_id, iu.item_type as activity_type, count(*) as activity_count
from HA_TEST t, HA_TEST_RUN tr, HA_TEST_RUN_INMH_USE iu, HA_USER u
where t.user_id in ( $$UID_LIST$$ )
  and t.test_id = tr.test_id
  and iu.run_id = tr.run_id
  and upper(iu.item_type) != 'REVIEW'
  and iu.view_time between ? and ?
  and t.user_id = u.uid
  and u.is_auto_create_template = 0
group by t.user_id, activity_type

union

select u.user_name, t.user_id, 'QUIZ' as activity_type, count(*) as activity_count
from HA_TEST t, HA_TEST_RUN tr, HA_USER u
where t.user_id in ( $$UID_LIST$$ )
  and t.test_id = tr.test_id
  and tr.run_time between ? and ?
  and t.user_id = u.uid
  and u.is_auto_create_template = 0
group by t.user_id

union

select u.user_name, t.user_id, 'WHITEBOARD' as activity_type, count(*) as activity_count
from HA_TEST t, HA_TEST_RUN tr, HA_USER u, 
     (
       select tw.run_id as run_id from HA_TEST_RUN_WHITEBOARD tw
       where  tw.user_id in ( $$UID_LIST$$ )
       group by run_id
     ) s
where t.user_id in ( $$UID_LIST$$ )
  and t.test_id = tr.test_id
  and tr.run_id = s.run_id
  and tr.run_time between ? and ?
  and t.user_id = u.uid
  and u.is_auto_create_template = 0
group by t.user_id, tr.run_id

order by user_name, activity_type


.key=HIGHLIGHT_REPORT_WIDGET_ANSWERS

SELECT u.uid, u.user_name, m.pid, m.correct, m.first_answer_time
FROM
 (SELECT t.user_id, a.pid, a.correct, min(a.answer_time) as first_answer_time
  FROM   HA_TEST t
  JOIN   HA_TEST_RUN r ON r.test_id = t.test_id
  JOIN   HA_TEST_RUN_WIDGET_INPUT_ANSWERS a
    ON   a.run_id = r.run_id
  WHERE  t.user_id IN ( $$UID_LIST$$ )
  GROUP  BY t.user_id, a.pid
  ORDER  BY t.user_id, a.pid) m
JOIN  HA_USER u ON u.uid = m.user_id
WHERE m.first_answer_time BETWEEN ? and ?


.key=HIGHLIGHT_REPORT_CCSS_COVERAGE

SELECT distinct ins.standard_name_new, user_id
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_RESULTS trr
  ON trr.run_id = tr.run_id AND upper(trr.answer_status)='CORRECT'
JOIN inmh_map im
  ON im.guid = trr.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = im.file
WHERE t.user_id in ( $$UID_LIST$$ )
  AND tr.run_time BETWEEN ? AND ?
UNION
SELECT distinct ins.standard_name_new, user_id
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_LESSON rl
  ON rl.run_id = tr.run_id AND rl.date_completed is not null
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = rl.lesson_file
WHERE t.user_id in ( $$UID_LIST$$ )
  AND rl.date_completed BETWEEN ? AND ?
UNION
SELECT distinct ins.standard_name_new, user_id
FROM CM_ASSIGNMENT_USER au
JOIN CM_ASSIGNMENT a
  ON au.assign_key = a.assign_key
JOIN CM_ASSIGNMENT_PID_ANSWERS pa
  ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
JOIN CM_ASSIGNMENT_PIDS ap
  ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
WHERE au.uid in ( $$UID_LIST$$ )
  AND au.is_graded = 1
  AND a.due_date BETWEEN ? AND ?
ORDER BY standard_name_new ASC

#########################
### CmQuizzesDao 
#########################

###############
# Get the solutions that are associated with a
# INMH lesson.  Make sure only solutions from 
# textcodes that should be used with Custom Quizzes
# are returned.
#
# TODO: generalize this query by removing hard-coded textcodes

.key=GET_LESSON_QUIZZES

select guid, d.test_name as program_name
from inmh_map m
   JOIN SOLUTIONS s on s.problemindex = m.guid
  JOIN HA_TEST_DEF d on d.textcode = s.booktitle
  JOIN BOOKINFO b on b.textcode = d.textcode
where m.file = ?
and b.grade_level <= ?
and d.is_active = 1
and solutionxml like '%statement%hm_question_def%statement%'
and b.textcode in (
    'alg1ptests',
    'alg1ptests3',
    'alg2ptests',
    'alg2ptests3',
    'cahseehm2',
    'essptests2',
    'geoptests',
    'geoptests2',
    'prealgptests',
    'prealgptests2',
    'taks11hm'    
    )
order by guid
          


.key=GET_CUSTOM_QUIZ_DEFS

select if (q.archive_date is null,
           q.name,
           concat(q.name, concat(' (', concat(Date_format(q.archive_date,'%Y-%m-%d'), ')')))) as quiz_name,
       q.qid as quiz_id, q.admin_id, q.is_answers_viewable, q.is_archived,
       Date_format(q.archive_date,'%Y-%m-%d') as archive_date
from  HA_CUSTOM_QUIZ q
where q.admin_id = ?
order by q.name

          
.key=DELETE_CUSTOM_QUIZ_IDS

delete qi
from HA_CUSTOM_QUIZ_IDS qi
where qi.qid = ?


.key=DELETE_CUSTOM_QUIZ

delete
from HA_CUSTOM_QUIZ
where admin_id = ?
and qid = ?

.key=DELETE_CUSTOM_QUIZ_BYID

delete
from HA_CUSTOM_QUIZ
where admin_id = ?
and qid = ?


.key=ADD_CUSTOM_QUIZ

insert into HA_CUSTOM_QUIZ(admin_id, name, is_answers_viewable)
values(?, ?, ?)

          
.key=ADD_CUSTOM_QUIZ_IDS

insert into HA_CUSTOM_QUIZ_IDS(qid, pid, load_order)
value(?,?,?)


.key=UPDATE_CUSTOM_QUIZ

UPDATE HA_CUSTOM_QUIZ 
SET    name=?, is_answers_viewable=?
WHERE  qid=?

##
.key=ARCHIVE_CUSTOM_QUIZ

UPDATE HA_CUSTOM_QUIZ 
SET    is_archived=1, archive_date=now()
WHERE  qid=?

          
.key=GET_CUSTOM_QUIZ_IDS

select q.name, qi.pid
from HA_CUSTOM_QUIZ q
  JOIN HA_CUSTOM_QUIZ_IDS qi on qi.qid = q.qid
where q.qid = ?  
order by qi.load_order;

          
         
.key=GET_CUSTOM_QUIZ_ID

select qid as custom_quiz_id
from HA_CUSTOM_QUIZ q
where admin_id = ?
and name = ?         


.key=GET_CUSTOM_QUIZ_BYID

select if (q.archive_date is null,
           q.name,
           concat(q.name, concat(' (', concat(Date_format(q.archive_date,'%Y-%m-%d'), ')')))) as quiz_name,
       q.qid as quiz_id, q.admin_id, q.is_answers_viewable, q.is_archived,
       Date_format(q.archive_date,'%Y-%m-%d') as archive_date
from  HA_CUSTOM_QUIZ q
where qid = ?
order by name

##
.key=GET_CUSTOM_QUIZ_BY_TESTID

SELECT if (q.archive_date is null,
           q.name,
           concat(q.name, concat(' (', concat(Date_format(q.archive_date,'%Y-%m-%d'), ')')))) as quiz_name,
       q.qid as quiz_id, q.admin_id, q.is_answers_viewable, q.is_archived,
       Date_format(q.archive_date,'%Y-%m-%d') as archive_date
FROM   HA_TEST t, CM_USER_PROGRAM p, HA_CUSTOM_QUIZ q
WHERE t.test_id = ?
  AND t.user_prog_id = p.id
  AND p.custom_quiz_id = q.qid
ORDER BY name


##
.key=GET_CUSTOM_PROGRAM_ITEMS

SELECT l.*,
       if (q.archive_date is null,
           q.name,
           concat(q.name, concat(' (', concat(Date_format(q.archive_date,'%Y-%m-%d'), ')')))) as custom_quiz_name,
       q.qid as quiz_id, q.admin_id, q.is_answers_viewable, q.is_archived,
       Date_format(q.archive_date,'%Y-%m-%d') as archive_date
FROM HA_CUSTOM_PROGRAM_LESSON l
  LEFT JOIN HA_CUSTOM_QUIZ q on q.qid = l.custom_quiz
WHERE program_id = ?
ORDER BY l.id


.key=CUSTOM_QUIZ_EXISTS

SELECT q.*
FROM HA_CUSTOM_QUIZ q
WHERE q.qid = ?
  AND q.admin_id = ?



##########################
#####  CmLoginInfoDao    
##########################


.key=GET_LOGIN_INFO

select *
from HA_USER_LOGIN
where login_key = ?



.key=UPDATE_LOGIN_INFO

update HA_USER_LOGIN 
set is_consumed = 1 
where lid = ?



.key=INSERT_LOGIN_INFO

insert into HA_USER_LOGIN(user_id, login_key, user_type, login_time,login_name, browser_info, is_real_login, is_html5_only)
values(?,?,?,?,?,?,?,?)


.key=GET_LOGIN_INFO_KEY

select login_key
from HA_USER_LOGIN
where user_id = ?
order by lid desc 
limit 1



###########################
## GetUserInfoCommand #####
###########################

###########################
.key=GET_COUNT_UNCOMPLETED_TEST_RUN_LESSONS_PROGRAM
#
# return the count of lessons not completed

select count(l.id) as lessons_to_view
from  HA_TEST_RUN r
  JOIN HA_TEST_RUN_LESSON l on l.run_id = r.run_id
where r.run_id = ?
and l.date_completed is null



#############################
### HaUserExtendedDao #####
#############################

###################################
.key=SET_UPDATE_EXTENDED_DATA

update HA_USER_EXTENDED 
  set quiz_pass_count = ?, 
   quiz_not_pass_count = ?, 
   last_quiz = ?,
   last_login = ?,
   current_lesson = ?,
   lesson_count = ?,
   lessons_completed = ?
    
where user_id = ?


###############################
.key=GET_LAST_QUIZ_STATUS
##
# Return the pass percent of the last quiz taken
##

select round((answered_correct  /  (answered_correct + answered_incorrect + not_answered)) * 100) as last_quiz_percent
from HA_TEST t
  JOIN HA_TEST_RUN r
    on r.test_id = t.test_id
where t.user_id = ?
order by r.run_time desc
limit 1;

###########
# data for reset of HA_USER_EXTENDED for a single student
##
.key=GET_USER_EXTENDED_RESET
##

select 'PASS_COUNT' as name, count(*) as value
from HA_TEST t
JOIN HA_TEST_RUN r on r.test_id = t.test_id
JOIN CM_USER_PROGRAM up on up.id = t.user_prog_id and up.custom_program_id is null
where is_passing = 1 and t.user_id = ?

union 

select 'NOT_PASS_COUNT' as name, count(*) as value
from HA_TEST t
JOIN HA_TEST_RUN r on r.test_id = t.test_id
JOIN CM_USER_PROGRAM up on up.id = t.user_prog_id and up.custom_program_id is null
where is_passing = 0 and t.user_id = ?

union

select 'LAST_QUIZ' as name, round((tr.answered_correct  /  (tr.answered_correct + tr.answered_incorrect + tr.not_answered)) * 100) as value
from (
    select max(r.run_id) as max_run_id
    from HA_TEST_RUN r, HA_TEST t
    where t.user_id = ? and r.test_id = t.test_id
     ) mt
JOIN HA_TEST_RUN tr on tr.run_id = mt.max_run_id
JOIN HA_TEST t on t.test_id = tr.test_id
JOIN CM_USER_PROGRAM up on up.id = t.user_prog_id and up.custom_program_id is null

union

select 'LAST_LOGIN' as name, max(create_time) as value
from HA_TEST t
where t.user_id = ?

union

select 'CURRENT_LESSON' as name, count(*) as value
from HA_TEST t
JOIN HA_TEST_RUN tr on tr.test_id = t.test_id 
JOIN HA_TEST_RUN_LESSON rl on rl.run_id = tr.run_id and rl.lesson_viewed is not null 
where t.user_id = ?

union

select 'LESSON_COUNT' as name, count(*) as value
from HA_TEST t
JOIN HA_TEST_RUN tr on tr.test_id = t.test_id 
JOIN HA_TEST_RUN_LESSON rl on rl.run_id = tr.run_id
where t.user_id = ?

union

select 'LESSONS_COMPLETED' as name,  count(*) as value
from HA_TEST t
JOIN HA_TEST_RUN tr on tr.test_id = t.test_id 
JOIN HA_TEST_RUN_LESSON rl on rl.run_id = tr.run_id and rl.date_completed is not null 
where t.user_id = ?

###
.key=GET_USER_EXTENDED_RESET_LOGIN
##

select max(login_time) from HA_USER_LOGIN where user_id = ?


###
.key=ACCOUNT_OVERAGE
###

select user_name, school_name, rep_name, student_count, max_students, status, date_expire,
       if(overage>0, overage, 0) as overage, if(essentials_count is null, 0, essentials_count) as essentials_count
from
 (select a.user_name, s.school_type as school_name, sz.zone_manager as rep_name, c.student_count, sc.max_students,
       (c.student_count - sc.max_students) as overage, ss.status, ss.date_expire, e.essentials_count
  from HA_ADMIN a, SUBSCRIBERS_SERVICES ss, SUBSCRIBERS_SERVICES_CONFIG_CATCHUP sc,
       SUBSCRIBERS s, SUBSCRIBERS_ZONE sz,
   (select admin_id, count(*) as student_count
    from HA_USER u
    where u.is_active = 1
      and u.is_auto_create_template = 0
    group by u.admin_id ) c
left outer join
   (select u.admin_id, count(*) as essentials_count
    from HA_USER u
    join CM_USER_PROGRAM p
      on u.user_prog_id = p.id
    join HA_TEST_DEF t
      on  p.test_def_id = t.test_def_id
      and t.textcode like('essptests%')
    where u.is_active = 1
      and u.is_auto_create_template = 0
    group by u.admin_id) e
  on e.admin_id = c.admin_id
  where a.subscriber_id = sc.subscriber_id
    and a.subscriber_id = s.id
    and a.aid = c.admin_id
    and sc.max_students < (c.student_count + 20)
    and ss.subscriber_id = a.subscriber_id
    and sc.subscriber_svc_id = ss.ssid
    and s.sales_zone = sz.zone) oc
order by overage desc, student_count desc



#################################
#### HaUserDao ##################

###
.key=GET_USER_CLIENT_ENVIRONMENT

 
select browser_info, is_html5_only
from HA_USER_LOGIN
where user_id = ?
order by lid desc
limit 1

############################
#### ParallelProgramDao ####

.key=IS_PARALLEL_PROGRAM_STUDENT

select count(*) as is_parallel_prog_student
from HA_USER u, CM_PARALLEL_PROGRAM pp
where pp.id = ?
  and pp.admin_id = u.admin_id
  and u.user_passcode = ?


.key=IS_IN_PARALLEL_PROGRAM

SELECT count(*) as is_in_parallel_program
FROM CM_PARALLEL_PROGRAM pp
JOIN HA_USER u on u.uid = ?
JOIN CM_PROGRAM_ASSIGN pa on pa.user_id = u.uid
 AND pa.user_prog_id = u.user_prog_id
 AND pa.is_parallel_prog = 1
WHERE pp.prog_inst_id = pa.prog_inst_id


.key=GET_STUDENT_UID

select u.uid as student_uid
from HA_USER u, CM_PARALLEL_PROGRAM pp
where pp.id = ?
  and pp.admin_id = u.admin_id
  and u.user_passcode = ?


.key=GET_CM_PROGRAM_FOR_PP

select p.id, p.admin_id, p.test_def_id, p.pass_percent, td.subj_id, td.prog_id,
       p.custom_prog_id, p.custom_quiz_id, td.segment_count, p.test_config_json
from CM_PARALLEL_PROGRAM pp
JOIN CM_PROGRAM p on p.id = pp.prog_inst_id 
JOIN HA_TEST_DEF td on td.test_def_id = p.test_def_id
where pp.id = ?


.key=GET_CM_PROGRAM_FOR_ID

select p.id, p.admin_id, p.test_def_id, p.pass_percent, td.subj_id, td.prog_id,
       p.custom_prog_id, p.custom_quiz_id, td.segment_count, p.test_config_json
from CM_PROGRAM p
JOIN HA_TEST_DEF td on td.test_def_id = p.test_def_id
where p.id = ?


.key=GET_CM_PROGRAM_FOR_USERID

select cp.id, cp.admin_id, cp.test_def_id, cp.pass_percent, td.subj_id, td.prog_id,
       cp.custom_prog_id, cp.custom_quiz_id, td.segment_count, cp.test_config_json, u.user_prog_id,
       u.active_run_id, u.active_test_id, u.active_segment, u.active_run_session, u.active_segment_slot
from CM_PROGRAM cp
join HA_USER u on u.uid = ?
join CM_USER_PROGRAM up on up.id = u.user_prog_id
JOIN HA_TEST_DEF td on td.test_def_id = cp.test_def_id
where u.admin_id = cp.admin_id
  and up.test_def_id = cp.test_def_id
  and (ifnull(cp.custom_quiz_id,0))     = (ifnull(up.custom_quiz_id,0))
  and (ifnull(cp.custom_quiz_id,0))     = (ifnull(up.custom_quiz_id,0))
  and (ifnull(cp.test_config_json,' ')) = (ifnull(up.test_config_json,' '))
limit 1

###
.key=GET_MAIN_PROGRAM_FOR_USERID

select pa.*, p.custom_prog_id, p.custom_quiz_id
from CM_PROGRAM_ASSIGN pa
join CM_PROGRAM p on p.id = pa.prog_inst_id
where pa.user_id = ? and pa.is_current_main_prog = 1


.key=IS_PARALLEL_PROGRAM_ASSIGNED

select count(*) as is_assigned from CM_PARALLEL_PROGRAM pp
join HA_USER u on u.uid = ?
join CM_PROGRAM_ASSIGN pa on pp.prog_inst_id = pa.prog_inst_id
     and u.uid = pa.user_id
     and u.user_prog_id = pa.user_prog_id
where pp.id = ?


.key=PARALLEL_PROGRAM_PREV_ASSIGNED

select count(*) as prev_assigned from CM_PARALLEL_PROGRAM pp
join HA_USER u on u.uid = ?
join CM_PROGRAM_ASSIGN pa on pp.prog_inst_id = pa.prog_inst_id
     and u.uid = pa.user_id
     and u.user_prog_id <> pa.user_prog_id
     and pa.is_parallel_prog = 1
where pp.id = ?


.key=GET_CM_PROGRAM_ASSIGN_FOR_PPID_AND_USERID

select pa.*
from CM_PROGRAM_ASSIGN pa
join CM_PARALLEL_PROGRAM pp on pp.id = ?
where pa.user_id = ?
  and pa.prog_inst_id = pp.prog_inst_id
  and pa.is_parallel_prog = 1
  

.key=CM_PROGRAM_EXISTS_FOR_STUDENT

select count(*) as prog_exists from CM_PROGRAM cp
join HA_USER u on u.uid = ?
join CM_USER_PROGRAM up on up.id = u.user_prog_id
where u.admin_id = cp.admin_id
  and up.test_def_id = cp.test_def_id
  and (ifnull(cp.custom_quiz_id,0))     = (ifnull(up.custom_quiz_id,0))
  and (ifnull(cp.custom_quiz_id,0))     = (ifnull(up.custom_quiz_id,0))
  and (ifnull(cp.test_config_json,' ')) = (ifnull(up.test_config_json,' '))
  and (ifnull(cp.pass_percent,0))       = (ifnull(up.pass_percent,0))


.key=CM_PROGRAM_ASSIGN_EXISTS_FOR_STUDENT

select count(*) as prog_exists from CM_PROGRAM cp
join HA_USER u on u.uid = ?
join CM_USER_PROGRAM up on up.id = u.user_prog_id
join CM_PROGRAM_ASSIGN pa on pa.user_id = u.uid and pa.prog_inst_id = cp.id
where u.admin_id = cp.admin_id
  and up.test_def_id = cp.test_def_id
  and (ifnull(cp.custom_quiz_id,0))     = (ifnull(up.custom_quiz_id,0))
  and (ifnull(cp.custom_quiz_id,0))     = (ifnull(up.custom_quiz_id,0))
  and (ifnull(cp.test_config_json,' ')) = (ifnull(up.test_config_json,' '))
  and (ifnull(cp.pass_percent,0))       = (ifnull(up.pass_percent,0))
  
  
.key=ADD_CM_PROGRAM_FOR_STUDENT

insert into CM_PROGRAM
(admin_id, test_def_id, test_config_json, custom_prog_id, custom_quiz_id, pass_percent, create_date)
( select up.admin_id, up.test_def_id, up.test_config_json, ifnull(up.custom_program_id,0),
         ifnull(up.custom_quiz_id,0), pass_percent, now()
  from CM_USER_PROGRAM up
  join HA_USER u on u.uid = ?
  where u.user_prog_id = up.id )
 
 
.key=CREATE_CM_PROGRAM

insert into CM_PROGRAM
(admin_id, pass_percent, custom_prog_id, custom_quiz_id, test_config_json, create_date, test_def_id)
values
(?, ?, ?, ?, ?, now(),
 (select test_def_id
 from HA_TEST_DEF
 where test_def_id = (select max(test_def_id) as test_def_id from HA_TEST_DEF where prog_id = ? and subj_id = ? and is_active = 1))
)

.key=CREATE_CM_PARALLEL_PROGRAM

insert into CM_PARALLEL_PROGRAM
(admin_id, prog_inst_id, password, name, create_date) 
values
(?, ?, ?, ?, now())


.key=CREATE_CM_PROGRAM_ASSIGN

insert into CM_PROGRAM_ASSIGN
(user_id, user_prog_id, prog_inst_id, prog_segment, run_id, run_session, test_id, segment_slot, is_parallel_prog, is_current_main_prog, create_date) 
values
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now())


.key=UPDATE_CM_PROGRAM_ASSIGN

update CM_PROGRAM_ASSIGN
set test_id=?, run_id=?, run_session=?, prog_segment=?, segment_slot=?, update_date=now()
where user_id=? and user_prog_id = ?


.key=GET_PARALLEL_PROGRAMS_FOR_ADMIN

select pp.*, ifnull(pa.student_count, 0) as student_count, td.prog_id, td.subj_id,
       ifnull(cp.name,' ') as cp_name, ifnull(cq.name, ' ') as cq_name,
       concat(td.subj_id, ' ', td.prog_id) as program, p.test_config_json
from CM_PARALLEL_PROGRAM pp
join CM_PROGRAM p on p.id = pp.prog_inst_id
join HA_TEST_DEF td on td.test_def_id = p.test_def_id
left join HA_CUSTOM_PROGRAM cp on cp.id = p.custom_prog_id
left join HA_CUSTOM_QUIZ cq on cq.qid = p.custom_quiz_id
left join (select count(*) as student_count, prog_inst_id from CM_PROGRAM_ASSIGN group by prog_inst_id) pa
  on pa.prog_inst_id = pp.prog_inst_id
where pp.admin_id = ?
order by pp.name

#####
.key=GET_STUDENTS_FOR_PARALLEL_PROGRAM

select distinct pa.user_id
from CM_PARALLEL_PROGRAM pp
join  CM_PROGRAM_ASSIGN pa on pa.prog_inst_id = pp.prog_inst_id
where pp.id = ?


#####
.key=GET_USAGE_FOR_PARALLEL_PROGRAM

select user_name, user_id, load_order, is_custom_quiz, use_date, view_time,
       answered_correct, answered_incorrect, not_answered, program, prog_id, subj_id, test_config_json,
       test_id, test_segment, test_def_id, test_run_id, total_sessions,
       activity, is_quiz, session_number, prog_inst_id
from (

 select u.user_name, u.uid as user_id, 1 as load_order, 0 as is_custom_quiz,
   date_format(l.create_time,'%Y-%m-%d') as use_date,
   l.create_time as view_time,
   0 as answered_correct, 0 as answered_incorrect, 0 as not_answered,
   concat(td.subj_id, ' ', td.prog_id) as program,  td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, l.test_segment, td.test_def_id as test_def_id,
   0 as test_run_id,
   0 as total_sessions,
   'Quiz-' as activity, 1 as is_quiz, l.test_segment as session_number,
   pa.prog_inst_id
 from  CM_PARALLEL_PROGRAM pp 
 join CM_PROGRAM_ASSIGN pa on pa.prog_inst_id = pp.prog_inst_id
 join HA_TEST l on l.user_prog_id = pa.user_prog_id
 join HA_USER u on u.uid = pa.user_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and p.custom_program_id is null
 where pp.id = ?

union

 select u.user_name, u.uid as user_id, 2 as load_order,0 as is_custom_quiz,
   date_format(r.run_time,'%Y-%m-%d') as use_date,
   r.run_time as view_time,
   r.answered_correct, r.answered_incorrect, r.not_answered,
   concat(td.subj_id, ' ', td.prog_id) as program, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, l.test_segment, td.test_def_id as test_def_id,
   r.run_id as test_run_id, 0 as total_sessions,
   'Quiz-' as activity, 1 as is_quiz, l.test_segment as session_number,
   pa.prog_inst_id
 from CM_PARALLEL_PROGRAM pp
 join CM_PROGRAM_ASSIGN pa on pa.prog_inst_id = pp.prog_inst_id
 join HA_TEST l on l.user_prog_id = pa.user_prog_id
 join HA_USER u ON u.uid = pa.user_id
 join HA_TEST_RUN r on r.test_id = l.test_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id and (p.custom_program_id is null && p.custom_quiz_id is null)
 where pp.id = ?

union

 select u.user_name, u.uid as user_id, 3 as load_order,0 as is_custom_quiz,
   date_format(iu.view_time,'%Y-%m-%d') as use_date,
   iu.view_time as view_time,
   0 as answered_correct, 0 as answered_incorrect, 0 as not_answered,
   if (p.custom_program_id is null, concat(td.subj_id, ' ', td.prog_id), concat('CP: ', cp.name)) as program, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, iu.session_number as test_segment, td.test_def_id as test_def_id,
   r.run_id as test_run_id, r.total_sessions as total_sessions,
   if (p.custom_program_id is null, 'Review-', 'Review') as activity, 0 as is_quiz, iu.session_number as session_number,
   pa.prog_inst_id
 from CM_PARALLEL_PROGRAM pp
 join CM_PROGRAM_ASSIGN pa on pa.prog_inst_id = pp.prog_inst_id
 join HA_TEST l on l.user_prog_id = pa.user_prog_id
 JOIN HA_USER u ON u.uid = pa.user_id
 join HA_TEST_RUN r on r.test_id = l.test_id
 join (
     select l.run_id,max(l.lesson_number) as session_number,max(lesson_viewed) as view_time
     from    HA_TEST_RUN_LESSON l
         JOIN HA_TEST_RUN_LESSON_PID p on p.lid = l.id
         JOIN HA_TEST_RUN r on r.run_id = l.run_id
         JOIN HA_TEST t on t.test_id = r.test_id
     where t.user_id in ( $$UID_LIST$$ )
     and l.lesson_viewed is not null
     group by l.run_id, l.lesson_file
 ) iu on iu.run_id = r.run_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id
 left join HA_CUSTOM_PROGRAM cp on cp.id = p.custom_program_id and p.custom_program_id is not null
 where pp.id = ?

 union 

 select u.user_name, u.uid as user_id, 4 as load_order, 1 as is_custom_quiz,
   date_format(r.run_time,'%Y-%m-%d') as use_date,
   l.create_time as view_time,
   r.answered_correct, r.answered_incorrect, r.not_answered,
   if (p.custom_quiz_id is null, concat(td.subj_id, ' ', td.prog_id), concat('CQ: ', q.name)) as program, td.prog_id, td.subj_id, p.test_config_json,
   l.test_id as test_id, iu.session_number as test_segment, td.test_def_id as test_def_id,
   r.run_id as test_run_id, r.total_sessions as total_sessions,
   if (p.custom_quiz_id is null, 'Review-', 'Quiz') as activity, 1 as is_quiz, iu.session_number as session_number,
   pa.prog_inst_id
 from CM_PARALLEL_PROGRAM pp
 join CM_PROGRAM_ASSIGN pa on pa.prog_inst_id = pp.prog_inst_id
 join HA_TEST l on l.user_prog_id = pa.user_prog_id
 JOIN HA_USER u ON u.uid = pa.user_id
 join HA_TEST_RUN r on r.test_id = l.test_id
 left join (
     select l.run_id,max(l.lesson_number) as session_number,max(lesson_viewed) as view_time
     from    HA_TEST_RUN_LESSON l
         JOIN HA_TEST_RUN_LESSON_PID p on p.lid = l.id
         JOIN HA_TEST_RUN r on r.run_id = l.run_id
         JOIN HA_TEST t on t.test_id = r.test_id
     where t.user_id in ( $$UID_LIST$$ )
     and l.lesson_viewed is not null
     group by l.run_id, l.lesson_file
 ) iu on iu.run_id = r.run_id
 join HA_TEST_DEF td on td.test_def_id = l.test_def_id
 join CM_USER_PROGRAM p on p.user_id = u.uid and p.id = l.user_prog_id
 join HA_CUSTOM_QUIZ q on q.qid = p.custom_quiz_id
 where pp.id = ?

) s
order by s.user_name asc, s.user_id asc, s.view_time desc

#####
.key=DELETE_PARALLEL_PROGRAM

delete from CM_PARALLEL_PROGRAM where id = ?

#####
.key=GET_PARALLEL_PROGRAM

select * from CM_PARALLEL_PROGRAM where id = ?


#####
.key=RESET_PREV_MAIN_PROGRAM

update CM_PROGRAM_ASSIGN
set is_current_main_prog = 0
where user_id = ? and is_current_main_prog = 1 and id != ?


#####
.key=RESET_MAIN_PROGRAM

update CM_PROGRAM_ASSIGN
set is_current_main_prog = 0
where user_id = ? and is_current_main_prog = 1

######
# QuizResultsPDFDao

###
.key=INSERT_QUIZ_RESULTS_PDF

INSERT INTO HA_TEST_RUN_RESULTS_PDF
(run_id, pdf, create_date) VALUES(?, ?, now())

.key=SELECT_QUIZ_RESULTS_PDF_BY_RUN_ID
SELECT run_id, create_date, pdf
FROM   HA_TEST_RUN_RESULTS_PDF
WHERE run_id = ?



###############################
# GradeBookDao 
#################################

.key=GET_GRADE_BOOK_DATA

select s.*, if (s.count_entries != 0, round(num_correct * 100 / count_entries), 0) as percent_correct
from (
  select u.uid, u.user_name, cp.id as cp_id, cp.name as cp_name, l.lesson_name, pl.id as pl_id,
         ifnull(x.epp_count, 0) as count_entries, ifnull(sum(a.correct), 0) as num_correct,  sum(if(a.correct is null, 0, 1)) as num_answered
  from HA_USER u
  join HA_CUSTOM_PROGRAM cp on cp.admin_id = u.admin_id and upper(cp.name) like 'HOMEWORK%'
  left outer JOIN CM_USER_PROGRAM p on p.custom_program_id = cp.id and p.user_id = u.uid
  left outer JOIN HA_TEST t on t.user_prog_id = p.id
  left outer JOIN HA_TEST_RUN r on r.test_id = t.test_id
  left outer JOIN HA_TEST_RUN_LESSON l on l.run_id = r.run_id and l.lesson_viewed is not null
  left outer JOIN HA_CUSTOM_PROGRAM_LESSON pl on pl.program_id = cp.id and pl.lesson = l.lesson_name
  left outer join (
      select il.file, count(*) as epp_count
      from inmh_link il
      where il.link_type='cmextra'
      group by il.file) x on x.file = pl.file
  left outer JOIN (
       select ia.run_id, ia.pid, ia.correct, il.file
       from HA_TEST_RUN_WIDGET_INPUT_ANSWERS ia, inmh_link il
       where ia.answer_time >= ?
         and ia.answer_time <= ?
         and il.link_key like concat(ia.pid, '%')
       ) a on a.run_id = r.run_id and a.file = pl.file
  where u.uid in ( $$UID_LIST$$ )
  group by user_name, cp.id, pl.id) s
 
 
  
##############################
# AssignmentDao
##############################
  
.key=GET_ASSIGNMENT_GROUP_INFO
  
select g.id as group_id, g.name, sc.student_count, ifnull(ac.assignment_count,0) as assignment_count
from CM_GROUP g
  join (
        select u.group_id, count(*) as student_count
        from HA_USER u 
        where (is_active = 1 and is_demo = 0 and is_auto_create_template = 0)
        group by u.group_id
        ) sc on sc.group_id = g.id
  left join (
        select a.group_id, count(*) as assignment_count
        from   CM_ASSIGNMENT a
        group by a.group_id
  ) ac on ac.group_id = g.id
where id in ($$UID_LIST$$)
and   g.admin_id > 0
### and   (is_self_reg is null or is_self_reg = 0)
group by group_id
order by g.name


.key=GET_GROUP_ASSIGNMENTS_ALL

select g.id as group_id, g.name as group_name, a.assign_key as assignment_key,a.comments as assignment_name
from CM_GROUP g
    JOIN CM_ASSIGNMENT a on a.group_id = g.id
where admin_id = ?
order by group_name, assignment_name




.key=GET_ASSIGNMENTS_FOR_GROUP

select a.aid, a.assign_key,
       a.group_id,
       a.name,
       a.status,
       Ifnull(problem_count, 0) as problem_count,
       a.comments,
       a.due_date,
       a.close_past_due,
       a.is_graded,
       a.last_modified,
       a.auto_release_grades,
       a.is_personalized,
       a.is_prevent_lesson,
       a.has_specified_users
       
from   CM_ASSIGNMENT a
       left join (select assign_key,
                         Count(*) as problem_count
                  from   CM_ASSIGNMENT_PIDS p
                  group  by assign_key) p
              on p.assign_key = a.assign_key
     
where  a.group_id = ?
order  by a.due_date desc,  last_modified desc 

.key=GET_ASSIGNMENTS_FOR_GROUP_AND_DATE_RANGE

select a.aid, a.assign_key,
       a.group_id,
       a.name,
       a.status,
       Ifnull(problem_count, 0) as problem_count,
       a.comments,
       a.due_date,
       a.close_past_due,
       a.is_graded,
       a.last_modified,
       a.auto_release_grades,
       a.is_personalized,
       a.is_prevent_lesson,
       a.has_specified_users
from   CM_ASSIGNMENT a
       left join (select assign_key,
                         Count(*) as problem_count
                  from   CM_ASSIGNMENT_PIDS p
                  group  by assign_key) p
              on p.assign_key = a.assign_key
where  a.group_id = ?
  and  a.due_date between ? and ?
order  by a.due_date desc, last_modified desc


##
.key=GET_GRADE_BOOK_DATA_3

select u.uid, u.user_name, a.assign_key, a.name, p.id as problem_id, p.label, p.lesson, p.lesson_file, p.pid, p.ordinal_number,
       ifnull(s.status, 'Not viewed') as status, 
       
       # q.correct, q.id, q.answer, ifnull(q.create_datetime,s.modify_datetime) as update_datetime,
       
       
       w.has_show_work, w2.has_show_work_admin,
       s.is_graded as is_problem_graded, ua.is_graded as is_student_graded

from CM_ASSIGNMENT a 
join HA_USER u on (u.group_id = a.group_id and u.admin_id = a.aid)
join v_ASSIGNMENT_USERS au on (au.assign_key = a.assign_key and au.uid = u.uid)
join CM_ASSIGNMENT_PIDS p on p.assign_key=a.assign_key

left join CM_ASSIGNMENT_PID_STATUS s on s.assign_key=a.assign_key and s.pid=p.pid and s.uid=u.uid

#left join (
#    select pa.assign_key, pa.pid, pa.user_id, pa.correct, pa.id, pa.create_datetime, pa.answer
#    from CM_ASSIGNMENT_PID_ANSWERS pa
#    where assign_key = ?
#      and pa.id in (select l.max_id
#                    from (select pa.assign_key, pa.pid, pa.user_id, max(pa.id) as max_id
#                          from CM_ASSIGNMENT_PID_ANSWERS pa
#                          where assign_key = ?
#                          group by pa.user_id, pa.assign_key, pa.pid) l
#                   )
#    ) q on q.assign_key=a.assign_key and q.pid=p.pid and q.user_id=u.uid

left join (
    select user_id, pid,count(*),1 as has_show_work
    from CM_ASSIGNMENT_PID_WHITEBOARD 
    where assign_key = ?
    and is_admin = 0
    group by user_id,pid
    ) w on w.pid = p.pid and w.user_id = u.uid
            

left join (
    select user_id, pid,count(*),1 as has_show_work_admin
    from CM_ASSIGNMENT_PID_WHITEBOARD 
    where assign_key = ?
    and is_admin = 1
    group by user_id,pid
    ) w2 on w2.pid = p.pid and w2.user_id = u.uid
    
left join CM_ASSIGNMENT_USER ua on ua.assign_key = a.assign_key and ua.uid = u.uid

where a.assign_key = ?
and   (u.is_active = 1 and u.is_auto_create_template = 0)

order by u.user_name, problem_id





  
##
.key=GET_ASSIGNMENT_WORK_FOR_STUDENT

select distinct u.uid, u.user_name, a.assign_key, a.name, p.id as problem_id, p.label, p.lesson, p.lesson_file, p.pid, p.ordinal_number,
       ifnull(s.status, 'Not viewed') as status, q.correct, q.id, q.answer,
       ifnull(q.create_datetime,s.modify_datetime) as update_datetime,
       ifnull(s.is_graded, 0) as is_graded, ifnull(xu.is_graded, 0) assignment_graded
from HA_USER u
join  CM_ASSIGNMENT a on a.assign_key in
   (select distinct x.assign_key from CM_ASSIGNMENT x
    where ((au.assign_key is not null and x.assign_Key = au.assign_key) or x.group_id = u.group_id) and a.due_date between ? and ?)
join CM_ASSIGNMENT_PIDS p on p.assign_key=a.assign_key
left join CM_ASSIGNMENT_USER au on au.uid = u.uid
left join CM_ASSIGNMENT_PID_STATUS s on s.assign_key=a.assign_key and s.pid=p.pid and s.uid=u.uid
left join (
    select pa.assign_key, pa.pid, pa.user_id, max(pa.id) as max_id
    from CM_ASSIGNMENT_PID_ANSWERS pa
    where pa.user_id = ?
    group by pa.user_id, pa.assign_key, pa.pid ) l
    on l.assign_key=a.assign_key and l.pid=p.pid and l.user_id=u.uid
left join (
    select pa.assign_key, pa.pid, pa.user_id, pa.correct, pa.id, pa.create_datetime, pa.answer
    from CM_ASSIGNMENT_PID_ANSWERS pa
    where pa.user_id = ?) q
    on q.id=l.max_id
left join CM_ASSIGNMENT_USER xu on xu.uid = u.uid and xu.assign_key = a.assign_key
where u.uid = ?
order by a.assign_key, problem_id
  
  
.key=GET_STUDENT_ASSIGNMENT_PROBLEM_STATUSES

select p.*, w.has_show_work, w2.has_show_work_admin, au.is_graded as assignment_is_graded
from   CM_ASSIGNMENT_PID_STATUS p
       left join (select pid, 1 as has_show_work,
                         Count(*)
                  from   CM_ASSIGNMENT_PID_WHITEBOARD
                  where  assign_key = ?
                         and user_id = ?
                  group  by pid) w
              on w.pid = p.pid
       left join (select pid, 1 as has_show_work_admin,
                         Count(*)
                  from   CM_ASSIGNMENT_PID_WHITEBOARD
                  where  assign_key = ?
                         and user_id = ?
                         and is_admin = 1
                  group  by pid) w2
              on w2.pid = p.pid
       left join CM_ASSIGNMENT_USER au on au.assign_key = p.assign_key and au.uid = p.uid    
              
where  p.assign_key = ?
       and p.uid = ?

       
       
.key=GET_STUDENT_ASSIGNMENTS

select  due_date < now() as is_expired,
a.status, a.due_date,a.assign_key,a.comments, 
au.is_graded, ps.cnt_submitted, ap.cnt_problems, au.turn_in_date
from   HA_USER u join CM_GROUP g on g.id = u.group_id 
    join CM_ASSIGNMENT a on a.group_id = u.group_id
    left JOIN (
        select assign_key,  count(*) as cnt_problems
        from    CM_ASSIGNMENT_PIDS
        group by assign_key
    ) ap on ap.assign_key = a.assign_key 
    left JOIN (
        select assign_key,  uid,  count(*) as cnt_submitted
        from    CM_ASSIGNMENT_PID_STATUS
        where status not in ('Viewed','Not Viewed')
        group by assign_key, uid
    ) ps on ps.assign_key = a.assign_key and ps.uid = u.uid
    left join CM_ASSIGNMENT_USER au on (au.assign_key = a.assign_key and au.uid = u.uid)
where  u.uid = ?
and a.status <> 'Draft'
order by is_expired, a.due_date desc


.key=GET_COMPLETED_ASSIGNMENTS_IN_DATE_RANGE

SELECT au.uid, u.user_name, due_date < now() as is_expired,
       a.status, a.due_date, a.assign_key, a.comments, 
       au.is_graded, ps.cnt_submitted, ap.cnt_problems, au.turn_in_date
FROM   CM_ASSIGNMENT_USER au
JOIN   CM_ASSIGNMENT a ON a.assign_key = au.assign_key
JOIN   HA_USER u on u.uid = au.uid
LEFT JOIN (
       SELECT assign_key,  count(*) as cnt_problems
       FROM   CM_ASSIGNMENT_PIDS
       GROUP BY assign_key
    ) ap on ap.assign_key = a.assign_key 
LEFT JOIN (
       SELECT assign_key, uid, count(*) as cnt_submitted
       FROM   CM_ASSIGNMENT_PID_STATUS
       WHERE status NOT IN ('Viewed','Not Viewed')
         AND uid = ?
       GROUP BY assign_key, uid
    ) ps ON ps.assign_key = a.assign_key AND ps.uid = au.uid
WHERE au.uid = ?
  AND a.due_date between ? AND ?
  AND au.is_graded = 1
ORDER BY is_expired, a.due_date desc


.key=COMPLETED_ASSIGNMENT_GRADES_IN_DATE_RANGE

SELECT u.uid, u.user_name, au.assign_key, ap.num_problems, ps.assign_key, ps.uid, ps.num_correct, ps.num_halfcredit, (ap.num_problems - ps.num_correct - ps.num_halfcredit) as num_incorrect
FROM  CM_ASSIGNMENT_USER au
JOIN CM_ASSIGNMENT a  on au.assign_key = a.assign_key
JOIN (
       SELECT assign_key,  count(*) as num_problems
       FROM   CM_ASSIGNMENT_PIDS
       GROUP BY assign_key
    ) ap ON ap.assign_key = au.assign_key
JOIN (
       SELECT assign_key,  uid, sum(if((status='correct'),1,0)) as num_correct, sum(if((status='half credit'),1,0)) as num_halfcredit
       FROM   CM_ASSIGNMENT_PID_STATUS
       GROUP BY assign_key, uid
    ) ps ON ps.assign_key = au.assign_key AND ps.uid = au.uid
JOIN HA_USER u on u.uid = au.uid
WHERE au.is_graded = 1
  AND au.uid in ( $$UID_LIST$$ )
  AND a.due_date BETWEEN ? AND ?
ORDER BY upper(u.user_name), au.assign_key




.key=GET_ASSIGNMENT

select * from CM_ASSIGNMENT where assign_key = ?

       
       

#
# Save INMH usage

.key=INSERT_INMH_USE

insert into HA_TEST_RUN_INMH_USE (run_id, item_type, item_file, view_time, session_number)
 values(?,?,?,?,?)
 
.key=COUNT_PRACTICE_INMH_USE

select count(*)
from HA_TEST_RUN_INMH_USE
where run_id = ?
  and item_file = ?
  and item_type = 'practice'
  
  
.key=TUTOR_WIDGET_ANSWER_PERCENT

SELECT a.pid, a.correct, min(a.answer_time) as answer_time
  FROM   HA_TEST t
  JOIN   HA_TEST_RUN r ON r.test_id = t.test_id
  JOIN   HA_TEST_RUN_WIDGET_INPUT_ANSWERS a
    ON   a.run_id = r.run_id
  WHERE  t.user_id = ?
  GROUP  BY a.pid
  ORDER  BY a.pid
  
.key=TUTOR_WIDGET_ANSWER_PERCENT_FOR_DATE_RANGE

SELECT a.pid, a.correct, min(a.answer_time) as answer_time
  FROM   HA_TEST t
  JOIN   HA_TEST_RUN r ON r.test_id = t.test_id
  JOIN   HA_TEST_RUN_WIDGET_INPUT_ANSWERS a
    ON   a.run_id = r.run_id
  WHERE  t.user_id = ?
    AND  r.run_time between ? and ?
  GROUP  BY a.pid
  ORDER  BY a.pid
  
.key=GLOBAL_CONTEXT_PIDS_TO_PROCESS
  
select pid 
from SOLUTION_DYNAMIC 
where global_context_created is null
or global_context_created < date(now())
order by pid

####
.key=GET_LESSON_FOR_PID

SELECT DISTINCT im.title as lesson, im.file as lesson_file
  FROM  inmh_map im
 WHERE  im.guid = ?
ORDER BY im.title 

####
.key=GET_LESSON_FOR_PID_LIST

SELECT DISTINCT im.title as lesson, im.file as lesson_file
  FROM  inmh_map im
 WHERE  im.guid in ($$PID_LIST$$)
ORDER BY im.title 

 
.key=ASSIGNMENT_WHITEBOARD
 
 select * 
 from CM_ASSIGNMENT_PID_WHITEBOARD 
 where user_id = ? 
 and assign_key = ? 
 and pid = ? 
 and command_data is not null 
 order by insert_time_mills
 
 
 
.key=ASSIGNMENT_UNREAD_ANNOTATED_PROBLEMS
 ## find number of pids that have admin annotations
 ## that have not been seen yet.
 
select w.assign_key, w.pid,count(*)
from  CM_ASSIGNMENT a
    JOIN CM_ASSIGNMENT_PID_WHITEBOARD w on (w.assign_key = a.assign_key)
    JOIN CM_ASSIGNMENT_PIDS p on (p.assign_key = a.assign_key)
    LEFT JOIN CM_ASSIGNMENT_PID_STATUS s on (s.uid = w.user_id and s.pid = p.pid)
where    w.user_id = ?
and      w.pid = p.pid
and      w.is_admin = 1
and      s.assign_key = w.assign_key
and      s.pid = w.pid
and    w.write_datetime > s.access_datetime
group by w.assign_key, w.pid


 
 
.key=STUDENT_ASSIGNMENT_STATUS
## Get the status of all student's assignments
 
select a.status, count(*) as cnt
from HA_USER u
   JOIN CM_GROUP g on g.id = u.group_id
  JOIN CM_ASSIGNMENT a on a.group_id = u.group_id
  LEFT JOIN CM_ASSIGNMENT_USER au on au.uid = u.uid and au.assign_key = a.assign_key
where u.uid = ?
and a.status != 'Draft'
and  au.turn_in_date is null
and (au.is_graded is null or au.is_graded = 0)
$$STUDENT_ASSIGN_KEYS$$
group by a.status



.key=STUDENT_ASSIGNMENT_LAST_MODIFIED
## The last time any assignment was updated
select max(last_modified) as max_last_modified
from CM_ASSIGNMENT a
  JOIN CM_ASSIGNMENT_USER ca
     ON ca.assign_key = a.assign_key
where ca.uid = ?


.key=GET_ASSIGNMENTS_GRADED_INFO

select  ai.num_students_graded, ag.num_students_in_group, us.num_students_specified
FROM CM_ASSIGNMENT a
left join ( select u.group_id, assign_key, count(*) as num_students_graded
                from CM_ASSIGNMENT_USER au 
                   JOIN HA_USER u on u.uid = au.uid
                where   au.is_graded = 1
                and u.is_active = 1
                and is_auto_create_template = 0
                group by u.group_id, assign_key
          ) ai on (ai.assign_key = a.assign_key and ai.group_id = a.group_id)
         left join(
               select admin_id, group_id, count(*) as num_students_in_group
                from HA_USER u
                where is_auto_create_template = 0
                and   is_active = 1
                group by admin_id, group_id
           ) ag on (ag.group_id = a.group_id and ag.admin_id = a.aid)
         left join(
               select assign_key, count(*) as num_students_specified
                from CM_ASSIGNMENT_USERS_SPECIFIED
                group by assign_key
           ) us on us.assign_key = a.assign_key
where  a.assign_key = ?



.key=GET_STUDENT_ASSIGNMENT_SCORE

select a.assign_key, p.pid, s.status
from  CM_ASSIGNMENT a
  join CM_ASSIGNMENT_PIDS p on p.assign_key = a.assign_key
  left join CM_ASSIGNMENT_PID_STATUS s on s.assign_key = a.assign_key and s.pid = p.pid
where s.uid = ?
and a.assign_key = ?


.key=RELEASE_ASSIGNMENT_GRADE

select uid 
from HA_USER 
where group_id = ? 
and is_active = 1
and is_auto_create_template = 0



.key=GET_COUNT_UNGRADED_WHITEBOARD_PROBLEMS

select count(distinct ps.uid)
from CM_ASSIGNMENT a
  JOIN CM_ASSIGNMENT_PID_STATUS ps on ps.assign_key  = a.assign_key
where a.assign_key = ?
and ps.status = 'Submitted'

# # # # # # # # # # # # #
# Common Core Standards

###
.key=STUDENT_CCSS_ORDER_BY

ORDER BY lesson_name ASC, standard_name_new ASC

###
.key=GET_CORRECT_QUIZ_CCSS_NAMES_FOR_STUDENT

SELECT distinct user_id, im.title as lesson_name, ins.standard_name_new
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_RESULTS trr
  ON trr.run_id = tr.run_id AND upper(trr.answer_status)='CORRECT'
JOIN inmh_map im
  ON im.guid = trr.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = im.file
WHERE t.user_id = ?
  AND tr.run_time BETWEEN ? AND ?

###
.key=GET_REVIEW_CCSS_NAMES_FOR_STUDENT

SELECT distinct user_id, rl.lesson_name, ins.standard_name_new
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_LESSON rl
  ON rl.run_id = tr.run_id AND rl.date_completed is not null
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = rl.lesson_file
WHERE t.user_id = ?
  AND rl.date_completed BETWEEN ? AND ?

###
.key=GET_ASSIGNMENT_CCSS_NAMES_FOR_STUDENT

SELECT distinct uid as user_id, ap.lesson as lesson_name, ins.standard_name_new
FROM CM_ASSIGNMENT_USER au
JOIN CM_ASSIGNMENT a
  ON au.assign_key = a.assign_key
JOIN CM_ASSIGNMENT_PID_ANSWERS pa
  ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
JOIN CM_ASSIGNMENT_PIDS ap
  ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
WHERE au.uid = ?
  AND au.is_graded = 1
  AND a.due_date BETWEEN ? AND ?

###
.key=GET_ALL_CCSS_NAMES_FOR_STUDENT_WITH_DATE

SELECT distinct user_id, im.title as lesson_name, ins.standard_name_new, 'QUIZ' as usage_type,
       date_format(tr.run_time,'%Y-%m-%d') as usage_date
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_RESULTS trr
  ON trr.run_id = tr.run_id AND upper(trr.answer_status)='CORRECT'
JOIN inmh_map im
  ON im.guid = trr.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = im.file
WHERE t.user_id in ( $$UID_LIST$$ )
  AND tr.run_time BETWEEN ? AND ?
UNION
SELECT distinct user_id, rl.lesson_name, ins.standard_name_new, 'LESSON' as usage_type,
       date_format(rl.date_completed,'%Y-%m-%d') as usage_date
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_LESSON rl
  ON rl.run_id = tr.run_id AND rl.date_completed is not null
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = rl.lesson_file
WHERE t.user_id in ( $$UID_LIST$$ )
  AND rl.date_completed BETWEEN ? AND ?
UNION
SELECT distinct uid as user_id, ap.lesson as lesson_name, ins.standard_name_new, 'ASSIGNMENT' as usage_type,
       date_format(a.due_date,'%Y-%m-%d') as usage_date
FROM CM_ASSIGNMENT_USER au
JOIN CM_ASSIGNMENT a
  ON au.assign_key = a.assign_key
JOIN CM_ASSIGNMENT_PID_ANSWERS pa
  ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
JOIN CM_ASSIGNMENT_PIDS ap
  ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
WHERE au.uid in ( $$UID_LIST$$ )
  AND au.is_graded = 1
  AND a.due_date BETWEEN ? AND ?
ORDER BY usage_date, usage_type

###
.key=GET_CCSS_COUNTS_FOR_STUDENT

SELECT s.user_id, u.user_name, s.usage_count, s.usage_type
FROM (
  SELECT s1.user_id, count(*) as usage_count, 'QUIZ' as usage_type
  FROM (
    SELECT distinct user_id, im.title as lesson_name, ins.standard_name_new
    FROM HA_TEST t
    JOIN HA_TEST_RUN tr
      ON tr.test_id = t.test_id
    JOIN HA_TEST_RUN_RESULTS trr
      ON trr.run_id = tr.run_id AND trr.answer_status='CORRECT'
    JOIN inmh_map im
      ON im.guid = trr.pid
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ins.topic = im.file
   WHERE t.user_id in ( $$UID_LIST$$ )
     AND tr.run_time BETWEEN ? AND ?
  ) s1
  GROUP BY s1.user_id
  UNION
  SELECT s2.user_id, count(*) as usage_count, 'LESSON' as usage_type
  FROM (
    SELECT distinct user_id, rl.lesson_name, ins.standard_name_new, 'LESSON' as usage_type
    FROM HA_TEST t
    JOIN HA_TEST_RUN tr
      ON tr.test_id = t.test_id
    JOIN HA_TEST_RUN_LESSON rl
      ON rl.run_id = tr.run_id AND rl.date_completed is not null
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ins.topic = rl.lesson_file
   WHERE t.user_id in ( $$UID_LIST$$ )
     AND rl.date_completed BETWEEN ? AND ?
  ) s2
  GROUP BY s2.user_id
  UNION
  SELECT s3.user_id, count(*) as usage_count, 'ASSIGNMENT' as usage_type
  FROM (
    SELECT distinct uid as user_id, ap.lesson as lesson_name, ins.standard_name_new, 'ASSIGNMENT' as usage_type
    FROM CM_ASSIGNMENT_USER au
    JOIN CM_ASSIGNMENT a
      ON au.assign_key = a.assign_key
    JOIN CM_ASSIGNMENT_PID_ANSWERS pa
      ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
    JOIN CM_ASSIGNMENT_PIDS ap
      ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
   WHERE au.uid in ( $$UID_LIST$$ )
     AND au.is_graded = 1
     AND a.due_date BETWEEN ? AND ?
   ) s3
   GROUP BY s3.user_id
 ) s,
HA_USER u
WHERE u.uid = s.user_id
ORDER BY u.uid, s.usage_type

###
.key=GET_CCSS_NAMES_FOR_STUDENT

SELECT distinct s.user_id, s.lesson_name, s.standard_name_new, s.usage_type
FROM (
SELECT user_id, im.title as lesson_name, ins.standard_name_new, 'QUIZ' as usage_type
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_RESULTS trr
  ON trr.run_id = tr.run_id AND upper(trr.answer_status)='CORRECT'
JOIN inmh_map im
  ON im.guid = trr.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = im.file
WHERE t.user_id in ( $$UID_LIST$$ )
  AND tr.run_time BETWEEN ? AND ?
UNION
SELECT user_id, rl.lesson_name, ins.standard_name_new, 'LESSON' as usage_type
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_LESSON rl
  ON rl.run_id = tr.run_id AND rl.date_completed is not null
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = rl.lesson_file
WHERE t.user_id in ( $$UID_LIST$$ )
  AND rl.date_completed BETWEEN ? AND ?
UNION
SELECT uid as user_id, ap.lesson as lesson_name, ins.standard_name_new, 'ASSIGNMENT' as usage_type
FROM CM_ASSIGNMENT_USER au
JOIN CM_ASSIGNMENT a
  ON au.assign_key = a.assign_key
JOIN CM_ASSIGNMENT_PID_ANSWERS pa
  ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
JOIN CM_ASSIGNMENT_PIDS ap
  ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
WHERE au.uid in ( $$UID_LIST$$ )
  AND au.is_graded = 1
  AND a.due_date BETWEEN ? AND ?
  ) s
ORDER BY user_id, lesson_name, standard_name_new, usage_type

###
.key=GET_CCSS_NAMES_FOR_STUDENT_AND_LEVEL

SELECT distinct s.user_id, s.lesson_name, s.standard_name_new, s.sequence_num, s.usage_type
FROM (
SELECT user_id, im.title as lesson_name, ins.standard_name_new, ccs.sequence_num, 'QUIZ' as usage_type
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_RESULTS trr
  ON trr.run_id = tr.run_id AND upper(trr.answer_status)='CORRECT'
JOIN inmh_map im
  ON im.guid = trr.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = im.file
JOIN common_core_standards ccs
  ON ccs.level_name = ? AND ccs.standard_name_new = ins.standard_name_new
WHERE t.user_id in ( $$UID_LIST$$ )
  AND tr.run_time BETWEEN ? AND ?
UNION
SELECT user_id, rl.lesson_name, ins.standard_name_new, ccs.sequence_num, 'LESSON' as usage_type
FROM HA_TEST t
JOIN HA_TEST_RUN tr
  ON tr.test_id = t.test_id
JOIN HA_TEST_RUN_LESSON rl
  ON rl.run_id = tr.run_id AND rl.date_completed is not null
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ins.topic = rl.lesson_file
JOIN common_core_standards ccs
  ON ccs.level_name = ? AND ccs.standard_name_new = ins.standard_name_new
WHERE t.user_id in ( $$UID_LIST$$ )
  AND rl.date_completed BETWEEN ? AND ?
UNION
SELECT uid as user_id, ap.lesson as lesson_name, ins.standard_name_new, ccs.sequence_num, 'ASSIGNMENT' as usage_type
FROM CM_ASSIGNMENT_USER au
JOIN CM_ASSIGNMENT a
  ON au.assign_key = a.assign_key
JOIN CM_ASSIGNMENT_PID_ANSWERS pa
  ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
JOIN CM_ASSIGNMENT_PIDS ap
  ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
JOIN inmh_standard ins
  ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
JOIN common_core_standards ccs
  ON ccs.level_name = ? AND ccs.standard_name_new = ins.standard_name_new
WHERE au.uid in ( $$UID_LIST$$ )
  AND au.is_graded = 1
  AND a.due_date BETWEEN ? AND ?
  ) s
ORDER BY user_id, sequence_num, standard_name_new, usage_type


###
.key=GET_CCSS_COUNTS_FOR_GROUP

SELECT count(*) as student_count, t.standard_name_new as standard_name
FROM (
  SELECT DISTINCT s.uid, s.standard_name_new
  FROM (
    SELECT u.uid, ins.standard_name_new
    FROM HA_USER u
    JOIN HA_TEST t
      ON t.user_id = u.uid
    JOIN HA_TEST_RUN tr
      ON tr.test_id = t.test_id
    JOIN HA_TEST_RUN_RESULTS trr
      ON trr.run_id = tr.run_id AND upper(trr.answer_status)='CORRECT'
    JOIN inmh_map im
      ON im.guid = trr.pid
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ins.topic = im.file
    WHERE u.admin_id = ? 
      AND u.group_id = ?
      AND u.is_active = 1
      AND u.is_auto_create_template = 0
      AND tr.run_time BETWEEN ? AND ?
    UNION
    SELECT u.uid, ins.standard_name_new
    FROM HA_USER u
    JOIN HA_TEST t
      ON t.user_id = u.uid
    JOIN HA_TEST_RUN tr
      ON tr.test_id = t.test_id
    JOIN HA_TEST_RUN_LESSON rl
      ON rl.run_id = tr.run_id AND rl.date_completed is not null
    JOIN inmh_standard ins
      ON ins.standard_state = 'COMMON' AND ins.topic = rl.lesson_file
    WHERE u.admin_id = ? 
      AND u.group_id = ?
      AND u.is_active = 1
      AND u.is_auto_create_template = 0
      AND rl.date_completed BETWEEN ? AND ?
    UNION
    SELECT u.uid, ins.standard_name_new
    FROM HA_USER u
    JOIN CM_ASSIGNMENT_USER au
      ON au.uid = u.uid AND au.is_graded = 1
    JOIN CM_ASSIGNMENT a
      ON au.assign_key = a.assign_key
    JOIN CM_ASSIGNMENT_PID_ANSWERS pa
      ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
    JOIN CM_ASSIGNMENT_PIDS ap
      ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
    WHERE u.admin_id = ? 
      AND u.group_id = ?
      AND u.is_active = 1
      AND u.is_auto_create_template = 0
      AND a.due_date BETWEEN ? AND ?
  ) s
  ORDER BY s.standard_name_new
) t
GROUP BY t.standard_name_new
ORDER BY student_count desc, standard_name asc

####
.key=GET_CCSS_LEVEL_COUNTS_FOR_STUDENT

SELECT s.user_id, s.level_name, count(*) as level_count
FROM (
    SELECT distinct user_id, c.level_name, ins.standard_name_new
    FROM HA_TEST t
    JOIN HA_TEST_RUN tr
      ON tr.test_id = t.test_id
    JOIN HA_TEST_RUN_RESULTS trr
      ON trr.run_id = tr.run_id AND trr.answer_status='CORRECT'
    JOIN inmh_map im
      ON im.guid = trr.pid
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ins.topic = im.file
    JOIN common_core_standards c
      ON c.standard_name_new = ins.standard_name_new
   WHERE t.user_id in ( $$UID_LIST$$ )
     AND tr.run_time BETWEEN ? AND ?
  UNION
    SELECT distinct user_id, c.level_name, ins.standard_name_new
    FROM HA_TEST t
    JOIN HA_TEST_RUN tr
      ON tr.test_id = t.test_id
    JOIN HA_TEST_RUN_LESSON rl
      ON rl.run_id = tr.run_id AND rl.date_completed is not null
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ins.topic = rl.lesson_file
   JOIN common_core_standards c
     ON c.standard_name_new = ins.standard_name_new
   WHERE t.user_id in ( $$UID_LIST$$ )
     AND rl.date_completed BETWEEN ? AND ?
  UNION
    SELECT distinct uid as user_id, c.level_name, ins.standard_name_new
    FROM CM_ASSIGNMENT_USER au
    JOIN CM_ASSIGNMENT a
      ON au.assign_key = a.assign_key
    JOIN CM_ASSIGNMENT_PID_ANSWERS pa
      ON pa.assign_key = au.assign_key AND pa.user_id = au.uid AND pa.answer IS NOT null
    JOIN CM_ASSIGNMENT_PIDS ap
      ON ap.assign_key = a.assign_key AND ap.pid = pa.pid
    JOIN inmh_standard ins
      ON standard_state = 'COMMON' AND ap.lesson_file = ins.topic
   JOIN common_core_standards c
     ON c.standard_name_new = ins.standard_name_new
   WHERE au.uid in ( $$UID_LIST$$ )
     AND au.is_graded = 1
     AND a.due_date BETWEEN ? AND ?
 ) s
GROUP BY s.user_id, s.level_name
ORDER BY s.user_id, s.level_name

####
.key=GET_CCSS_LEVEL_COUNTS

SELECT c.level_name, count(*) as level_count
FROM   common_core_standards c
JOIN   inmh_standard ins
  ON   ins.standard_name_new = c.standard_name_new
GROUP BY c.level_name

####
## NOTE: make sure there is an index on HA_PROGRAM_LESSONS_static(file)
##
.key=GET_CCSS_DATA

SELECT distinct ccs.standard_name as original_name, ccs.standard_name_new as name, ccs.level_name, ccs.domain_name, ccs.summary, ccs.description,
       pl.file, pl.lesson
  FROM common_core_standards ccs
  JOIN inmh_standard ins
    ON upper(ins.standard_state) = 'COMMON' AND ins.standard_name_new = ccs.standard_name_new
  JOIN HA_PROGRAM_LESSONS_static pl
    ON pl.file = ins.topic
ORDER BY ccs.standard_name_new ASC

####
.key=GET_CCSS_LEVEL_NAMES

SELECT DISTINCT level_name FROM common_core_standards

####
.key=GET_CCSS_NAMES_FOR_LEVEL

SELECT DISTINCT standard_name_new, sequence_num
FROM common_core_standards
WHERE level_name = ?
ORDER BY standard_name_new ASC

 
####
.key=GET_CCSS_NAMES_FOR_LEVEL_WITH_COVERAGE

SELECT DISTINCT ccs.standard_name_new, ccs.sequence_num
FROM common_core_standards ccs
JOIN inmh_standard ins
  ON ins.standard_name_new = ccs.standard_name_new
WHERE level_name = ?
ORDER BY ccs.standard_name_new ASC

 
#### 
.key=GET_CCSS_DETAIL

SELECT ccs.standard_name as original_name, ccs.standard_name_new as name, ccs.level_name, ccs.domain_name, ccs.summary, ccs.description
FROM   common_core_standards ccs
WHERE  ccs.standard_name_new in ( $$NAME_LIST$$ )
order by ccs.standard_name_new

####
.key=GET_CCSS_COVERAGE_FOR_ASSIGNMENT

SELECT DISTINCT im.title as lesson, ccs.standard_name_new
  FROM   CM_ASSIGNMENT_PIDS cap
  JOIN   inmh_map im
    ON   im.guid = cap.pid
  JOIN   inmh_standard ins
    ON   ins.topic = im.file
  JOIN   common_core_standards ccs
    ON   ccs.standard_name_new = ins.standard_name_new
 WHERE   cap.assign_key = ?
 ORDER BY im.title, ccs.standard_name_new

####
.key=GET_PIDS_FOR_ASSIGNMENT

SELECT   pid
  FROM   CM_ASSIGNMENT_PIDS cap
 WHERE   cap.assign_key = ?

####
.key=GET_CCSS_COVERAGE_FOR_CUSTOM_PROG

SELECT DISTINCT cp.lesson, ccs.standard_name_new
  FROM   HA_CUSTOM_PROGRAM_LESSON cp
  JOIN   inmh_standard ins
    ON   ins.topic = cp.file
  JOIN   common_core_standards ccs
    ON   ccs.standard_name_new = ins.standard_name_new
 WHERE   cp.program_id = ?
 ORDER BY cp.lesson, ccs.standard_name_new

####
.key=GET_CCSS_COVERAGE_FOR_CUSTOM_QUIZ

SELECT DISTINCT im.title as lesson, ccs.standard_name_new
  FROM   HA_CUSTOM_QUIZ_IDS cq
  JOIN   inmh_map im
    ON   im.guid = cq.pid
  JOIN   inmh_standard ins
    ON   ins.topic = im.file
  JOIN   common_core_standards ccs
    ON   ccs.standard_name_new = ins.standard_name_new
 WHERE   cq.qid = ?
 ORDER BY im.title, ccs.standard_name_new

####
.key=GET_CCSS_COVERAGE_FOR_LESSON

SELECT DISTINCT ccs.standard_name_new, pl.lesson
 FROM   inmh_standard ins
 JOIN   HA_PROGRAM_LESSONS_static pl
   ON   pl.file = ins.topic 
 JOIN   common_core_standards ccs
   ON   ccs.standard_name_new = ins.standard_name_new
WHERE   ins.topic = ?
ORDER BY ccs.standard_name_new

####
.key=GET_CCSS_COVERAGE_FOR_LESSONS

SELECT DISTINCT ccs.standard_name_new, pl.lesson
 FROM   inmh_standard ins
 JOIN   HA_PROGRAM_LESSONS_static pl
   ON   pl.file = ins.topic 
 JOIN   common_core_standards ccs
   ON   ccs.standard_name_new = ins.standard_name_new
WHERE   ins.topic in ($$FILE_LIST$$)
ORDER BY ccs.standard_name_new

####
.key=GET_CCSS_COVERAGE_FOR_PID

SELECT DISTINCT im.title as lesson, ccs.standard_name_new
 FROM   inmh_map im
 JOIN   inmh_standard ins
   ON   ins.topic = im.file
 JOIN   common_core_standards ccs
   ON   ccs.standard_name_new = ins.standard_name_new
WHERE   im.guid = ?
ORDER BY im.title

####
.key=GET_CCSS_DETAIL_FOR_ASSIGNMENT

SELECT DISTINCT ccs.standard_name as original_name, ccs.standard_name_new as name, ccs.level_name, ccs.domain_name, ccs.summary, ccs.description
 FROM   CM_ASSIGNMENT_PIDS cap
 JOIN   inmh_standard ins
   ON   ins.topic = cap.lesson_file 
 JOIN   common_core_standards ccs
   ON   ccs.standard_name_new = ins.standard_name_new
WHERE   cap.assign_key = ?
ORDER BY ccs.standard_name_new

##
## Delete a single command in a whiteboard
.key=DELETE_WHITEBOARD_ROW

delete from HA_TEST_RUN_WHITEBOARD 
where whiteboard_id in (
    select whiteboard_id
    from (
        select whiteboard_id
        from HA_TEST_RUN_WHITEBOARD
       where user_id = ? 
       and run_id = ? 
       and pid = ?
       order by whiteboard_id
       limit ?, 1
    ) x1
);   



.key=DELETE_WHITEBOARD_ROW_ASSIGNMENT

delete 
from CM_ASSIGNMENT_PID_WHITEBOARD
where  whiteboard_id in (
       select whiteboard_id
       from (
           select whiteboard_id
           from  CM_ASSIGNMENT_PID_WHITEBOARD
           where user_id = ?
           and assign_key = ?
          and pid = ?
          order by whiteboard_id 
          limit ?,1
        ) x1
);     




.key=DEBUG_GET_WHITEBOARD_TEST

#select whiteboard_id, user_id, run_id, pid 
#from junk 
#where is_tested = 0 
#order by whiteboard_id 
#limit 1

## random testing
#select whiteboard_id, user_id, run_id, pid 
#from junk 
#order by rand() 
#limit 1

## repeatable test
##
select whiteboard_id, user_id, run_id, pid 
from junk 
where is_tested = 0
order by whiteboard_id  
limit 1




.key=GET_STUDENT_PIDS
## Return pids used by assignment for a given user
## note the use of is_personalized to either choose all
## pids assigned by admin, or personalized versions.

select cp.pid, cp.pid as pid_real, cp.label, cp.lesson, cp.ordinal_number, cp.lesson_file, cp.ordinal_number as ordinal
from   CM_ASSIGNMENT a
   JOIN CM_ASSIGNMENT_PIDS cp on cp.assign_key = a.assign_key
where a.assign_key = ?
and is_personalized = 0

union 


select pu.pid, cp.pid as pidReal, cp.label, cp.lesson, cp.ordinal_number, cp.lesson_file, cp.ordinal_number as ordinal
from   CM_ASSIGNMENT a
   JOIN CM_ASSIGNMENT_PIDS cp on cp.assign_key = a.assign_key
   LEFT JOIN CM_ASSIGNMENT_PIDS_USER pu on pu.apid_id = cp.id
where a.assign_key = ?
and uid = ?
and is_personalized = 1

order by ordinal



## NOTE: JOIN_GET_PIDS is created in code
## and is made up of one of the two sql fragments
## following this one.
.key=ASSIGNMENT_PID_ANSWER_STATUS
## all pids in assignment and count of correct/incorrect

select p_.pid, uc.cnt_students, cp.cnt_correct, hp.cnt_half_credit, 
concat(CAST( (ifnull(hp.cnt_half_credit, 0) + ifnull(cp.cnt_correct, 0)) / cnt_students * 100 as unsigned), '%') as correct_percent
from HA_USER u
   JOIN CM_ASSIGNMENT a
       on a.group_id = u.group_id
       
     JOIN (
         select a.assign_key, count(*) as cnt_students
         from HA_USER u
           JOIN CM_ASSIGNMENT a on a.group_id = u.group_id
           JOIN v_ASSIGNMENT_USERS ua on (ua.assign_key = a.assign_key and ua.uid = u.uid)
         where a.assign_key = ?
         group by assign_key
     ) uc on uc.assign_key = a.assign_key
     
            
   $$JOIN_GET_PIDS$$
       
   LEFT JOIN CM_ASSIGNMENT_PID_STATUS ps
       on ps.assign_key = a.assign_key and ps.pid = p.pid
   LEFT JOIN (
         $$GET_PID_STATUS_QUERY$$   
   )  cp on cp.assign_key = a.assign_key and cp.pid = p.pid and cp.uid = u.uid
   LEFT JOIN (
        select assign_key, pid, count(*) / 2 as cnt_half_credit
        from   CM_ASSIGNMENT_PID_STATUS
        where status = 'Half Credit'
        and assign_key = ?
        group by pid
   )  hp on hp.assign_key = a.assign_key and hp.pid = p.pid
where p_.assign_key = ?   
group by p_.assign_key, p_.pid
order by p_.ordinal_number


.key=GET_ASSIGNMENT_STUDENTS
## Get student assigned to a given Assignment

select vu.uid, u.user_name 
from HA_USER u
  JOIN v_ASSIGNMENT_USERS vu on vu.uid = u.uid
where assign_key = ?




.key=GET_USER_INFO_STATS


select sum(active_minutes) as active_minutes
from 	CM_USER_BUSY
where uid = ?


.key=USER_ACTIVE_TIME_FOR_DATE_RANGE

SELECT  sum(active_minutes) as active_minutes
  FROM 	CM_USER_BUSY
 WHERE  uid = ?
   AND  date(busy_time) between ? and ?


.key=GET_USER_ACTIVITY_LOG

select date(busy_time) as activity_date, active_minutes
from CM_USER_BUSY 
where uid = ?
group by date(busy_time)

.key=USER_ACTIVITY_LOG_FOR_DATE_RANGE

SELECT  date(busy_time) as activity_date, sum(active_minutes) as active_minutes
  FROM  CM_USER_BUSY 
 WHERE  uid = ?
   AND  date(busy_time) between ? and ?
GROUP BY date(busy_time)
ORDER BY busy_time desc


.key=GET_STUDENT_ASSIGNMENT_PROBLEM

select a.status as assignment_status,
       p.ordinal_number,
       p.id,
       p.lesson,
       p.lesson_file,
       p.label,
       s.status as problem_status,
       s.is_graded
from   CM_ASSIGNMENT a
       join CM_ASSIGNMENT_PIDS p
         on p.assign_key = a.assign_key
       join CM_ASSIGNMENT_PIDS_USER pu 
         on pu.apid_id = p.id         
       left join CM_ASSIGNMENT_PID_STATUS s
              on s.assign_key = p.assign_key
                 and s.uid = pu.uid
                 and s.pid = pu.pid
where  pu.uid = ?
       and p.assign_key = ?
       and pu.pid = ?


.key=GET_STUDENT_ASSIGNMENT_USER_INFO

 select u.user_name, a.status, a.due_date, a.close_past_due, ua.is_graded,ua.turn_in_date,ua.last_access, a.is_prevent_lesson
 from  HA_USER u JOIN CM_ASSIGNMENT a  
     on a.group_id = u.group_id 
 JOIN CM_ASSIGNMENT_USER ua 
     ON (ua.assign_key = a.assign_key and ua.uid = u.uid)
where u.uid = ? 
and a.assign_key = ?
        

        
.key=GET_LESSON_TREE

select distinct s.name as subject,
                lesson,
                file
from   HA_PROGRAM_LESSONS_static l
  JOIN SUBJECT  s on s.subj_id = l.subject
where  subject is not null
       and subject > ''
order  by s.grade_level,
          lesson 

          
          
          
.key=RESET_USER_LESSON 

delete
from HA_SOLUTION_CONTEXT
where run_id = ?
and pid in (
	select distinct pid
	from HA_TEST_RUN_LESSON l
	   JOIN HA_TEST_RUN_LESSON_PID p on p.lid = l.id
	where l.run_id = ?
	and lesson_number = ?
)



.key=RESET_USER_LESSON_PROBLEM 
## reset a single problem in a
## prescription's lesson.

delete
from HA_SOLUTION_CONTEXT
where run_id = ?
and pid = ?




.key=GET_ADMIN_WEBLINKS

select *
from CM_WEBLINK
where admin_id = ?
  and is_public = 0

union 

select *
from CM_WEBLINK w
where is_public = 1
  and 1 = ?
  and exists (
     select 'x'
     from   CM_GROUP g
     join HA_USER u on u.group_id = g.id
     where u.admin_id  = ?
       and g.no_public_weblinks = 0
  )
order by name

#
# CmPaymentDao

#
# Save Payment

.key=PAYMENT_CREATE

insert into CM_PAYMENT (transaction_id, student_uid, amount, is_success, create_date)
values(?,?,?,?,now())


.key=GET_TEST_DEF_CONFIG

select test_config_json from HA_TEST_DEF where subj_id = ? and prog_id = ? and is_active in (1,2)
